{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pulsefire","title":"Pulsefire","text":"<p>Pulsefire is a modern and flexible Riot Games Python SDK. It was built to be simple to use, highly configurable, and extendable. Objects and client responses are fully typed to speed up coding efficiency. With support for community resources such as CDragon.</p> <p>For developers who want to use pulsefire for typing purposes only, alternative packages containing only the <code>pulsefire.schemas</code> module are available in both python and typescript.</p> <p>This package is a modern replacement of Pyot. (1)</p> <ol> <li>The predecessor has proved to be overly complex, hard to customize or extend, and contains an increased amount of implicit syntaxes that go against best practices. By comparison, code clarity has greatly improved and speed performance is more than 10x faster.</li> </ol> <p>Get Started</p>"},{"location":"changelog/v1.1/","title":"Changelog / v1.1","text":"<ul> <li>Reworked rate limiter implementation.</li> <li>Support for centralized rate limiting through proxying.</li> <li>Fixed typing errors in endpoints and schemas.</li> </ul>"},{"location":"changelog/v1.2/","title":"Changelog / v1.2","text":"<ul> <li>Disallow usage of clients without context manager.</li> <li>Removed client context manager as a decorator.</li> <li>Improved documentations.</li> <li>Fixed rate issues with rate limiter.</li> </ul>"},{"location":"changelog/v2.0/","title":"Changelog / v2.0","text":"<ul> <li>Reworked cache implementation.</li> <li>Added support for <code>diskcache</code>.</li> <li>Reorganized package modules to remove <code>base.py</code>.</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>This section contains API reference of Pulsefire.</p> <p>Special notations</p> <p>Some signatures defaults to Ellipsis <code>...</code>, these are used for allowing specific parameters to not be provided on call, they are ignored and simply not provided, but they are required to exist before commiting the action, this is useful when the paramater is being added from another source, for example the <code>default_params</code> from a client.</p>"},{"location":"reference/caches/base-cache/","title":"BaseCache","text":"<pre><code>from pulsefire.caches import BaseCache \n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base cache class.</p> <p>Inherit from this class to implement a cache.</p> Source code in <code>pulsefire/caches.py</code> <pre><code>class BaseCache(abc.ABC):\n    \"\"\"Base cache class.\n\n    Inherit from this class to implement a cache.\n    \"\"\"\n\n    @abc.abstractmethod\n    async def get[T](self, key: str) -&gt; T:\n        \"\"\"Get a value from cache.\"\"\"\n\n    @abc.abstractmethod\n    async def set(self, key: str, value: Any, ttl: float) -&gt; None:\n        \"\"\"Set a value to cache.\"\"\"\n\n    @abc.abstractmethod\n    async def clear(self) -&gt; None:\n        \"\"\"Clear all values in cache.\"\"\"\n</code></pre>"},{"location":"reference/caches/base-cache/#pulsefire.caches.BaseCache-functions","title":"Functions","text":""},{"location":"reference/caches/base-cache/#pulsefire.caches.BaseCache.get","title":"get  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>get(key: str) -&gt; T\n</code></pre> <p>Get a value from cache.</p> Source code in <code>pulsefire/caches.py</code> <pre><code>@abc.abstractmethod\nasync def get[T](self, key: str) -&gt; T:\n    \"\"\"Get a value from cache.\"\"\"\n</code></pre>"},{"location":"reference/caches/base-cache/#pulsefire.caches.BaseCache.set","title":"set  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>set(key: str, value: Any, ttl: float) -&gt; None\n</code></pre> <p>Set a value to cache.</p> Source code in <code>pulsefire/caches.py</code> <pre><code>@abc.abstractmethod\nasync def set(self, key: str, value: Any, ttl: float) -&gt; None:\n    \"\"\"Set a value to cache.\"\"\"\n</code></pre>"},{"location":"reference/caches/base-cache/#pulsefire.caches.BaseCache.clear","title":"clear  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear all values in cache.</p> Source code in <code>pulsefire/caches.py</code> <pre><code>@abc.abstractmethod\nasync def clear(self) -&gt; None:\n    \"\"\"Clear all values in cache.\"\"\"\n</code></pre>"},{"location":"reference/caches/disk-cache/","title":"DiskCache","text":"<pre><code>from pulsefire.caches import DiskCache \n</code></pre> <p>               Bases: <code>BaseCache</code></p> <p>Disk Cache.</p> <p>Requires <code>diskcache</code> installed. This cache lives on disk, meaning cheaper storage but slower access.</p> <p>Example: <pre><code>DiskCache() # Cache on tmp\nDiskCache(\"folder\") # Cache on folder/\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | None</code> <p>Cache directory, uses tmp if None.</p> <code>None</code> <code>shards</code> <code>int</code> <p>Number of shards to distribute writes.</p> <code>8</code> <code>serializer</code> <p>Serializer package supporting <code>loads</code> and <code>dumps</code>.</p> <code>pickle</code> Source code in <code>pulsefire/caches.py</code> <pre><code>class DiskCache(BaseCache):\n    \"\"\"Disk Cache.\n\n    Requires `diskcache` installed. This cache lives on disk, meaning cheaper storage but slower access.\n\n    Example:\n    ```python\n    DiskCache() # Cache on tmp\n    DiskCache(\"folder\") # Cache on folder/\n    ```\n\n    Parameters:\n        directory: Cache directory, uses tmp if None.\n        shards: Number of shards to distribute writes.\n        serializer: Serializer package supporting `loads` and `dumps`.\n    \"\"\"\n\n    def __init__(self, directory: str | None = None, shards: int = 8, serializer=pickle) -&gt; None:\n        import diskcache\n        self.directory = directory\n        self.serializer = serializer\n        self.cache = diskcache.FanoutCache(directory, shards)\n\n    @sync_to_async()\n    def get[T](self, key: str) -&gt; T:\n        value = self.cache.get(key)\n        if value is None:\n            raise KeyError(key)\n        return self.serializer.loads(value)\n\n    @sync_to_async()\n    def set(self, key: str, value: Any, ttl: float) -&gt; None:\n        if ttl &lt;= 0:\n            return\n        if math.isinf(ttl):\n            ttl = None\n        self.cache.set(key, self.serializer.dumps(value), ttl)\n\n    @sync_to_async()\n    def clear(self) -&gt; None:\n        self.cache.clear()\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache-attributes","title":"Attributes","text":""},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = directory\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.serializer","title":"serializer  <code>instance-attribute</code>","text":"<pre><code>serializer = serializer\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.cache","title":"cache  <code>instance-attribute</code>","text":"<pre><code>cache = FanoutCache(directory, shards)\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache-functions","title":"Functions","text":""},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.__init__","title":"__init__","text":"<pre><code>__init__(\n    directory: str | None = None, shards: int = 8, serializer=pickle\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>def __init__(self, directory: str | None = None, shards: int = 8, serializer=pickle) -&gt; None:\n    import diskcache\n    self.directory = directory\n    self.serializer = serializer\n    self.cache = diskcache.FanoutCache(directory, shards)\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.get","title":"get","text":"<pre><code>get(key: str) -&gt; T\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>@sync_to_async()\ndef get[T](self, key: str) -&gt; T:\n    value = self.cache.get(key)\n    if value is None:\n        raise KeyError(key)\n    return self.serializer.loads(value)\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.set","title":"set","text":"<pre><code>set(key: str, value: Any, ttl: float) -&gt; None\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>@sync_to_async()\ndef set(self, key: str, value: Any, ttl: float) -&gt; None:\n    if ttl &lt;= 0:\n        return\n    if math.isinf(ttl):\n        ttl = None\n    self.cache.set(key, self.serializer.dumps(value), ttl)\n</code></pre>"},{"location":"reference/caches/disk-cache/#pulsefire.caches.DiskCache.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>@sync_to_async()\ndef clear(self) -&gt; None:\n    self.cache.clear()\n</code></pre>"},{"location":"reference/caches/memory-cache/","title":"MemoryCache","text":"<pre><code>from pulsefire.caches import MemoryCache \n</code></pre> <p>               Bases: <code>BaseCache</code></p> <p>Memory Cache.</p> <p>This cache lives in-memory, be aware of memory footprint when caching large responses.</p> <p>Example: <pre><code>MemoryCache()\n</code></pre></p> Source code in <code>pulsefire/caches.py</code> <pre><code>class MemoryCache(BaseCache):\n    \"\"\"Memory Cache.\n\n    This cache lives in-memory, be aware of memory footprint when caching large responses.\n\n    Example:\n    ```python\n    MemoryCache()\n    ```\n    \"\"\"\n\n    cache: dict[str, tuple[Any, float]]\n\n    def __init__(self) -&gt; None:\n        self.cache = {}\n        self.last_expired = time.time()\n\n    async def get[T](self, key: str) -&gt; T:\n        value, expire = self.cache[key]\n        if time.time() &gt; expire:\n            self.cache.pop(key, None)\n            raise KeyError(key)\n        return value\n\n    async def set(self, key: str, value: Any, ttl: float) -&gt; None:\n        if ttl &lt;= 0:\n            return\n        self.cache[key] = [value, time.time() + ttl]\n        if time.time() - self.last_expired &gt; 60:\n            self.last_expired = time.time()\n            for old_key, (_, expire) in self.cache.items():\n                if time.time() &gt; expire:\n                    self.cache.pop(old_key, None)\n\n    async def clear(self) -&gt; None:\n        self.cache.clear()\n</code></pre>"},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache-attributes","title":"Attributes","text":""},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache.cache","title":"cache  <code>instance-attribute</code>","text":"<pre><code>cache: dict[str, tuple[Any, float]] = {}\n</code></pre>"},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache.last_expired","title":"last_expired  <code>instance-attribute</code>","text":"<pre><code>last_expired = time()\n</code></pre>"},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache-functions","title":"Functions","text":""},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.cache = {}\n    self.last_expired = time.time()\n</code></pre>"},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache.get","title":"get  <code>async</code>","text":"<pre><code>get(key: str) -&gt; T\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>async def get[T](self, key: str) -&gt; T:\n    value, expire = self.cache[key]\n    if time.time() &gt; expire:\n        self.cache.pop(key, None)\n        raise KeyError(key)\n    return value\n</code></pre>"},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache.set","title":"set  <code>async</code>","text":"<pre><code>set(key: str, value: Any, ttl: float) -&gt; None\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>async def set(self, key: str, value: Any, ttl: float) -&gt; None:\n    if ttl &lt;= 0:\n        return\n    self.cache[key] = [value, time.time() + ttl]\n    if time.time() - self.last_expired &gt; 60:\n        self.last_expired = time.time()\n        for old_key, (_, expire) in self.cache.items():\n            if time.time() &gt; expire:\n                self.cache.pop(old_key, None)\n</code></pre>"},{"location":"reference/caches/memory-cache/#pulsefire.caches.MemoryCache.clear","title":"clear  <code>async</code>","text":"<pre><code>clear() -&gt; None\n</code></pre> Source code in <code>pulsefire/caches.py</code> <pre><code>async def clear(self) -&gt; None:\n    self.cache.clear()\n</code></pre>"},{"location":"reference/clients/base-client/","title":"BaseClient","text":"<pre><code>from pulsefire.clients import BaseClient\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base client class.</p> <p>Inherit from this class to implement a client.</p> Source code in <code>pulsefire/clients.py</code> <pre><code>class BaseClient(abc.ABC):\n    \"\"\"Base client class.\n\n    Inherit from this class to implement a client.\n    \"\"\"\n\n    base_url: str\n    \"\"\"Base URL, can be extended by `invoke`.\"\"\"\n    default_headers: dict[str, str]\n    \"\"\"Default params (ignores `...`), can be overwritten by `invoke`.\"\"\"\n    default_params: dict[str, Any]\n    \"\"\"Default header params, can be overwritten by `invoke`.\"\"\"\n    default_queries: dict[str, str]\n    \"\"\"Default query params, can be overwritten by `invoke`.\"\"\"\n    middlewares: list[Middleware]\n    \"\"\"Pre and post processors during `invoke`.\"\"\"\n    session: aiohttp.ClientSession | None = None\n    \"\"\"Context manager client session.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        base_url: str,\n        default_params: dict[str, Any] = {},\n        default_headers: dict[str, str] = {},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [],\n    ) -&gt; None:\n        self.base_url = base_url\n        self.default_headers = default_headers\n        self.default_params = default_params\n        self.default_queries = default_queries\n        self.middlewares = middlewares\n        async def run_invocation(invocation: Invocation):\n            return await invocation()\n        self.middleware_begin = run_invocation\n        for middleware in middlewares[::-1]:\n            self.middleware_begin = middleware(self.middleware_begin)\n            if not inspect.iscoroutinefunction(self.middleware_begin):\n                raise TypeError(f\"{self.middleware_begin} is not a coroutine function\")\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;{self.__class__.__name__} id={id(self)}&gt;\"\n\n    async def __aenter__(self):\n        \"\"\"Context manager, in-context invocations will reuse a single `aiohttp.ClientSession`\n        improving performance and memory footprint.\n\n        Raises:\n            RuntimeError: When entering an already entered client.\n        \"\"\"\n        if self.session:\n            raise RuntimeError(f\"{self!r} has been already entered\")\n        self.session = aiohttp.ClientSession()\n        return self\n\n    async def __aexit__(self, *_) -&gt; None:\n        transports = 0\n        transports_closed = asyncio.Event()\n\n        def connection_lost(exc, orig_lost):\n            nonlocal transports\n            try:\n                orig_lost(exc)\n            finally:\n                transports -= 1\n                if transports == 0:\n                    transports_closed.set()\n\n        def eof_received(orig_eof_received):\n            try:\n                orig_eof_received()\n            except AttributeError:\n                pass\n\n        for conn in self.session.connector._conns.values():\n            for handler, _ in conn:\n                proto: asyncio.Protocol = getattr(handler.transport, \"_ssl_protocol\", None)\n                if proto is None:\n                    continue\n                transports += 1\n                orig_lost = proto.connection_lost\n                orig_eof_received = proto.eof_received\n                proto.connection_lost = functools.partial(\n                    connection_lost, orig_lost=orig_lost\n                )\n                proto.eof_received = functools.partial(\n                    eof_received, orig_eof_received=orig_eof_received\n                )\n        if transports == 0:\n            transports_closed.set()\n\n        await self.session.close()\n        await transports_closed.wait()\n        self.session = None\n\n    async def invoke(self, method: HttpMethod, path_or_url: str):\n        \"\"\"Build an Invocation and send through the middlewares.\n\n        Params are automatically grabbed from the outer frame (ignores `...`).\n        The invoker client method is automatically grabbed from the outer frame\n        and passed to the instantiation of Invocation.\n        \"\"\"\n        params = {}\n        for key, value in itertools.chain(self.default_params.items(), sys._getframe(1).f_locals.items()):\n            if key != \"self\" and value != ...:\n                params[key] = value\n        params[\"queries\"] = {**self.default_queries, **params.get(\"queries\", {})}\n        params[\"headers\"] = {**self.default_headers, **params.get(\"headers\", {})}\n        invoker: MethodType | None = getattr(self, sys._getframe(1).f_code.co_name, None)\n        invocation = Invocation(method, self.base_url + path_or_url, params, self.session, invoker=invoker)\n        return await self.middleware_begin(invocation)\n</code></pre>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient-attributes","title":"Attributes","text":""},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.session","title":"session  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>session: ClientSession | None = None\n</code></pre> <p>Context manager client session.</p>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: str = base_url\n</code></pre> <p>Base URL, can be extended by <code>invoke</code>.</p>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.default_headers","title":"default_headers  <code>instance-attribute</code>","text":"<pre><code>default_headers: dict[str, str] = default_headers\n</code></pre> <p>Default params (ignores <code>...</code>), can be overwritten by <code>invoke</code>.</p>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.default_params","title":"default_params  <code>instance-attribute</code>","text":"<pre><code>default_params: dict[str, Any] = default_params\n</code></pre> <p>Default header params, can be overwritten by <code>invoke</code>.</p>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.default_queries","title":"default_queries  <code>instance-attribute</code>","text":"<pre><code>default_queries: dict[str, str] = default_queries\n</code></pre> <p>Default query params, can be overwritten by <code>invoke</code>.</p>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.middlewares","title":"middlewares  <code>instance-attribute</code>","text":"<pre><code>middlewares: list[Middleware] = middlewares\n</code></pre> <p>Pre and post processors during <code>invoke</code>.</p>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.middleware_begin","title":"middleware_begin  <code>instance-attribute</code>","text":"<pre><code>middleware_begin = middleware(middleware_begin)\n</code></pre>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient-functions","title":"Functions","text":""},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    base_url: str,\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = []\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str,\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [],\n) -&gt; None:\n    self.base_url = base_url\n    self.default_headers = default_headers\n    self.default_params = default_params\n    self.default_queries = default_queries\n    self.middlewares = middlewares\n    async def run_invocation(invocation: Invocation):\n        return await invocation()\n    self.middleware_begin = run_invocation\n    for middleware in middlewares[::-1]:\n        self.middleware_begin = middleware(self.middleware_begin)\n        if not inspect.iscoroutinefunction(self.middleware_begin):\n            raise TypeError(f\"{self.middleware_begin} is not a coroutine function\")\n</code></pre>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"&lt;{self.__class__.__name__} id={id(self)}&gt;\"\n</code></pre>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__()\n</code></pre> <p>Context manager, in-context invocations will reuse a single <code>aiohttp.ClientSession</code> improving performance and memory footprint.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>When entering an already entered client.</p> Source code in <code>pulsefire/clients.py</code> <pre><code>async def __aenter__(self):\n    \"\"\"Context manager, in-context invocations will reuse a single `aiohttp.ClientSession`\n    improving performance and memory footprint.\n\n    Raises:\n        RuntimeError: When entering an already entered client.\n    \"\"\"\n    if self.session:\n        raise RuntimeError(f\"{self!r} has been already entered\")\n    self.session = aiohttp.ClientSession()\n    return self\n</code></pre>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.__aexit__","title":"__aexit__  <code>async</code>","text":"<pre><code>__aexit__(*_) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def __aexit__(self, *_) -&gt; None:\n    transports = 0\n    transports_closed = asyncio.Event()\n\n    def connection_lost(exc, orig_lost):\n        nonlocal transports\n        try:\n            orig_lost(exc)\n        finally:\n            transports -= 1\n            if transports == 0:\n                transports_closed.set()\n\n    def eof_received(orig_eof_received):\n        try:\n            orig_eof_received()\n        except AttributeError:\n            pass\n\n    for conn in self.session.connector._conns.values():\n        for handler, _ in conn:\n            proto: asyncio.Protocol = getattr(handler.transport, \"_ssl_protocol\", None)\n            if proto is None:\n                continue\n            transports += 1\n            orig_lost = proto.connection_lost\n            orig_eof_received = proto.eof_received\n            proto.connection_lost = functools.partial(\n                connection_lost, orig_lost=orig_lost\n            )\n            proto.eof_received = functools.partial(\n                eof_received, orig_eof_received=orig_eof_received\n            )\n    if transports == 0:\n        transports_closed.set()\n\n    await self.session.close()\n    await transports_closed.wait()\n    self.session = None\n</code></pre>"},{"location":"reference/clients/base-client/#pulsefire.clients.BaseClient.invoke","title":"invoke  <code>async</code>","text":"<pre><code>invoke(method: HttpMethod, path_or_url: str)\n</code></pre> <p>Build an Invocation and send through the middlewares.</p> <p>Params are automatically grabbed from the outer frame (ignores <code>...</code>). The invoker client method is automatically grabbed from the outer frame and passed to the instantiation of Invocation.</p> Source code in <code>pulsefire/clients.py</code> <pre><code>async def invoke(self, method: HttpMethod, path_or_url: str):\n    \"\"\"Build an Invocation and send through the middlewares.\n\n    Params are automatically grabbed from the outer frame (ignores `...`).\n    The invoker client method is automatically grabbed from the outer frame\n    and passed to the instantiation of Invocation.\n    \"\"\"\n    params = {}\n    for key, value in itertools.chain(self.default_params.items(), sys._getframe(1).f_locals.items()):\n        if key != \"self\" and value != ...:\n            params[key] = value\n    params[\"queries\"] = {**self.default_queries, **params.get(\"queries\", {})}\n    params[\"headers\"] = {**self.default_headers, **params.get(\"headers\", {})}\n    invoker: MethodType | None = getattr(self, sys._getframe(1).f_code.co_name, None)\n    invocation = Invocation(method, self.base_url + path_or_url, params, self.session, invoker=invoker)\n    return await self.middleware_begin(invocation)\n</code></pre>"},{"location":"reference/clients/cdragon-client/","title":"CDragonClient","text":"<pre><code>from pulsefire.clients import CDragonClient\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Community Dragon Client.</p> Resources Support League of Legends \u2705 Legends of Runeterra \u274e Use DDragon instead. Teamfight Tactics \u2705 Valorant \u274e <p>Example: <pre><code>async with CDragonClient(\n    default_params={\"patch\": \"latest\", \"locale\": \"default\"}\n) as client:\n    champion = await client.get_lol_v1_champion(id=777)\n    assert champion[\"name\"] == \"Yone\"\n</code></pre></p> Source code in <code>pulsefire/clients.py</code> <pre><code>class CDragonClient(BaseClient):\n    \"\"\"Community Dragon Client.\n\n    | Resources            | Support                    |\n    | -------------------- | -------------------------- |\n    | League of Legends    | \u2705                         |\n    | Legends of Runeterra | \u274e Use DDragon instead.    |\n    | Teamfight Tactics    | \u2705                         |\n    | Valorant             | \u274e                         |\n\n    Example:\n    ```python\n    async with CDragonClient(\n        default_params={\"patch\": \"latest\", \"locale\": \"default\"}\n    ) as client:\n        champion = await client.get_lol_v1_champion(id=777)\n        assert champion[\"name\"] == \"Yone\"\n    ```\n    \"\"\"\n\n    Patch = Literal[\"latest\", \"pbe\"] | _str\n    Locale = Literal[\n        \"default\", \"ar_ae\", \"cs_cz\", \"de_de\", \"el_gr\", \"en_au\", \"en_gb\", \"en_ph\", \"en_sg\", \"en_us\",\n        \"es_ar\", \"es_es\", \"es_mx\", \"fr_fr\", \"hu_hu\", \"it_it\", \"ja_jp\", \"ko_kr\", \"pl_pl\", \"pt_br\",\n        \"ro_ro\", \"ru_ru\", \"th_th\", \"tr_tr\", \"vi_vn\", \"vn_vn\", \"zh_cn\", \"zh_my\", \"zh_tw\",\n    ] | _str\n\n    def __init__(\n        self,\n        *,\n        base_url: str = \"https://raw.communitydragon.org\",\n        default_params: dict[str, Any] = {\"patch\": ..., \"locale\": ...},\n        default_headers: dict[str, str] = {},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [\n            json_response_middleware(),\n            http_error_middleware(),\n        ],\n    ) -&gt; None:\n        super().__init__(\n            base_url=base_url,\n            default_params=default_params,\n            default_headers=default_headers,\n            default_queries=default_queries,\n            middlewares=middlewares\n        )\n\n    async def get_lol_champion_bin(self, *, patch: Patch = ..., key_lower: str = ...) -&gt; dict[str, CDragonSchema.LolChampionBinValue]:\n        return await self.invoke(\"GET\", \"/{patch}/game/data/characters/{key_lower}/{key_lower}.bin.json\")\n\n    async def get_lol_v1_champion(self, *, patch: Patch = ..., locale: Locale = ..., id: int = ...) -&gt; CDragonSchema.LolV1Champion:\n        return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/champions/{id}.json\")\n\n    async def get_lol_v1_champion_summary(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1ChampionInfo]:\n        return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/champion-summary.json\")\n\n    async def get_lol_v1_items(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1Item]:\n        return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/items.json\")\n\n    async def get_lol_v1_perks(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1Perk]:\n        return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/perks.json\")\n\n    async def get_lol_v1_summoner_spells(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1SummonerSpell]:\n        return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/summoner-spells.json\")\n\n    async def get_lol_v1_profile_icons(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1ProfileIcon]:\n        return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/profile-icons.json\")\n\n    async def get_tft_data(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; CDragonSchema.TftData:\n        return await self.invoke(\"GET\", \"/{patch}/cdragon/tft/{locale}.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient-attributes","title":"Attributes","text":""},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.Patch","title":"Patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Patch = Literal['latest', 'pbe'] | _str\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.Locale","title":"Locale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Locale = (\n    Literal[\n        \"default\",\n        \"ar_ae\",\n        \"cs_cz\",\n        \"de_de\",\n        \"el_gr\",\n        \"en_au\",\n        \"en_gb\",\n        \"en_ph\",\n        \"en_sg\",\n        \"en_us\",\n        \"es_ar\",\n        \"es_es\",\n        \"es_mx\",\n        \"fr_fr\",\n        \"hu_hu\",\n        \"it_it\",\n        \"ja_jp\",\n        \"ko_kr\",\n        \"pl_pl\",\n        \"pt_br\",\n        \"ro_ro\",\n        \"ru_ru\",\n        \"th_th\",\n        \"tr_tr\",\n        \"vi_vn\",\n        \"vn_vn\",\n        \"zh_cn\",\n        \"zh_my\",\n        \"zh_tw\",\n    ]\n    | _str\n)\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient-functions","title":"Functions","text":""},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    base_url: str = \"https://raw.communitydragon.org\",\n    default_params: dict[str, Any] = {\"patch\": ..., \"locale\": ...},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ]\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str = \"https://raw.communitydragon.org\",\n    default_params: dict[str, Any] = {\"patch\": ..., \"locale\": ...},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ],\n) -&gt; None:\n    super().__init__(\n        base_url=base_url,\n        default_params=default_params,\n        default_headers=default_headers,\n        default_queries=default_queries,\n        middlewares=middlewares\n    )\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_champion_bin","title":"get_lol_champion_bin  <code>async</code>","text":"<pre><code>get_lol_champion_bin(\n    *, patch: Patch = ..., key_lower: str = ...\n) -&gt; dict[str, CDragonSchema.LolChampionBinValue]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_bin(self, *, patch: Patch = ..., key_lower: str = ...) -&gt; dict[str, CDragonSchema.LolChampionBinValue]:\n    return await self.invoke(\"GET\", \"/{patch}/game/data/characters/{key_lower}/{key_lower}.bin.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_v1_champion","title":"get_lol_v1_champion  <code>async</code>","text":"<pre><code>get_lol_v1_champion(\n    *, patch: Patch = ..., locale: Locale = ..., id: int = ...\n) -&gt; CDragonSchema.LolV1Champion\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_v1_champion(self, *, patch: Patch = ..., locale: Locale = ..., id: int = ...) -&gt; CDragonSchema.LolV1Champion:\n    return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/champions/{id}.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_v1_champion_summary","title":"get_lol_v1_champion_summary  <code>async</code>","text":"<pre><code>get_lol_v1_champion_summary(\n    *, patch: Patch = ..., locale: Locale = ...\n) -&gt; list[CDragonSchema.LolV1ChampionInfo]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_v1_champion_summary(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1ChampionInfo]:\n    return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/champion-summary.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_v1_items","title":"get_lol_v1_items  <code>async</code>","text":"<pre><code>get_lol_v1_items(\n    *, patch: Patch = ..., locale: Locale = ...\n) -&gt; list[CDragonSchema.LolV1Item]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_v1_items(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1Item]:\n    return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/items.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_v1_perks","title":"get_lol_v1_perks  <code>async</code>","text":"<pre><code>get_lol_v1_perks(\n    *, patch: Patch = ..., locale: Locale = ...\n) -&gt; list[CDragonSchema.LolV1Perk]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_v1_perks(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1Perk]:\n    return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/perks.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_v1_summoner_spells","title":"get_lol_v1_summoner_spells  <code>async</code>","text":"<pre><code>get_lol_v1_summoner_spells(\n    *, patch: Patch = ..., locale: Locale = ...\n) -&gt; list[CDragonSchema.LolV1SummonerSpell]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_v1_summoner_spells(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1SummonerSpell]:\n    return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/summoner-spells.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_lol_v1_profile_icons","title":"get_lol_v1_profile_icons  <code>async</code>","text":"<pre><code>get_lol_v1_profile_icons(\n    *, patch: Patch = ..., locale: Locale = ...\n) -&gt; list[CDragonSchema.LolV1ProfileIcon]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_v1_profile_icons(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; list[CDragonSchema.LolV1ProfileIcon]:\n    return await self.invoke(\"GET\", \"/{patch}/plugins/rcp-be-lol-game-data/global/{locale}/v1/profile-icons.json\")\n</code></pre>"},{"location":"reference/clients/cdragon-client/#pulsefire.clients.CDragonClient.get_tft_data","title":"get_tft_data  <code>async</code>","text":"<pre><code>get_tft_data(\n    *, patch: Patch = ..., locale: Locale = ...\n) -&gt; CDragonSchema.TftData\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_data(self, *, patch: Patch = ..., locale: Locale = ...) -&gt; CDragonSchema.TftData:\n    return await self.invoke(\"GET\", \"/{patch}/cdragon/tft/{locale}.json\")\n</code></pre>"},{"location":"reference/clients/ddragon-client/","title":"DDragonClient","text":"<pre><code>from pulsefire.clients import DDragonClient\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Data Dragon Client.</p> Resources Support League of Legends \u274e Use CDragon instead. Teamfight Tactics \u274e Legends of Runeterra \u2705 Valorant \u274e <p>Example: <pre><code>async with DDragonClient(\n    default_params={\"patch\": \"latest\", \"locale\": \"en_us\"}\n) as client:\n    cards = await client.get_lor_cards(set=8)\n    assert cards[0][\"cardCode\"]\n</code></pre></p> Source code in <code>pulsefire/clients.py</code> <pre><code>class DDragonClient(BaseClient):\n    \"\"\"Data Dragon Client.\n\n    | Resources            | Support                    |\n    | -------------------- | -------------------------- |\n    | League of Legends    | \u274e Use CDragon instead.    |\n    | Teamfight Tactics    | \u274e                         |\n    | Legends of Runeterra | \u2705                         |\n    | Valorant             | \u274e                         |\n\n    Example:\n    ```python\n    async with DDragonClient(\n        default_params={\"patch\": \"latest\", \"locale\": \"en_us\"}\n    ) as client:\n        cards = await client.get_lor_cards(set=8)\n        assert cards[0][\"cardCode\"]\n    ```\n    \"\"\"\n\n    Patch = Literal[\"latest\"] | _str\n    Locale = Literal[\n        \"ar_ae\", \"cs_cz\", \"de_de\", \"el_gr\", \"en_au\", \"en_gb\", \"en_ph\", \"en_sg\", \"en_us\",\n        \"es_ar\", \"es_es\", \"es_mx\", \"fr_fr\", \"hu_hu\", \"it_it\", \"ja_jp\", \"ko_kr\", \"pl_pl\", \"pt_br\",\n        \"ro_ro\", \"ru_ru\", \"th_th\", \"tr_tr\", \"vi_vn\", \"vn_vn\", \"zh_cn\", \"zh_my\", \"zh_tw\",\n    ] | _str\n\n    def __init__(\n        self,\n        *,\n        base_url: str = \"https://dd.b.pvp.net\",\n        default_params: dict[str, Any] = {\"patch\": ..., \"locale\": ...},\n        default_headers: dict[str, str] = {},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [\n            json_response_middleware(),\n            http_error_middleware(),\n        ],\n    ) -&gt; None:\n        super().__init__(\n            base_url=base_url,\n            default_params=default_params,\n            default_headers=default_headers,\n            default_queries=default_queries,\n            middlewares=middlewares\n        )\n\n    async def get_lor_cards(self, *, patch: Patch = ..., locale: Locale = ..., set: str | int = ...) -&gt; list[DDragonSchema.LorCard]:\n        return await self.invoke(\"GET\", \"/{patch}/set{set}/{locale}/data/set{set}-{locale}.json\")\n</code></pre>"},{"location":"reference/clients/ddragon-client/#pulsefire.clients.DDragonClient-attributes","title":"Attributes","text":""},{"location":"reference/clients/ddragon-client/#pulsefire.clients.DDragonClient.Patch","title":"Patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Patch = Literal['latest'] | _str\n</code></pre>"},{"location":"reference/clients/ddragon-client/#pulsefire.clients.DDragonClient.Locale","title":"Locale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Locale = (\n    Literal[\n        \"ar_ae\",\n        \"cs_cz\",\n        \"de_de\",\n        \"el_gr\",\n        \"en_au\",\n        \"en_gb\",\n        \"en_ph\",\n        \"en_sg\",\n        \"en_us\",\n        \"es_ar\",\n        \"es_es\",\n        \"es_mx\",\n        \"fr_fr\",\n        \"hu_hu\",\n        \"it_it\",\n        \"ja_jp\",\n        \"ko_kr\",\n        \"pl_pl\",\n        \"pt_br\",\n        \"ro_ro\",\n        \"ru_ru\",\n        \"th_th\",\n        \"tr_tr\",\n        \"vi_vn\",\n        \"vn_vn\",\n        \"zh_cn\",\n        \"zh_my\",\n        \"zh_tw\",\n    ]\n    | _str\n)\n</code></pre>"},{"location":"reference/clients/ddragon-client/#pulsefire.clients.DDragonClient-functions","title":"Functions","text":""},{"location":"reference/clients/ddragon-client/#pulsefire.clients.DDragonClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    base_url: str = \"https://dd.b.pvp.net\",\n    default_params: dict[str, Any] = {\"patch\": ..., \"locale\": ...},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ]\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str = \"https://dd.b.pvp.net\",\n    default_params: dict[str, Any] = {\"patch\": ..., \"locale\": ...},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ],\n) -&gt; None:\n    super().__init__(\n        base_url=base_url,\n        default_params=default_params,\n        default_headers=default_headers,\n        default_queries=default_queries,\n        middlewares=middlewares\n    )\n</code></pre>"},{"location":"reference/clients/ddragon-client/#pulsefire.clients.DDragonClient.get_lor_cards","title":"get_lor_cards  <code>async</code>","text":"<pre><code>get_lor_cards(\n    *, patch: Patch = ..., locale: Locale = ..., set: str | int = ...\n) -&gt; list[DDragonSchema.LorCard]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lor_cards(self, *, patch: Patch = ..., locale: Locale = ..., set: str | int = ...) -&gt; list[DDragonSchema.LorCard]:\n    return await self.invoke(\"GET\", \"/{patch}/set{set}/{locale}/data/set{set}-{locale}.json\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/","title":"MarlonAPIClient","text":"<pre><code>from pulsefire.clients import MarlonAPIClient\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Marlon API Client.</p> Resources Support League of Legends \u274e Legends of Runeterra \u274e Teamfight Tactics \u274e Valorant \u2705 <p>Does not support versioning by patch.</p> <p>Example: <pre><code>async with MarlonAPIClient() as client:\n    agents = await client.get_val_v1_agents()\n    assert agents[0][\"uuid\"]\n</code></pre></p> Source code in <code>pulsefire/clients.py</code> <pre><code>class MarlonAPIClient(BaseClient):\n    \"\"\"Marlon API Client.\n\n    | Resources            | Support                    |\n    | -------------------- | -------------------------- |\n    | League of Legends    | \u274e                         |\n    | Legends of Runeterra | \u274e                         |\n    | Teamfight Tactics    | \u274e                         |\n    | Valorant             | \u2705                         |\n\n    Does not support versioning by patch.\n\n    Example:\n    ```python\n    async with MarlonAPIClient() as client:\n        agents = await client.get_val_v1_agents()\n        assert agents[0][\"uuid\"]\n    ```\n    \"\"\"\n\n    class ResponseData[T](TypedDict):\n        status: int\n        data: T\n\n    def __init__(\n        self,\n        *,\n        base_url: str = \"https://valorant-api.com\",\n        default_params: dict[str, Any] = {},\n        default_headers: dict[str, str] = {},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [\n            json_response_middleware(),\n            http_error_middleware(),\n        ],\n    ) -&gt; None:\n        super().__init__(\n            base_url=base_url,\n            default_params=default_params,\n            default_headers=default_headers,\n            default_queries=default_queries,\n            middlewares=middlewares\n        )\n\n    async def get_val_v1_agents(self, *, queries: dict = {\"isPlayableCharacter\": \"true\"}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Agent]]:\n        return await self.invoke(\"GET\", \"/v1/agents\")\n\n    async def get_val_v1_agent(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Agent]:\n        return await self.invoke(\"GET\", \"/v1/agents/{uuid}\")\n\n    async def get_val_v1_buddies(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Buddy]]:\n        return await self.invoke(\"GET\", \"/v1/buddies\")\n\n    async def get_val_v1_buddy(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Buddy]:\n        return await self.invoke(\"GET\", \"/v1/buddies/{uuid}\")\n\n    async def get_val_v1_bundles(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Bundle]]:\n        return await self.invoke(\"GET\", \"/v1/bundles\")\n\n    async def get_val_v1_bundle(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Bundle]:\n        return await self.invoke(\"GET\", \"/v1/bundles/{uuid}\")\n\n    async def get_val_v1_ceremonies(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Ceremony]]:\n        return await self.invoke(\"GET\", \"/v1/ceremonies\")\n\n    async def get_val_v1_ceremony(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Ceremony]:\n        return await self.invoke(\"GET\", \"/v1/ceremonies/{uuid}\")\n\n    async def get_val_v1_competitive_tiers(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1CompetitiveTier]]:\n        return await self.invoke(\"GET\", \"/v1/competitivetiers\")\n\n    async def get_val_v1_competitive_tier(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1CompetitiveTier]:\n        return await self.invoke(\"GET\", \"/v1/competitivetiers/{uuid}\")\n\n    async def get_val_v1_content_tiers(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1ContentTier]]:\n        return await self.invoke(\"GET\", \"/v1/contenttiers\")\n\n    async def get_val_v1_content_tier(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1ContentTier]:\n        return await self.invoke(\"GET\", \"/v1/contenttiers/{uuid}\")\n\n    async def get_val_v1_contracts(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Contract]]:\n        return await self.invoke(\"GET\", \"/v1/contracts\")\n\n    async def get_val_v1_contract(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Contract]:\n        return await self.invoke(\"GET\", \"/v1/contracts/{uuid}\")\n\n    async def get_val_v1_currencies(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Contract]]:\n        return await self.invoke(\"GET\", \"/v1/currencies\")\n\n    async def get_val_v1_currency(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Contract]:\n        return await self.invoke(\"GET\", \"/v1/currencies/{uuid}\")\n\n    async def get_val_v1_events(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Event]]:\n        return await self.invoke(\"GET\", \"/v1/events\")\n\n    async def get_val_v1_event(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Event]:\n        return await self.invoke(\"GET\", \"/v1/events/{uuid}\")\n\n    async def get_val_v1_gamemodes(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1GameMode]]:\n        return await self.invoke(\"GET\", \"/v1/gamemodes\")\n\n    async def get_val_v1_gamemode(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1GameMode]:\n        return await self.invoke(\"GET\", \"/v1/gamemodes/{uuid}\")\n\n    async def get_val_v1_gears(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Gear]]:\n        return await self.invoke(\"GET\", \"/v1/gear\")\n\n    async def get_val_v1_gear(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Gear]:\n        return await self.invoke(\"GET\", \"/v1/gear/{uuid}\")\n\n    async def get_val_v1_maps(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Map]]:\n        return await self.invoke(\"GET\", \"/v1/maps\")\n\n    async def get_val_v1_map(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Map]:\n        return await self.invoke(\"GET\", \"/v1/maps/{uuid}\")\n\n    async def get_val_v1_playercards(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1PlayerCard]]:\n        return await self.invoke(\"GET\", \"/v1/playercards\")\n\n    async def get_val_v1_playercard(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1PlayerCard]:\n        return await self.invoke(\"GET\", \"/v1/playercards/{uuid}\")\n\n    async def get_val_v1_playertitles(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1PlayerTitle]]:\n        return await self.invoke(\"GET\", \"/v1/playertitles\")\n\n    async def get_val_v1_playertitle(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1PlayerTitle]:\n        return await self.invoke(\"GET\", \"/v1/playertitles/{uuid}\")\n\n    async def get_val_v1_seasons(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Season]]:\n        return await self.invoke(\"GET\", \"/v1/seasons\")\n\n    async def get_val_v1_season(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Season]:\n        return await self.invoke(\"GET\", \"/v1/seasons/{uuid}\")\n\n    async def get_val_v1_sprays(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Spray]]:\n        return await self.invoke(\"GET\", \"/v1/sprays\")\n\n    async def get_val_v1_spray(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Spray]:\n        return await self.invoke(\"GET\", \"/v1/sprays/{uuid}\")\n\n    async def get_val_v1_themes(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Theme]]:\n        return await self.invoke(\"GET\", \"/v1/themes\")\n\n    async def get_val_v1_theme(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Theme]:\n        return await self.invoke(\"GET\", \"/v1/themes/{uuid}\")\n\n    async def get_val_v1_weapons(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Weapon]]:\n        return await self.invoke(\"GET\", \"/v1/weapons\")\n\n    async def get_val_v1_weapon(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Weapon]:\n        return await self.invoke(\"GET\", \"/v1/weapons/{uuid}\")\n\n    async def get_val_v1_version(self, *, queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Version]:\n        return await self.invoke(\"GET\", \"/v1/version\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient-classes","title":"Classes","text":""},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.ResponseData","title":"ResponseData","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>pulsefire/clients.py</code> <pre><code>class ResponseData[T](TypedDict):\n    status: int\n    data: T\n</code></pre> Attributes status <code>instance-attribute</code> <pre><code>status: int\n</code></pre> data <code>instance-attribute</code> <pre><code>data: T\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient-functions","title":"Functions","text":""},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    base_url: str = \"https://valorant-api.com\",\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ]\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str = \"https://valorant-api.com\",\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ],\n) -&gt; None:\n    super().__init__(\n        base_url=base_url,\n        default_params=default_params,\n        default_headers=default_headers,\n        default_queries=default_queries,\n        middlewares=middlewares\n    )\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_agents","title":"get_val_v1_agents  <code>async</code>","text":"<pre><code>get_val_v1_agents(\n    *, queries: dict = {\"isPlayableCharacter\": \"true\"}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Agent]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_agents(self, *, queries: dict = {\"isPlayableCharacter\": \"true\"}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Agent]]:\n    return await self.invoke(\"GET\", \"/v1/agents\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_agent","title":"get_val_v1_agent  <code>async</code>","text":"<pre><code>get_val_v1_agent(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Agent]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_agent(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Agent]:\n    return await self.invoke(\"GET\", \"/v1/agents/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_buddies","title":"get_val_v1_buddies  <code>async</code>","text":"<pre><code>get_val_v1_buddies(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Buddy]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_buddies(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Buddy]]:\n    return await self.invoke(\"GET\", \"/v1/buddies\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_buddy","title":"get_val_v1_buddy  <code>async</code>","text":"<pre><code>get_val_v1_buddy(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Buddy]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_buddy(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Buddy]:\n    return await self.invoke(\"GET\", \"/v1/buddies/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_bundles","title":"get_val_v1_bundles  <code>async</code>","text":"<pre><code>get_val_v1_bundles(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Bundle]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_bundles(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Bundle]]:\n    return await self.invoke(\"GET\", \"/v1/bundles\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_bundle","title":"get_val_v1_bundle  <code>async</code>","text":"<pre><code>get_val_v1_bundle(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Bundle]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_bundle(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Bundle]:\n    return await self.invoke(\"GET\", \"/v1/bundles/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_ceremonies","title":"get_val_v1_ceremonies  <code>async</code>","text":"<pre><code>get_val_v1_ceremonies(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Ceremony]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_ceremonies(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Ceremony]]:\n    return await self.invoke(\"GET\", \"/v1/ceremonies\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_ceremony","title":"get_val_v1_ceremony  <code>async</code>","text":"<pre><code>get_val_v1_ceremony(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Ceremony]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_ceremony(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Ceremony]:\n    return await self.invoke(\"GET\", \"/v1/ceremonies/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_competitive_tiers","title":"get_val_v1_competitive_tiers  <code>async</code>","text":"<pre><code>get_val_v1_competitive_tiers(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1CompetitiveTier]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_competitive_tiers(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1CompetitiveTier]]:\n    return await self.invoke(\"GET\", \"/v1/competitivetiers\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_competitive_tier","title":"get_val_v1_competitive_tier  <code>async</code>","text":"<pre><code>get_val_v1_competitive_tier(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1CompetitiveTier]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_competitive_tier(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1CompetitiveTier]:\n    return await self.invoke(\"GET\", \"/v1/competitivetiers/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_content_tiers","title":"get_val_v1_content_tiers  <code>async</code>","text":"<pre><code>get_val_v1_content_tiers(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1ContentTier]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_content_tiers(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1ContentTier]]:\n    return await self.invoke(\"GET\", \"/v1/contenttiers\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_content_tier","title":"get_val_v1_content_tier  <code>async</code>","text":"<pre><code>get_val_v1_content_tier(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1ContentTier]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_content_tier(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1ContentTier]:\n    return await self.invoke(\"GET\", \"/v1/contenttiers/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_contracts","title":"get_val_v1_contracts  <code>async</code>","text":"<pre><code>get_val_v1_contracts(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Contract]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_contracts(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Contract]]:\n    return await self.invoke(\"GET\", \"/v1/contracts\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_contract","title":"get_val_v1_contract  <code>async</code>","text":"<pre><code>get_val_v1_contract(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Contract]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_contract(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Contract]:\n    return await self.invoke(\"GET\", \"/v1/contracts/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_currencies","title":"get_val_v1_currencies  <code>async</code>","text":"<pre><code>get_val_v1_currencies(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Contract]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_currencies(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Contract]]:\n    return await self.invoke(\"GET\", \"/v1/currencies\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_currency","title":"get_val_v1_currency  <code>async</code>","text":"<pre><code>get_val_v1_currency(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Contract]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_currency(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Contract]:\n    return await self.invoke(\"GET\", \"/v1/currencies/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_events","title":"get_val_v1_events  <code>async</code>","text":"<pre><code>get_val_v1_events(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Event]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_events(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Event]]:\n    return await self.invoke(\"GET\", \"/v1/events\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_event","title":"get_val_v1_event  <code>async</code>","text":"<pre><code>get_val_v1_event(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Event]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_event(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Event]:\n    return await self.invoke(\"GET\", \"/v1/events/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_gamemodes","title":"get_val_v1_gamemodes  <code>async</code>","text":"<pre><code>get_val_v1_gamemodes(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1GameMode]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_gamemodes(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1GameMode]]:\n    return await self.invoke(\"GET\", \"/v1/gamemodes\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_gamemode","title":"get_val_v1_gamemode  <code>async</code>","text":"<pre><code>get_val_v1_gamemode(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1GameMode]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_gamemode(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1GameMode]:\n    return await self.invoke(\"GET\", \"/v1/gamemodes/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_gears","title":"get_val_v1_gears  <code>async</code>","text":"<pre><code>get_val_v1_gears(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Gear]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_gears(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Gear]]:\n    return await self.invoke(\"GET\", \"/v1/gear\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_gear","title":"get_val_v1_gear  <code>async</code>","text":"<pre><code>get_val_v1_gear(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Gear]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_gear(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Gear]:\n    return await self.invoke(\"GET\", \"/v1/gear/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_maps","title":"get_val_v1_maps  <code>async</code>","text":"<pre><code>get_val_v1_maps(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Map]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_maps(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Map]]:\n    return await self.invoke(\"GET\", \"/v1/maps\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_map","title":"get_val_v1_map  <code>async</code>","text":"<pre><code>get_val_v1_map(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Map]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_map(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Map]:\n    return await self.invoke(\"GET\", \"/v1/maps/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_playercards","title":"get_val_v1_playercards  <code>async</code>","text":"<pre><code>get_val_v1_playercards(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1PlayerCard]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_playercards(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1PlayerCard]]:\n    return await self.invoke(\"GET\", \"/v1/playercards\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_playercard","title":"get_val_v1_playercard  <code>async</code>","text":"<pre><code>get_val_v1_playercard(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1PlayerCard]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_playercard(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1PlayerCard]:\n    return await self.invoke(\"GET\", \"/v1/playercards/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_playertitles","title":"get_val_v1_playertitles  <code>async</code>","text":"<pre><code>get_val_v1_playertitles(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1PlayerTitle]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_playertitles(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1PlayerTitle]]:\n    return await self.invoke(\"GET\", \"/v1/playertitles\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_playertitle","title":"get_val_v1_playertitle  <code>async</code>","text":"<pre><code>get_val_v1_playertitle(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1PlayerTitle]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_playertitle(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1PlayerTitle]:\n    return await self.invoke(\"GET\", \"/v1/playertitles/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_seasons","title":"get_val_v1_seasons  <code>async</code>","text":"<pre><code>get_val_v1_seasons(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Season]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_seasons(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Season]]:\n    return await self.invoke(\"GET\", \"/v1/seasons\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_season","title":"get_val_v1_season  <code>async</code>","text":"<pre><code>get_val_v1_season(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Season]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_season(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Season]:\n    return await self.invoke(\"GET\", \"/v1/seasons/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_sprays","title":"get_val_v1_sprays  <code>async</code>","text":"<pre><code>get_val_v1_sprays(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Spray]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_sprays(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Spray]]:\n    return await self.invoke(\"GET\", \"/v1/sprays\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_spray","title":"get_val_v1_spray  <code>async</code>","text":"<pre><code>get_val_v1_spray(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Spray]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_spray(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Spray]:\n    return await self.invoke(\"GET\", \"/v1/sprays/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_themes","title":"get_val_v1_themes  <code>async</code>","text":"<pre><code>get_val_v1_themes(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Theme]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_themes(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Theme]]:\n    return await self.invoke(\"GET\", \"/v1/themes\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_theme","title":"get_val_v1_theme  <code>async</code>","text":"<pre><code>get_val_v1_theme(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Theme]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_theme(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Theme]:\n    return await self.invoke(\"GET\", \"/v1/themes/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_weapons","title":"get_val_v1_weapons  <code>async</code>","text":"<pre><code>get_val_v1_weapons(\n    *, queries: dict = {}\n) -&gt; ResponseData[list[MarlonAPISchema.ValV1Weapon]]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_weapons(self, *, queries: dict = {}) -&gt; ResponseData[list[MarlonAPISchema.ValV1Weapon]]:\n    return await self.invoke(\"GET\", \"/v1/weapons\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_weapon","title":"get_val_v1_weapon  <code>async</code>","text":"<pre><code>get_val_v1_weapon(\n    *, uuid: str = ..., queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Weapon]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_weapon(self, *, uuid: str = ..., queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Weapon]:\n    return await self.invoke(\"GET\", \"/v1/weapons/{uuid}\")\n</code></pre>"},{"location":"reference/clients/marlon-api-client/#pulsefire.clients.MarlonAPIClient.get_val_v1_version","title":"get_val_v1_version  <code>async</code>","text":"<pre><code>get_val_v1_version(\n    *, queries: dict = {}\n) -&gt; ResponseData[MarlonAPISchema.ValV1Version]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_v1_version(self, *, queries: dict = {}) -&gt; ResponseData[MarlonAPISchema.ValV1Version]:\n    return await self.invoke(\"GET\", \"/v1/version\")\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/","title":"MerakiCDNClient","text":"<pre><code>from pulsefire.clients import MerakiCDNClient\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Meraki CDN Client.</p> Resources Support League of Legends \u2705 Legends of Runeterra \u274e Teamfight Tactics \u274e Valorant \u274e <p>Does not support versioning by patch.</p> <p>Example: <pre><code>async with MerakiCDNClient() as client:\n    champion = await client.get_lol_champion(key=\"Yone\")\n    assert champion[\"id\"] == 777\n</code></pre></p> Source code in <code>pulsefire/clients.py</code> <pre><code>class MerakiCDNClient(BaseClient):\n    \"\"\"Meraki CDN Client.\n\n    | Resources            | Support                    |\n    | -------------------- | -------------------------- |\n    | League of Legends    | \u2705                         |\n    | Legends of Runeterra | \u274e                         |\n    | Teamfight Tactics    | \u274e                         |\n    | Valorant             | \u274e                         |\n\n    Does not support versioning by patch.\n\n    Example:\n    ```python\n    async with MerakiCDNClient() as client:\n        champion = await client.get_lol_champion(key=\"Yone\")\n        assert champion[\"id\"] == 777\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        base_url: str = \"https://cdn.merakianalytics.com/riot\",\n        default_params: dict[str, Any] = {},\n        default_headers: dict[str, str] = {},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [\n            json_response_middleware(),\n            http_error_middleware(),\n        ],\n    ) -&gt; None:\n        super().__init__(\n            base_url=base_url,\n            default_params=default_params,\n            default_headers=default_headers,\n            default_queries=default_queries,\n            middlewares=middlewares\n        )\n\n    async def get_lol_champions(self) -&gt; dict[str, MerakiCDNSchema.LolChampion]:\n        return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/champions.json\")\n\n    async def get_lol_champion(self, *, key: str = ...) -&gt; MerakiCDNSchema.LolChampion:\n        return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/champions/{key}.json\")\n\n    async def get_lol_items(self) -&gt; dict[str, MerakiCDNSchema.LolItem]:\n        return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/items.json\")\n\n    async def get_lol_item(self, *, id: int = ...) -&gt; MerakiCDNSchema.LolItem:\n        return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/items/{id}.json\")\n\n    async def get_lol_champion_rates(self) -&gt; MerakiCDNSchema.LolChampionRates:\n        return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/championrates.json\")\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient-functions","title":"Functions","text":""},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    base_url: str = \"https://cdn.merakianalytics.com/riot\",\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ]\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str = \"https://cdn.merakianalytics.com/riot\",\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n    ],\n) -&gt; None:\n    super().__init__(\n        base_url=base_url,\n        default_params=default_params,\n        default_headers=default_headers,\n        default_queries=default_queries,\n        middlewares=middlewares\n    )\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient.get_lol_champions","title":"get_lol_champions  <code>async</code>","text":"<pre><code>get_lol_champions() -&gt; dict[str, MerakiCDNSchema.LolChampion]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champions(self) -&gt; dict[str, MerakiCDNSchema.LolChampion]:\n    return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/champions.json\")\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient.get_lol_champion","title":"get_lol_champion  <code>async</code>","text":"<pre><code>get_lol_champion(*, key: str = ...) -&gt; MerakiCDNSchema.LolChampion\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion(self, *, key: str = ...) -&gt; MerakiCDNSchema.LolChampion:\n    return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/champions/{key}.json\")\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient.get_lol_items","title":"get_lol_items  <code>async</code>","text":"<pre><code>get_lol_items() -&gt; dict[str, MerakiCDNSchema.LolItem]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_items(self) -&gt; dict[str, MerakiCDNSchema.LolItem]:\n    return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/items.json\")\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient.get_lol_item","title":"get_lol_item  <code>async</code>","text":"<pre><code>get_lol_item(*, id: int = ...) -&gt; MerakiCDNSchema.LolItem\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_item(self, *, id: int = ...) -&gt; MerakiCDNSchema.LolItem:\n    return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/items/{id}.json\")\n</code></pre>"},{"location":"reference/clients/meraki-cdn-client/#pulsefire.clients.MerakiCDNClient.get_lol_champion_rates","title":"get_lol_champion_rates  <code>async</code>","text":"<pre><code>get_lol_champion_rates() -&gt; MerakiCDNSchema.LolChampionRates\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_rates(self) -&gt; MerakiCDNSchema.LolChampionRates:\n    return await self.invoke(\"GET\", \"/lol/resources/latest/en-US/championrates.json\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/","title":"RiotAPIClient","text":"<pre><code>from pulsefire.clients import RiotAPIClient\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Riot API Client.</p> Resources Support League of Legends \u2705 Legends of Runeterra \u2705 Teamfight Tactics \u2705 Valorant \u2705 <p>Example: <pre><code>async with RiotAPIClient(\n    default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;}\n) as client:\n    account = await client.get_account_v1_by_riot_id(region=\"americas\", game_name=\"200\", tag_line=\"16384\")\n    summoner = await client.get_lol_summoner_v4_by_puuid(region=\"na1\", puuid=account[\"puuid\"])\n    assert summoner[\"summonerLevel\"] &gt; 200\n</code></pre></p> Source code in <code>pulsefire/clients.py</code> <pre><code>class RiotAPIClient(BaseClient):\n    \"\"\"Riot API Client.\n\n    | Resources            | Support                    |\n    | -------------------- | -------------------------- |\n    | League of Legends    | \u2705                         |\n    | Legends of Runeterra | \u2705                         |\n    | Teamfight Tactics    | \u2705                         |\n    | Valorant             | \u2705                         |\n\n    Example:\n    ```python\n    async with RiotAPIClient(\n        default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;}\n    ) as client:\n        account = await client.get_account_v1_by_riot_id(region=\"americas\", game_name=\"200\", tag_line=\"16384\")\n        summoner = await client.get_lol_summoner_v4_by_puuid(region=\"na1\", puuid=account[\"puuid\"])\n        assert summoner[\"summonerLevel\"] &gt; 200\n    ```\n    \"\"\"\n\n    Region = Literal[\n        \"americas\", \"europe\", \"asia\", \"sea\", \"esports\",\n        \"br1\", \"eun1\", \"euw1\", \"jp1\", \"kr\", \"la1\", \"la2\", \"me1\",\n        \"na1\", \"oc1\", \"tr1\", \"ru\", \"ph2\", \"sg2\", \"th2\", \"tw2\", \"vn2\",\n        \"ap\", \"br\", \"eu\", \"kr\", \"latam\", \"na\",\n    ] | _str\n\n    def __init__(\n        self,\n        *,\n        base_url: str = \"https://{region}.api.riotgames.com\",\n        default_params: dict[str, Any] = {},\n        default_headers: dict[str, str] = {\"X-Riot-Token\": \"\"},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [\n            json_response_middleware(),\n            http_error_middleware(),\n            rate_limiter_middleware(RiotAPIRateLimiter()),\n        ],\n    ) -&gt; None:\n        super().__init__(\n            base_url=base_url,\n            default_params=default_params,\n            default_headers=default_headers,\n            default_queries=default_queries,\n            middlewares=middlewares\n        )\n\n    # Account Endpoints\n\n    async def get_account_v1_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.AccountV1Account:\n        return await self.invoke(\"GET\", \"/riot/account/v1/accounts/by-puuid/{puuid}\")\n\n    async def get_account_v1_by_riot_id(self, *, region: Region = ..., game_name: str = ..., tag_line: str = ...) -&gt; RiotAPISchema.AccountV1Account:\n        return await self.invoke(\"GET\", \"/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}\")\n\n    async def get_account_v1_me(self, *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}) -&gt; RiotAPISchema.AccountV1Account:\n        return await self.invoke(\"GET\", \"/riot/account/v1/accounts/me\")\n\n    async def get_account_v1_active_shard_by_puuid(self, *, region: Region = ..., puuid: str = ..., game: str = ...) -&gt; RiotAPISchema.AccountV1ActiveShard:\n        return await self.invoke(\"GET\", \"/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}\")\n\n    # League of Legends Endpoints\n\n    async def get_lol_champion_v3_rotation(self, *, region: Region = ...) -&gt; RiotAPISchema.LolChampionV3Rotation:\n        return await self.invoke(\"GET\", \"/lol/platform/v3/champion-rotations\")\n\n    async def get_lol_champion_v4_mastery_by_summoner(self, *, region: Region = ..., summoner_id: str = ..., champion_id: int = ...) -&gt; RiotAPISchema.LolChampionV4Mastery:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-summoner/{summoner_id}/by-champion/{champion_id}\")\n\n    async def get_lol_champion_v4_masteries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-summoner/{summoner_id}\")\n\n    async def get_lol_champion_v4_top_masteries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-summoner/{summoner_id}/top\")\n\n    async def get_lol_champion_v4_mastery_score_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; int:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/scores/by-summoner/{summoner_id}\")\n\n    async def get_lol_champion_v4_mastery_by_puuid(self, *, region: Region = ..., puuid: str = ..., champion_id: int = ...) -&gt; RiotAPISchema.LolChampionV4Mastery:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-puuid/{puuid}/by-champion/{champion_id}\")\n\n    async def get_lol_champion_v4_masteries_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-puuid/{puuid}\")\n\n    async def get_lol_champion_v4_top_masteries_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-puuid/{puuid}/top\")\n\n    async def get_lol_champion_v4_mastery_score_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; int:\n        return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/scores/by-puuid/{puuid}\")\n\n    async def get_lol_clash_v1_players_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolClashV1Player]:\n        return await self.invoke(\"GET\", \"/lol/clash/v1/players/by-summoner/{summoner_id}\")\n\n    async def get_lol_clash_v1_players_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolClashV1Player]:\n        return await self.invoke(\"GET\", \"/lol/clash/v1/players/by-puuid/{puuid}\")\n\n    async def get_lol_clash_v1_team(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolClashV1Team:\n        return await self.invoke(\"GET\", \"/lol/clash/v1/teams/{id}\")\n\n    async def get_lol_clash_v1_tournament_by_team(self, *, region: Region = ..., team_id: str = ...) -&gt; RiotAPISchema.LolClashV1Tournament:\n        return await self.invoke(\"GET\", \"/lol/clash/v1/tournaments/by-team/{team_id}\")\n\n    async def get_lol_clash_v1_tournament(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolClashV1Tournament:\n        return await self.invoke(\"GET\", \"/lol/clash/v1/tournaments/{id}\")\n\n    async def get_lol_clash_v1_tournaments(self, *, region: Region = ...) -&gt; list[RiotAPISchema.LolClashV1Tournament]:\n        return await self.invoke(\"GET\", \"/lol/clash/v1/tournaments\")\n\n    async def get_lol_league_v4_entries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]:\n        return await self.invoke(\"GET\", \"/lol/league/v4/entries/by-summoner/{summoner_id}\")\n\n    async def get_lol_league_v4_entries_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]:\n        return await self.invoke(\"GET\", \"/lol/league/v4/entries/by-puuid/{puuid}\")\n\n    async def get_lol_league_v4_challenger_league_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n        return await self.invoke(\"GET\", \"/lol/league/v4/challengerleagues/by-queue/{queue}\")\n\n    async def get_lol_league_v4_grandmaster_league_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n        return await self.invoke(\"GET\", \"/lol/league/v4/grandmasterleagues/by-queue/{queue}\")\n\n    async def get_lol_league_v4_master_league_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n        return await self.invoke(\"GET\", \"/lol/league/v4/masterleagues/by-queue/{queue}\")\n\n    async def get_lol_league_v4_entries_by_division(\n        self, *, region: Region = ..., queue: str = ..., tier: str = ..., division: str = ..., queries: dict = {\"page\": 1}\n    ) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]:\n        return await self.invoke(\"GET\", \"/lol/league/v4/entries/{queue}/{tier}/{division}\")\n\n    async def get_lol_league_v4_league(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n        return await self.invoke(\"GET\", \"/lol/league/v4/leagues/{id}\")\n\n    async def get_lol_match_v5_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolMatchV5Match:\n        return await self.invoke(\"GET\", \"/lol/match/v5/matches/{id}\")\n\n    async def get_lol_match_v5_match_timeline(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolMatchV5MatchTimeline:\n        return await self.invoke(\"GET\", \"/lol/match/v5/matches/{id}/timeline\")\n\n    async def get_lol_match_v5_match_ids_by_puuid(self, *, region: Region = ..., puuid: str = ..., queries: dict = {\"start\": 0, \"count\": 100}) -&gt; list[str]:\n        return await self.invoke(\"GET\", \"/lol/match/v5/matches/by-puuid/{puuid}/ids\")\n\n    async def get_lol_spectator_v4_active_game_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; RiotAPISchema.LolSpectatorV4Game:\n        return await self.invoke(\"GET\", \"/lol/spectator/v4/active-games/by-summoner/{summoner_id}\")\n\n    async def get_lol_spectator_v4_featured_games(self, *, region: Region = ...) -&gt; RiotAPISchema.LolSpectatorV4GameList:\n        return await self.invoke(\"GET\", \"/lol/spectator/v4/featured-games\")\n\n    async def get_lol_spectator_v5_active_game_by_summoner(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.LolSpectatorV5Game:\n        return await self.invoke(\"GET\", \"/lol/spectator/v5/active-games/by-summoner/{puuid}\")\n\n    async def get_lol_spectator_v5_featured_games(self, *, region: Region = ...) -&gt; RiotAPISchema.LolSpectatorV5GameList:\n        return await self.invoke(\"GET\", \"/lol/spectator/v5/featured-games\")\n\n    async def get_lol_status_v4_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n        return await self.invoke(\"GET\", \"/lol/status/v4/platform-data\")\n\n    async def get_lol_summoner_v4_by_id(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n        return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/{id}\")\n\n    async def get_lol_summoner_v4_by_name(self, *, region: Region = ..., name: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n        return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/by-name/{name}\")\n\n    async def get_lol_summoner_v4_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n        return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/by-puuid/{puuid}\")\n\n    async def get_lol_summoner_v4_me(self, *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n        return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/me\")\n\n    async def get_lol_summoner_v4_by_rso_puuid(self, *, region: Region = ..., rso_puuid: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n        return await self.invoke(\"GET\", \"/fulfillment/v1/summoners/by-puuid/{rso_puuid}\")\n\n    # Teamfight Tactics Endpoints\n\n    async def get_tft_league_v1_entries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.TftLeagueV1LeagueFullEntry]:\n        return await self.invoke(\"GET\", \"/tft/league/v1/entries/by-summoner/{summoner_id}\")\n\n    async def get_tft_league_v1_challenger_league(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.TftLeagueV1League:\n        return await self.invoke(\"GET\", \"/tft/league/v1/challenger\")\n\n    async def get_tft_league_v1_grandmaster_league(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.TftLeagueV1League:\n        return await self.invoke(\"GET\", \"/tft/league/v1/grandmaster\")\n\n    async def get_tft_league_v1_master_league(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.TftLeagueV1League:\n        return await self.invoke(\"GET\", \"/tft/league/v1/master\")\n\n    async def get_tft_league_v1_entries_by_division(\n        self, *, region: Region = ..., tier: str = ..., division: str = ..., queries: dict = {\"page\": 1}\n    ) -&gt; list[RiotAPISchema.TftLeagueV1LeagueFullEntry]:\n        return await self.invoke(\"GET\", \"/tft/league/v1/entries/{tier}/{division}\")\n\n    async def get_tft_league_v1_league(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.TftLeagueV1League:\n        return await self.invoke(\"GET\", \"/tft/league/v1/leagues/{id}\")\n\n    async def get_tft_match_v1_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.TftMatchV1Match:\n        return await self.invoke(\"GET\", \"/tft/match/v1/matches/{id}\")\n\n    async def get_tft_match_v1_match_ids_by_puuid(self, *, region: Region = ..., puuid: str = ..., queries: dict = {\"start\": 0, \"count\": 100}) -&gt; list[str]:\n        return await self.invoke(\"GET\", \"/tft/match/v1/matches/by-puuid/{puuid}/ids\")\n\n    async def get_tft_status_v1_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n        return await self.invoke(\"GET\", \"/tft/status/v1/platform-data\")\n\n    async def get_tft_summoner_v1_by_id(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n        return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/{id}\")\n\n    async def get_tft_summoner_v1_by_name(self, *, region: Region = ..., name: str = ...) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n        return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/by-name/{name}\")\n\n    async def get_tft_summoner_v1_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n        return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/by-puuid/{puuid}\")\n\n    async def get_tft_summoner_v1_me(self, *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n        return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/me\")\n\n    # Legends of Runeterra Endpoints\n\n    async def get_lor_ranked_v1_leaderboard(self, *, region: Region = ...) -&gt; RiotAPISchema.LorRankedV1Leaderboard:\n        return await self.invoke(\"GET\", \"/lor/ranked/v1/leaderboards\")\n\n    async def get_lor_match_v1_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LorMatchV1Match:\n        return await self.invoke(\"GET\", \"/lor/match/v1/matches/{id}\")\n\n    async def get_lor_match_v1_match_ids_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[str]:\n        return await self.invoke(\"GET\", \"/lor/match/v1/matches/by-puuid/{puuid}/ids\")\n\n    async def get_lor_status_v1_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n        return await self.invoke(\"GET\", \"/lor/status/v1/platform-data\")\n\n    # Valorant Endpoints\n\n    async def get_val_content_v1_contents(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.ValContentV1Contents:\n        return await self.invoke(\"GET\", \"/val/content/v1/contents\")\n\n    async def get_val_ranked_v1_leaderboard_by_act(self, *, region: Region = ..., act_id: str = ...) -&gt; RiotAPISchema.ValRankedV1Leaderboard:\n        return await self.invoke(\"GET\", \"/val/ranked/v1/leaderboards/by-act/{act_id}\")\n\n    async def get_val_match_v1_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.ValMatchV1Match:\n        return await self.invoke(\"GET\", \"/val/match/v1/matches/{id}\")\n\n    async def get_val_match_v1_matchlist_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.ValMatchV1Matchlist:\n        return await self.invoke(\"GET\", \"/val/match/v1/matchlists/by-puuid/{puuid}\")\n\n    async def get_val_match_v1_recent_matches_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.ValMatchV1RecentMatches:\n        return await self.invoke(\"GET\", \"/val/match/v1/recent-matches/by-queue/{queue}\")\n\n    async def get_val_status_v1_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n        return await self.invoke(\"GET\", \"/val/status/v1/platform-data\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient-attributes","title":"Attributes","text":""},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.Region","title":"Region  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Region = (\n    Literal[\n        \"americas\",\n        \"europe\",\n        \"asia\",\n        \"sea\",\n        \"esports\",\n        \"br1\",\n        \"eun1\",\n        \"euw1\",\n        \"jp1\",\n        \"kr\",\n        \"la1\",\n        \"la2\",\n        \"me1\",\n        \"na1\",\n        \"oc1\",\n        \"tr1\",\n        \"ru\",\n        \"ph2\",\n        \"sg2\",\n        \"th2\",\n        \"tw2\",\n        \"vn2\",\n        \"ap\",\n        \"br\",\n        \"eu\",\n        \"kr\",\n        \"latam\",\n        \"na\",\n    ]\n    | _str\n)\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient-functions","title":"Functions","text":""},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    base_url: str = \"https://{region}.api.riotgames.com\",\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {\"X-Riot-Token\": \"\"},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n        rate_limiter_middleware(RiotAPIRateLimiter()),\n    ]\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str = \"https://{region}.api.riotgames.com\",\n    default_params: dict[str, Any] = {},\n    default_headers: dict[str, str] = {\"X-Riot-Token\": \"\"},\n    default_queries: dict[str, str] = {},\n    middlewares: list[Middleware] = [\n        json_response_middleware(),\n        http_error_middleware(),\n        rate_limiter_middleware(RiotAPIRateLimiter()),\n    ],\n) -&gt; None:\n    super().__init__(\n        base_url=base_url,\n        default_params=default_params,\n        default_headers=default_headers,\n        default_queries=default_queries,\n        middlewares=middlewares\n    )\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_account_v1_by_puuid","title":"get_account_v1_by_puuid  <code>async</code>","text":"<pre><code>get_account_v1_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; RiotAPISchema.AccountV1Account\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_account_v1_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.AccountV1Account:\n    return await self.invoke(\"GET\", \"/riot/account/v1/accounts/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_account_v1_by_riot_id","title":"get_account_v1_by_riot_id  <code>async</code>","text":"<pre><code>get_account_v1_by_riot_id(\n    *, region: Region = ..., game_name: str = ..., tag_line: str = ...\n) -&gt; RiotAPISchema.AccountV1Account\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_account_v1_by_riot_id(self, *, region: Region = ..., game_name: str = ..., tag_line: str = ...) -&gt; RiotAPISchema.AccountV1Account:\n    return await self.invoke(\"GET\", \"/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_account_v1_me","title":"get_account_v1_me  <code>async</code>","text":"<pre><code>get_account_v1_me(\n    *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}\n) -&gt; RiotAPISchema.AccountV1Account\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_account_v1_me(self, *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}) -&gt; RiotAPISchema.AccountV1Account:\n    return await self.invoke(\"GET\", \"/riot/account/v1/accounts/me\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_account_v1_active_shard_by_puuid","title":"get_account_v1_active_shard_by_puuid  <code>async</code>","text":"<pre><code>get_account_v1_active_shard_by_puuid(\n    *, region: Region = ..., puuid: str = ..., game: str = ...\n) -&gt; RiotAPISchema.AccountV1ActiveShard\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_account_v1_active_shard_by_puuid(self, *, region: Region = ..., puuid: str = ..., game: str = ...) -&gt; RiotAPISchema.AccountV1ActiveShard:\n    return await self.invoke(\"GET\", \"/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v3_rotation","title":"get_lol_champion_v3_rotation  <code>async</code>","text":"<pre><code>get_lol_champion_v3_rotation(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.LolChampionV3Rotation\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v3_rotation(self, *, region: Region = ...) -&gt; RiotAPISchema.LolChampionV3Rotation:\n    return await self.invoke(\"GET\", \"/lol/platform/v3/champion-rotations\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_mastery_by_summoner","title":"get_lol_champion_v4_mastery_by_summoner  <code>async</code>","text":"<pre><code>get_lol_champion_v4_mastery_by_summoner(\n    *,\n    region: Region = ...,\n    summoner_id: str = ...,\n    champion_id: int = ...\n) -&gt; RiotAPISchema.LolChampionV4Mastery\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_mastery_by_summoner(self, *, region: Region = ..., summoner_id: str = ..., champion_id: int = ...) -&gt; RiotAPISchema.LolChampionV4Mastery:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-summoner/{summoner_id}/by-champion/{champion_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_masteries_by_summoner","title":"get_lol_champion_v4_masteries_by_summoner  <code>async</code>","text":"<pre><code>get_lol_champion_v4_masteries_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; list[RiotAPISchema.LolChampionV4Mastery]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_masteries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-summoner/{summoner_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_top_masteries_by_summoner","title":"get_lol_champion_v4_top_masteries_by_summoner  <code>async</code>","text":"<pre><code>get_lol_champion_v4_top_masteries_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; list[RiotAPISchema.LolChampionV4Mastery]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_top_masteries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-summoner/{summoner_id}/top\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_mastery_score_by_summoner","title":"get_lol_champion_v4_mastery_score_by_summoner  <code>async</code>","text":"<pre><code>get_lol_champion_v4_mastery_score_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; int\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_mastery_score_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; int:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/scores/by-summoner/{summoner_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_mastery_by_puuid","title":"get_lol_champion_v4_mastery_by_puuid  <code>async</code>","text":"<pre><code>get_lol_champion_v4_mastery_by_puuid(\n    *, region: Region = ..., puuid: str = ..., champion_id: int = ...\n) -&gt; RiotAPISchema.LolChampionV4Mastery\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_mastery_by_puuid(self, *, region: Region = ..., puuid: str = ..., champion_id: int = ...) -&gt; RiotAPISchema.LolChampionV4Mastery:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-puuid/{puuid}/by-champion/{champion_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_masteries_by_puuid","title":"get_lol_champion_v4_masteries_by_puuid  <code>async</code>","text":"<pre><code>get_lol_champion_v4_masteries_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; list[RiotAPISchema.LolChampionV4Mastery]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_masteries_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_top_masteries_by_puuid","title":"get_lol_champion_v4_top_masteries_by_puuid  <code>async</code>","text":"<pre><code>get_lol_champion_v4_top_masteries_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; list[RiotAPISchema.LolChampionV4Mastery]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_top_masteries_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolChampionV4Mastery]:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/champion-masteries/by-puuid/{puuid}/top\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_champion_v4_mastery_score_by_puuid","title":"get_lol_champion_v4_mastery_score_by_puuid  <code>async</code>","text":"<pre><code>get_lol_champion_v4_mastery_score_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; int\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_champion_v4_mastery_score_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; int:\n    return await self.invoke(\"GET\", \"/lol/champion-mastery/v4/scores/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_clash_v1_players_by_summoner","title":"get_lol_clash_v1_players_by_summoner  <code>async</code>","text":"<pre><code>get_lol_clash_v1_players_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; list[RiotAPISchema.LolClashV1Player]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_clash_v1_players_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolClashV1Player]:\n    return await self.invoke(\"GET\", \"/lol/clash/v1/players/by-summoner/{summoner_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_clash_v1_players_by_puuid","title":"get_lol_clash_v1_players_by_puuid  <code>async</code>","text":"<pre><code>get_lol_clash_v1_players_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; list[RiotAPISchema.LolClashV1Player]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_clash_v1_players_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolClashV1Player]:\n    return await self.invoke(\"GET\", \"/lol/clash/v1/players/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_clash_v1_team","title":"get_lol_clash_v1_team  <code>async</code>","text":"<pre><code>get_lol_clash_v1_team(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LolClashV1Team\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_clash_v1_team(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolClashV1Team:\n    return await self.invoke(\"GET\", \"/lol/clash/v1/teams/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_clash_v1_tournament_by_team","title":"get_lol_clash_v1_tournament_by_team  <code>async</code>","text":"<pre><code>get_lol_clash_v1_tournament_by_team(\n    *, region: Region = ..., team_id: str = ...\n) -&gt; RiotAPISchema.LolClashV1Tournament\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_clash_v1_tournament_by_team(self, *, region: Region = ..., team_id: str = ...) -&gt; RiotAPISchema.LolClashV1Tournament:\n    return await self.invoke(\"GET\", \"/lol/clash/v1/tournaments/by-team/{team_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_clash_v1_tournament","title":"get_lol_clash_v1_tournament  <code>async</code>","text":"<pre><code>get_lol_clash_v1_tournament(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LolClashV1Tournament\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_clash_v1_tournament(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolClashV1Tournament:\n    return await self.invoke(\"GET\", \"/lol/clash/v1/tournaments/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_clash_v1_tournaments","title":"get_lol_clash_v1_tournaments  <code>async</code>","text":"<pre><code>get_lol_clash_v1_tournaments(\n    *, region: Region = ...\n) -&gt; list[RiotAPISchema.LolClashV1Tournament]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_clash_v1_tournaments(self, *, region: Region = ...) -&gt; list[RiotAPISchema.LolClashV1Tournament]:\n    return await self.invoke(\"GET\", \"/lol/clash/v1/tournaments\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_entries_by_summoner","title":"get_lol_league_v4_entries_by_summoner  <code>async</code>","text":"<pre><code>get_lol_league_v4_entries_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_entries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]:\n    return await self.invoke(\"GET\", \"/lol/league/v4/entries/by-summoner/{summoner_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_entries_by_puuid","title":"get_lol_league_v4_entries_by_puuid  <code>async</code>","text":"<pre><code>get_lol_league_v4_entries_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_entries_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]:\n    return await self.invoke(\"GET\", \"/lol/league/v4/entries/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_challenger_league_by_queue","title":"get_lol_league_v4_challenger_league_by_queue  <code>async</code>","text":"<pre><code>get_lol_league_v4_challenger_league_by_queue(\n    *, region: Region = ..., queue: str = ...\n) -&gt; RiotAPISchema.LolLeagueV4League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_challenger_league_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n    return await self.invoke(\"GET\", \"/lol/league/v4/challengerleagues/by-queue/{queue}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_grandmaster_league_by_queue","title":"get_lol_league_v4_grandmaster_league_by_queue  <code>async</code>","text":"<pre><code>get_lol_league_v4_grandmaster_league_by_queue(\n    *, region: Region = ..., queue: str = ...\n) -&gt; RiotAPISchema.LolLeagueV4League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_grandmaster_league_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n    return await self.invoke(\"GET\", \"/lol/league/v4/grandmasterleagues/by-queue/{queue}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_master_league_by_queue","title":"get_lol_league_v4_master_league_by_queue  <code>async</code>","text":"<pre><code>get_lol_league_v4_master_league_by_queue(\n    *, region: Region = ..., queue: str = ...\n) -&gt; RiotAPISchema.LolLeagueV4League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_master_league_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n    return await self.invoke(\"GET\", \"/lol/league/v4/masterleagues/by-queue/{queue}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_entries_by_division","title":"get_lol_league_v4_entries_by_division  <code>async</code>","text":"<pre><code>get_lol_league_v4_entries_by_division(\n    *,\n    region: Region = ...,\n    queue: str = ...,\n    tier: str = ...,\n    division: str = ...,\n    queries: dict = {\"page\": 1}\n) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_entries_by_division(\n    self, *, region: Region = ..., queue: str = ..., tier: str = ..., division: str = ..., queries: dict = {\"page\": 1}\n) -&gt; list[RiotAPISchema.LolLeagueV4LeagueFullEntry]:\n    return await self.invoke(\"GET\", \"/lol/league/v4/entries/{queue}/{tier}/{division}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_league_v4_league","title":"get_lol_league_v4_league  <code>async</code>","text":"<pre><code>get_lol_league_v4_league(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LolLeagueV4League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_league_v4_league(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolLeagueV4League:\n    return await self.invoke(\"GET\", \"/lol/league/v4/leagues/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_match_v5_match","title":"get_lol_match_v5_match  <code>async</code>","text":"<pre><code>get_lol_match_v5_match(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LolMatchV5Match\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_match_v5_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolMatchV5Match:\n    return await self.invoke(\"GET\", \"/lol/match/v5/matches/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_match_v5_match_timeline","title":"get_lol_match_v5_match_timeline  <code>async</code>","text":"<pre><code>get_lol_match_v5_match_timeline(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LolMatchV5MatchTimeline\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_match_v5_match_timeline(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolMatchV5MatchTimeline:\n    return await self.invoke(\"GET\", \"/lol/match/v5/matches/{id}/timeline\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_match_v5_match_ids_by_puuid","title":"get_lol_match_v5_match_ids_by_puuid  <code>async</code>","text":"<pre><code>get_lol_match_v5_match_ids_by_puuid(\n    *,\n    region: Region = ...,\n    puuid: str = ...,\n    queries: dict = {\"start\": 0, \"count\": 100}\n) -&gt; list[str]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_match_v5_match_ids_by_puuid(self, *, region: Region = ..., puuid: str = ..., queries: dict = {\"start\": 0, \"count\": 100}) -&gt; list[str]:\n    return await self.invoke(\"GET\", \"/lol/match/v5/matches/by-puuid/{puuid}/ids\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_spectator_v4_active_game_by_summoner","title":"get_lol_spectator_v4_active_game_by_summoner  <code>async</code>","text":"<pre><code>get_lol_spectator_v4_active_game_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; RiotAPISchema.LolSpectatorV4Game\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_spectator_v4_active_game_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; RiotAPISchema.LolSpectatorV4Game:\n    return await self.invoke(\"GET\", \"/lol/spectator/v4/active-games/by-summoner/{summoner_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_spectator_v4_featured_games","title":"get_lol_spectator_v4_featured_games  <code>async</code>","text":"<pre><code>get_lol_spectator_v4_featured_games(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.LolSpectatorV4GameList\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_spectator_v4_featured_games(self, *, region: Region = ...) -&gt; RiotAPISchema.LolSpectatorV4GameList:\n    return await self.invoke(\"GET\", \"/lol/spectator/v4/featured-games\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_spectator_v5_active_game_by_summoner","title":"get_lol_spectator_v5_active_game_by_summoner  <code>async</code>","text":"<pre><code>get_lol_spectator_v5_active_game_by_summoner(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; RiotAPISchema.LolSpectatorV5Game\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_spectator_v5_active_game_by_summoner(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.LolSpectatorV5Game:\n    return await self.invoke(\"GET\", \"/lol/spectator/v5/active-games/by-summoner/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_spectator_v5_featured_games","title":"get_lol_spectator_v5_featured_games  <code>async</code>","text":"<pre><code>get_lol_spectator_v5_featured_games(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.LolSpectatorV5GameList\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_spectator_v5_featured_games(self, *, region: Region = ...) -&gt; RiotAPISchema.LolSpectatorV5GameList:\n    return await self.invoke(\"GET\", \"/lol/spectator/v5/featured-games\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_status_v4_platform_data","title":"get_lol_status_v4_platform_data  <code>async</code>","text":"<pre><code>get_lol_status_v4_platform_data(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.StatusV1PlatformData\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_status_v4_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n    return await self.invoke(\"GET\", \"/lol/status/v4/platform-data\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_summoner_v4_by_id","title":"get_lol_summoner_v4_by_id  <code>async</code>","text":"<pre><code>get_lol_summoner_v4_by_id(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LolSummonerV4Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_summoner_v4_by_id(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n    return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_summoner_v4_by_name","title":"get_lol_summoner_v4_by_name  <code>async</code>","text":"<pre><code>get_lol_summoner_v4_by_name(\n    *, region: Region = ..., name: str = ...\n) -&gt; RiotAPISchema.LolSummonerV4Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_summoner_v4_by_name(self, *, region: Region = ..., name: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n    return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/by-name/{name}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_summoner_v4_by_puuid","title":"get_lol_summoner_v4_by_puuid  <code>async</code>","text":"<pre><code>get_lol_summoner_v4_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; RiotAPISchema.LolSummonerV4Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_summoner_v4_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n    return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_summoner_v4_me","title":"get_lol_summoner_v4_me  <code>async</code>","text":"<pre><code>get_lol_summoner_v4_me(\n    *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}\n) -&gt; RiotAPISchema.LolSummonerV4Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_summoner_v4_me(self, *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n    return await self.invoke(\"GET\", \"/lol/summoner/v4/summoners/me\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lol_summoner_v4_by_rso_puuid","title":"get_lol_summoner_v4_by_rso_puuid  <code>async</code>","text":"<pre><code>get_lol_summoner_v4_by_rso_puuid(\n    *, region: Region = ..., rso_puuid: str = ...\n) -&gt; RiotAPISchema.LolSummonerV4Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lol_summoner_v4_by_rso_puuid(self, *, region: Region = ..., rso_puuid: str = ...) -&gt; RiotAPISchema.LolSummonerV4Summoner:\n    return await self.invoke(\"GET\", \"/fulfillment/v1/summoners/by-puuid/{rso_puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_league_v1_entries_by_summoner","title":"get_tft_league_v1_entries_by_summoner  <code>async</code>","text":"<pre><code>get_tft_league_v1_entries_by_summoner(\n    *, region: Region = ..., summoner_id: str = ...\n) -&gt; list[RiotAPISchema.TftLeagueV1LeagueFullEntry]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_league_v1_entries_by_summoner(self, *, region: Region = ..., summoner_id: str = ...) -&gt; list[RiotAPISchema.TftLeagueV1LeagueFullEntry]:\n    return await self.invoke(\"GET\", \"/tft/league/v1/entries/by-summoner/{summoner_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_league_v1_challenger_league","title":"get_tft_league_v1_challenger_league  <code>async</code>","text":"<pre><code>get_tft_league_v1_challenger_league(\n    *, region: Region = ..., queries: dict = {}\n) -&gt; RiotAPISchema.TftLeagueV1League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_league_v1_challenger_league(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.TftLeagueV1League:\n    return await self.invoke(\"GET\", \"/tft/league/v1/challenger\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_league_v1_grandmaster_league","title":"get_tft_league_v1_grandmaster_league  <code>async</code>","text":"<pre><code>get_tft_league_v1_grandmaster_league(\n    *, region: Region = ..., queries: dict = {}\n) -&gt; RiotAPISchema.TftLeagueV1League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_league_v1_grandmaster_league(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.TftLeagueV1League:\n    return await self.invoke(\"GET\", \"/tft/league/v1/grandmaster\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_league_v1_master_league","title":"get_tft_league_v1_master_league  <code>async</code>","text":"<pre><code>get_tft_league_v1_master_league(\n    *, region: Region = ..., queries: dict = {}\n) -&gt; RiotAPISchema.TftLeagueV1League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_league_v1_master_league(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.TftLeagueV1League:\n    return await self.invoke(\"GET\", \"/tft/league/v1/master\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_league_v1_entries_by_division","title":"get_tft_league_v1_entries_by_division  <code>async</code>","text":"<pre><code>get_tft_league_v1_entries_by_division(\n    *,\n    region: Region = ...,\n    tier: str = ...,\n    division: str = ...,\n    queries: dict = {\"page\": 1}\n) -&gt; list[RiotAPISchema.TftLeagueV1LeagueFullEntry]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_league_v1_entries_by_division(\n    self, *, region: Region = ..., tier: str = ..., division: str = ..., queries: dict = {\"page\": 1}\n) -&gt; list[RiotAPISchema.TftLeagueV1LeagueFullEntry]:\n    return await self.invoke(\"GET\", \"/tft/league/v1/entries/{tier}/{division}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_league_v1_league","title":"get_tft_league_v1_league  <code>async</code>","text":"<pre><code>get_tft_league_v1_league(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.TftLeagueV1League\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_league_v1_league(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.TftLeagueV1League:\n    return await self.invoke(\"GET\", \"/tft/league/v1/leagues/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_match_v1_match","title":"get_tft_match_v1_match  <code>async</code>","text":"<pre><code>get_tft_match_v1_match(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.TftMatchV1Match\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_match_v1_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.TftMatchV1Match:\n    return await self.invoke(\"GET\", \"/tft/match/v1/matches/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_match_v1_match_ids_by_puuid","title":"get_tft_match_v1_match_ids_by_puuid  <code>async</code>","text":"<pre><code>get_tft_match_v1_match_ids_by_puuid(\n    *,\n    region: Region = ...,\n    puuid: str = ...,\n    queries: dict = {\"start\": 0, \"count\": 100}\n) -&gt; list[str]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_match_v1_match_ids_by_puuid(self, *, region: Region = ..., puuid: str = ..., queries: dict = {\"start\": 0, \"count\": 100}) -&gt; list[str]:\n    return await self.invoke(\"GET\", \"/tft/match/v1/matches/by-puuid/{puuid}/ids\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_status_v1_platform_data","title":"get_tft_status_v1_platform_data  <code>async</code>","text":"<pre><code>get_tft_status_v1_platform_data(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.StatusV1PlatformData\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_status_v1_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n    return await self.invoke(\"GET\", \"/tft/status/v1/platform-data\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_summoner_v1_by_id","title":"get_tft_summoner_v1_by_id  <code>async</code>","text":"<pre><code>get_tft_summoner_v1_by_id(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.TftSummonerV1Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_summoner_v1_by_id(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n    return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_summoner_v1_by_name","title":"get_tft_summoner_v1_by_name  <code>async</code>","text":"<pre><code>get_tft_summoner_v1_by_name(\n    *, region: Region = ..., name: str = ...\n) -&gt; RiotAPISchema.TftSummonerV1Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_summoner_v1_by_name(self, *, region: Region = ..., name: str = ...) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n    return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/by-name/{name}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_summoner_v1_by_puuid","title":"get_tft_summoner_v1_by_puuid  <code>async</code>","text":"<pre><code>get_tft_summoner_v1_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; RiotAPISchema.TftSummonerV1Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_summoner_v1_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n    return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_tft_summoner_v1_me","title":"get_tft_summoner_v1_me  <code>async</code>","text":"<pre><code>get_tft_summoner_v1_me(\n    *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}\n) -&gt; RiotAPISchema.TftSummonerV1Summoner\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_tft_summoner_v1_me(self, *, region: Region = ..., headers: dict = {\"Authorization\": \"\"}) -&gt; RiotAPISchema.TftSummonerV1Summoner:\n    return await self.invoke(\"GET\", \"/tft/summoner/v1/summoners/me\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lor_ranked_v1_leaderboard","title":"get_lor_ranked_v1_leaderboard  <code>async</code>","text":"<pre><code>get_lor_ranked_v1_leaderboard(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.LorRankedV1Leaderboard\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lor_ranked_v1_leaderboard(self, *, region: Region = ...) -&gt; RiotAPISchema.LorRankedV1Leaderboard:\n    return await self.invoke(\"GET\", \"/lor/ranked/v1/leaderboards\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lor_match_v1_match","title":"get_lor_match_v1_match  <code>async</code>","text":"<pre><code>get_lor_match_v1_match(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.LorMatchV1Match\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lor_match_v1_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.LorMatchV1Match:\n    return await self.invoke(\"GET\", \"/lor/match/v1/matches/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lor_match_v1_match_ids_by_puuid","title":"get_lor_match_v1_match_ids_by_puuid  <code>async</code>","text":"<pre><code>get_lor_match_v1_match_ids_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; list[str]\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lor_match_v1_match_ids_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; list[str]:\n    return await self.invoke(\"GET\", \"/lor/match/v1/matches/by-puuid/{puuid}/ids\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_lor_status_v1_platform_data","title":"get_lor_status_v1_platform_data  <code>async</code>","text":"<pre><code>get_lor_status_v1_platform_data(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.StatusV1PlatformData\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_lor_status_v1_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n    return await self.invoke(\"GET\", \"/lor/status/v1/platform-data\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_val_content_v1_contents","title":"get_val_content_v1_contents  <code>async</code>","text":"<pre><code>get_val_content_v1_contents(\n    *, region: Region = ..., queries: dict = {}\n) -&gt; RiotAPISchema.ValContentV1Contents\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_content_v1_contents(self, *, region: Region = ..., queries: dict = {}) -&gt; RiotAPISchema.ValContentV1Contents:\n    return await self.invoke(\"GET\", \"/val/content/v1/contents\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_val_ranked_v1_leaderboard_by_act","title":"get_val_ranked_v1_leaderboard_by_act  <code>async</code>","text":"<pre><code>get_val_ranked_v1_leaderboard_by_act(\n    *, region: Region = ..., act_id: str = ...\n) -&gt; RiotAPISchema.ValRankedV1Leaderboard\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_ranked_v1_leaderboard_by_act(self, *, region: Region = ..., act_id: str = ...) -&gt; RiotAPISchema.ValRankedV1Leaderboard:\n    return await self.invoke(\"GET\", \"/val/ranked/v1/leaderboards/by-act/{act_id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_val_match_v1_match","title":"get_val_match_v1_match  <code>async</code>","text":"<pre><code>get_val_match_v1_match(\n    *, region: Region = ..., id: str = ...\n) -&gt; RiotAPISchema.ValMatchV1Match\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_match_v1_match(self, *, region: Region = ..., id: str = ...) -&gt; RiotAPISchema.ValMatchV1Match:\n    return await self.invoke(\"GET\", \"/val/match/v1/matches/{id}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_val_match_v1_matchlist_by_puuid","title":"get_val_match_v1_matchlist_by_puuid  <code>async</code>","text":"<pre><code>get_val_match_v1_matchlist_by_puuid(\n    *, region: Region = ..., puuid: str = ...\n) -&gt; RiotAPISchema.ValMatchV1Matchlist\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_match_v1_matchlist_by_puuid(self, *, region: Region = ..., puuid: str = ...) -&gt; RiotAPISchema.ValMatchV1Matchlist:\n    return await self.invoke(\"GET\", \"/val/match/v1/matchlists/by-puuid/{puuid}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_val_match_v1_recent_matches_by_queue","title":"get_val_match_v1_recent_matches_by_queue  <code>async</code>","text":"<pre><code>get_val_match_v1_recent_matches_by_queue(\n    *, region: Region = ..., queue: str = ...\n) -&gt; RiotAPISchema.ValMatchV1RecentMatches\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_match_v1_recent_matches_by_queue(self, *, region: Region = ..., queue: str = ...) -&gt; RiotAPISchema.ValMatchV1RecentMatches:\n    return await self.invoke(\"GET\", \"/val/match/v1/recent-matches/by-queue/{queue}\")\n</code></pre>"},{"location":"reference/clients/riot-api-client/#pulsefire.clients.RiotAPIClient.get_val_status_v1_platform_data","title":"get_val_status_v1_platform_data  <code>async</code>","text":"<pre><code>get_val_status_v1_platform_data(\n    *, region: Region = ...\n) -&gt; RiotAPISchema.StatusV1PlatformData\n</code></pre> Source code in <code>pulsefire/clients.py</code> <pre><code>async def get_val_status_v1_platform_data(self, *, region: Region = ...) -&gt; RiotAPISchema.StatusV1PlatformData:\n    return await self.invoke(\"GET\", \"/val/status/v1/platform-data\")\n</code></pre>"},{"location":"reference/invocation/invocation/","title":"Invocation","text":"<pre><code>from pulsefire.invocation import Invocation \n</code></pre> <p>Container used for building and peforming HTTP request.</p> Source code in <code>pulsefire/invocation.py</code> <pre><code>class Invocation:\n    \"\"\"Container used for building and peforming HTTP request.\"\"\"\n\n    uid: str\n    \"\"\"Invocation UID (unique per instance).\"\"\"\n    method: HttpMethod\n    \"\"\"HTTP method.\"\"\"\n    urlformat: str\n    \"\"\"URL format (bracket based).\"\"\"\n    params: dict[str, Any]\n    \"\"\"Invocation parameters (includes queries and headers).\"\"\"\n    session: aiohttp.ClientSession | None\n    \"\"\"Client session used for request. Cannot perform HTTP request if is None.\"\"\"\n    invoker: MethodType | None\n    \"\"\"Bound method if invoked by client method, None otherwise.\"\"\"\n\n    def __init__(\n        self,\n        method: HttpMethod,\n        urlformat: str,\n        params: dict[str, Any],\n        session: aiohttp.ClientSession | None = None,\n        *,\n        invoker: MethodType | None = None,\n        uid: str | None = None,\n    ) -&gt; None:\n        self.uid = uid or b64encode(os.urandom(12)).decode(\"utf-8\")\n        self.method = method\n        self.urlformat = urlformat\n        self.params = params\n        self.session = session\n        self.invoker = invoker\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;{self.__class__.__name__} uid={self.uid} method={self.method} url={self.url}&gt;\"\n\n    async def __call__(self) -&gt; aiohttp.ClientResponse:\n        \"\"\"Build and perform HTTP request.\"\"\"\n        if self.session is None:\n            raise RuntimeError(\"session is None, cannot perform HTTP request\")\n        return await self.session.request(\n            self.method,\n            self.url,\n            headers=self.params.get(\"headers\", {}),\n            json=self.params.get(\"json\", None),\n            data=self.params.get(\"data\", None),\n        )\n\n    @property\n    def url(self) -&gt; str:\n        \"\"\"Build URL (includes query parameters).\n\n        Raises:\n            KeyError: When a path parameter is missing.\n        \"\"\"\n        url = self.urlformat.format(**self.params)\n        if queries := self.params.get(\"queries\", {}):\n            url += '?' + urllib.parse.urlencode(queries)\n        return url\n</code></pre>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation-attributes","title":"Attributes","text":""},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.uid","title":"uid  <code>instance-attribute</code>","text":"<pre><code>uid: str = uid or decode('utf-8')\n</code></pre> <p>Invocation UID (unique per instance).</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method: HttpMethod = method\n</code></pre> <p>HTTP method.</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.urlformat","title":"urlformat  <code>instance-attribute</code>","text":"<pre><code>urlformat: str = urlformat\n</code></pre> <p>URL format (bracket based).</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.params","title":"params  <code>instance-attribute</code>","text":"<pre><code>params: dict[str, Any] = params\n</code></pre> <p>Invocation parameters (includes queries and headers).</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.session","title":"session  <code>instance-attribute</code>","text":"<pre><code>session: ClientSession | None = session\n</code></pre> <p>Client session used for request. Cannot perform HTTP request if is None.</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.invoker","title":"invoker  <code>instance-attribute</code>","text":"<pre><code>invoker: MethodType | None = invoker\n</code></pre> <p>Bound method if invoked by client method, None otherwise.</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre> <p>Build URL (includes query parameters).</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>When a path parameter is missing.</p>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation-functions","title":"Functions","text":""},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.__init__","title":"__init__","text":"<pre><code>__init__(\n    method: HttpMethod,\n    urlformat: str,\n    params: dict[str, Any],\n    session: ClientSession | None = None,\n    *,\n    invoker: MethodType | None = None,\n    uid: str | None = None\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/invocation.py</code> <pre><code>def __init__(\n    self,\n    method: HttpMethod,\n    urlformat: str,\n    params: dict[str, Any],\n    session: aiohttp.ClientSession | None = None,\n    *,\n    invoker: MethodType | None = None,\n    uid: str | None = None,\n) -&gt; None:\n    self.uid = uid or b64encode(os.urandom(12)).decode(\"utf-8\")\n    self.method = method\n    self.urlformat = urlformat\n    self.params = params\n    self.session = session\n    self.invoker = invoker\n</code></pre>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>pulsefire/invocation.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"&lt;{self.__class__.__name__} uid={self.uid} method={self.method} url={self.url}&gt;\"\n</code></pre>"},{"location":"reference/invocation/invocation/#pulsefire.invocation.Invocation.__call__","title":"__call__  <code>async</code>","text":"<pre><code>__call__() -&gt; aiohttp.ClientResponse\n</code></pre> <p>Build and perform HTTP request.</p> Source code in <code>pulsefire/invocation.py</code> <pre><code>async def __call__(self) -&gt; aiohttp.ClientResponse:\n    \"\"\"Build and perform HTTP request.\"\"\"\n    if self.session is None:\n        raise RuntimeError(\"session is None, cannot perform HTTP request\")\n    return await self.session.request(\n        self.method,\n        self.url,\n        headers=self.params.get(\"headers\", {}),\n        json=self.params.get(\"json\", None),\n        data=self.params.get(\"data\", None),\n    )\n</code></pre>"},{"location":"reference/middlewares/cache_middleware/","title":"cache_middleware","text":"<pre><code>from pulsefire.middlewares import cache_middleware\n</code></pre> <p>Cache middleware.</p> <p>Recommended to be placed before response deserialization middlewares.</p> <p>Example: <pre><code>cache = MemoryCache()\ncache_middleware(cache, [\n    (lambda inv: inv.invoker.__name__ == \"get_lol_v1_champion\", 3600),\n    (lambda inv: inv.invoker.__name__ ..., float(\"inf\")), # cache indefinitely.\n    (lambda inv: inv.url ..., 3600),\n    (lambda inv: inv.params ..., 3600),\n])\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>BaseCache</code> <p>Cache instance.</p> required <code>rules</code> <code>list[tuple[Callable[[Invocation], bool], float]]</code> <p>Cache rules, defined by a list of (condition, ttl).</p> required Source code in <code>pulsefire/middlewares.py</code> <pre><code>def cache_middleware(cache: BaseCache, rules: list[tuple[Callable[[Invocation], bool], float]]):\n    \"\"\"Cache middleware.\n\n    Recommended to be placed before response deserialization middlewares.\n\n    Example:\n    ```python\n    cache = MemoryCache()\n    cache_middleware(cache, [\n        (lambda inv: inv.invoker.__name__ == \"get_lol_v1_champion\", 3600),\n        (lambda inv: inv.invoker.__name__ ..., float(\"inf\")), # cache indefinitely.\n        (lambda inv: inv.url ..., 3600),\n        (lambda inv: inv.params ..., 3600),\n    ])\n    ```\n\n    Parameters:\n        cache: Cache instance.\n        rules: Cache rules, defined by a list of (condition, ttl).\n    \"\"\"\n\n    rules.append((lambda _: True, 0)) # Add default\n\n    def constructor(next: MiddlewareCallable):\n\n        async def middleware(invocation: Invocation):\n            key = f\"{invocation.method} {invocation.url}\"\n            for cond, ttl in rules:\n                if not cond(invocation):\n                    continue\n                try:\n                    value = await cache.get(key)\n                except KeyError:\n                    value = await next(invocation)\n                    await cache.set(key, value, ttl)\n                return value\n            raise RuntimeError(\"rules out of range\")\n\n        return middleware\n\n    return constructor\n</code></pre>"},{"location":"reference/middlewares/http_error_middleware/","title":"http_error_middleware","text":"<pre><code>from pulsefire.middlewares import http_error_middleware\n</code></pre> <p>HTTP error middleware.</p> <p>Should be positioned as late as possible and before rate limiter middlewares (if any) in the client middlewares list.</p> <p>Responses are handled differently based on their HTTP status:</p> Status Measures 2XX Return response. 3XX Raise <code>aiohttp.ClientResponseError</code>. 4XX Raise <code>aiohttp.ClientResponseError</code>. 429 Exponential retries (2^n). 5XX Exponential retries (2^n). Conn Exponential retries (2^n). <p>Example: <pre><code>http_error_middleware(3)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>max_retries</code> <code>int</code> <p>Number of retries to perform before giving up.</p> <code>3</code> <p>Raises:</p> Type Description <code>ClientResponseError</code> <p>When retries have exhausted.</p> Source code in <code>pulsefire/middlewares.py</code> <pre><code>def http_error_middleware(max_retries: int = 3):\n    \"\"\"HTTP error middleware.\n\n    Should be positioned as late as possible and before rate limiter middlewares\n    (if any) in the client middlewares list.\n\n    Responses are handled differently based on their HTTP status:\n\n    | Status | Measures                              |\n    | ------ | ------------------------------------- |\n    | 2XX    | Return response.                      |\n    | 3XX    | Raise `aiohttp.ClientResponseError`.  |\n    | 4XX    | Raise `aiohttp.ClientResponseError`.  |\n    | 429    | Exponential retries (2^n).            |\n    | 5XX    | Exponential retries (2^n).            |\n    | Conn   | Exponential retries (2^n).            |\n\n    Example:\n    ```python\n    http_error_middleware(3)\n    ```\n\n    Parameters:\n        max_retries: Number of retries to perform before giving up.\n\n    Raises:\n        aiohttp.ClientResponseError: When retries have exhausted.\n    \"\"\"\n\n    def constructor(next: MiddlewareCallable):\n\n        async def middleware(invocation: Invocation):\n            last_response: aiohttp.ClientResponse | None = None\n            last_connexc: aiohttp.ClientConnectionError | asyncio.TimeoutError = asyncio.TimeoutError()\n            for attempt in range(max_retries + 1):\n                if attempt:\n                    await asyncio.sleep(2 ** attempt)\n                try:\n                    response: aiohttp.ClientResponse = await next(invocation)\n                except (asyncio.TimeoutError, aiohttp.ClientConnectionError) as connexc:\n                    last_connexc = connexc\n                    continue\n                last_response = response\n                if 300 &gt; response.status &gt;= 200:\n                    return response\n                if not (response.status == 429 or response.status &gt;= 500):\n                    response.raise_for_status()\n            else:\n                if last_response:\n                    last_response.raise_for_status()\n                raise last_connexc\n\n        return middleware\n\n    return constructor\n</code></pre>"},{"location":"reference/middlewares/json_response_middleware/","title":"json_response_middleware","text":"<pre><code>from pulsefire.middlewares import json_response_middleware\n</code></pre> <p>JSON response middleware.</p> <p>Attempts to deserialize JSON responses regardless of content type, if an exception is raised during deserialization, bytes are returned instead.</p> <p>Example: <pre><code># Use orjson loads for 3~10x faster deserialization\nimport orjson\njson_response_middleware(orjson.loads)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>loads</code> <code>Callable[[str | bytes | bytearray], Any]</code> <p>JSON decoder to be used on deserialization.</p> <code>loads</code> Source code in <code>pulsefire/middlewares.py</code> <pre><code>def json_response_middleware(loads: Callable[[str | bytes | bytearray], Any] = json.loads):\n    \"\"\"JSON response middleware.\n\n    Attempts to deserialize JSON responses regardless of content type,\n    if an exception is raised during deserialization, bytes are returned instead.\n\n    Example:\n    ```python\n    # Use orjson loads for 3~10x faster deserialization\n    import orjson\n    json_response_middleware(orjson.loads)\n    ```\n\n    Parameters:\n        loads: JSON decoder to be used on deserialization.\n    \"\"\"\n\n    def constructor(next: MiddlewareCallable):\n\n        async def middleware(invocation: Invocation):\n            response: aiohttp.ClientResponse = await next(invocation)\n            try:\n                return await response.json(encoding=\"utf-8\", content_type=None, loads=loads)\n            except Exception:\n                return await response.read()\n\n        return middleware\n\n    return constructor\n</code></pre>"},{"location":"reference/middlewares/rate_limiter_middleware/","title":"rate_limiter_middleware","text":"<pre><code>from pulsefire.middlewares import rate_limiter_middleware\n</code></pre> <p>Rate limiter middleware.</p> <p>Should be positioned as late as possible in the client middlewares list.</p> <p>Example: <pre><code>rate_limiter = RiotAPIRateLimiter()\nrate_limiter_middleware(rate_limiter)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>rate_limiter</code> <code>BaseRateLimiter</code> <p>Rate limiter instance.</p> required Source code in <code>pulsefire/middlewares.py</code> <pre><code>def rate_limiter_middleware(rate_limiter: BaseRateLimiter):\n    \"\"\"Rate limiter middleware.\n\n    Should be positioned as late as possible in the client middlewares list.\n\n    Example:\n    ```python\n    rate_limiter = RiotAPIRateLimiter()\n    rate_limiter_middleware(rate_limiter)\n    ```\n\n    Parameters:\n        rate_limiter: Rate limiter instance.\n    \"\"\"\n\n    track_429s = collections.deque(maxlen=12)\n\n    def constructor(next: MiddlewareCallable):\n\n        async def middleware(invocation: Invocation):\n            while True:\n                wait_for = await rate_limiter.acquire(invocation)\n                if wait_for &lt;= 0:\n                    break\n                await asyncio.sleep(wait_for)\n\n            response: aiohttp.ClientResponse = await next(invocation)\n\n            if response.status == 429:\n                response_time = time.time()\n                track_429s.append(response_time)\n                if sum(response_time - prev_time &lt; 10 for prev_time in track_429s) &gt;= 10:\n                    LOGGER.warning(f\"rate_limiter_middleware: detected elevated amount of http 429 responses\")\n                    track_429s.clear()\n\n            if wait_for == -1:\n                await rate_limiter.synchronize(invocation, response.headers)\n\n            return response\n\n        return middleware\n\n    return constructor\n</code></pre>"},{"location":"reference/ratelimiters/base-rate-limiter/","title":"BaseRateLimiter","text":"<pre><code>from pulsefire.ratelimiters import BaseRateLimiter\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base rate limiter class.</p> <p>Inherit this class to implement a rate limiter.</p> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>class BaseRateLimiter(abc.ABC):\n    \"\"\"Base rate limiter class.\n\n    Inherit this class to implement a rate limiter.\n    \"\"\"\n\n    @abc.abstractmethod\n    async def acquire(self, invocation: Invocation) -&gt; float:\n        \"\"\"Acquire a wait_for value in seconds.\n\n        | wait_for | action required  |\n        | :------: | ---------------- |\n        | -1       | Proceed then synchronize. |\n        | 0        | Proceed then skip synchronize. |\n        | &gt;0       | Wait for value in seconds then acquire again. |\n        \"\"\"\n\n    @abc.abstractmethod\n    async def synchronize(self, invocation: Invocation, headers: dict[str, str]) -&gt; None:\n        \"\"\"Synchronize rate limiting headers to index.\"\"\"\n</code></pre>"},{"location":"reference/ratelimiters/base-rate-limiter/#pulsefire.ratelimiters.BaseRateLimiter-functions","title":"Functions","text":""},{"location":"reference/ratelimiters/base-rate-limiter/#pulsefire.ratelimiters.BaseRateLimiter.acquire","title":"acquire  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>acquire(invocation: Invocation) -&gt; float\n</code></pre> <p>Acquire a wait_for value in seconds.</p> wait_for action required -1 Proceed then synchronize. 0 Proceed then skip synchronize. &gt;0 Wait for value in seconds then acquire again. Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>@abc.abstractmethod\nasync def acquire(self, invocation: Invocation) -&gt; float:\n    \"\"\"Acquire a wait_for value in seconds.\n\n    | wait_for | action required  |\n    | :------: | ---------------- |\n    | -1       | Proceed then synchronize. |\n    | 0        | Proceed then skip synchronize. |\n    | &gt;0       | Wait for value in seconds then acquire again. |\n    \"\"\"\n</code></pre>"},{"location":"reference/ratelimiters/base-rate-limiter/#pulsefire.ratelimiters.BaseRateLimiter.synchronize","title":"synchronize  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>synchronize(invocation: Invocation, headers: dict[str, str]) -&gt; None\n</code></pre> <p>Synchronize rate limiting headers to index.</p> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>@abc.abstractmethod\nasync def synchronize(self, invocation: Invocation, headers: dict[str, str]) -&gt; None:\n    \"\"\"Synchronize rate limiting headers to index.\"\"\"\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/","title":"RiotAPIRateLimiter","text":"<pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n</code></pre> <p>               Bases: <code>BaseRateLimiter</code></p> <p>Riot API rate limiter.</p> <p>This rate limiter can be served stand-alone for centralized rate limiting, also accepting proxy configuration towards said centralized rate limiter.</p> <p>Example: <pre><code>RiotAPIRateLimiter() # Local rate limiter\n\nRiotAPIRateLimiter().serve() # Served at 127.0.0.1:12227\nRiotAPIRateLimiter().serve(port=&lt;PORT&gt;) # Served at 127.0.0.1:&lt;PORT&gt;\nRiotAPIRateLimiter().serve(\"0.0.0.0\", 12227) # Served at 0.0.0.0:12227 (public)\nRiotAPIRateLimiter().serve(\"0.0.0.0\", 12227, secret=&lt;SECRET&gt;) # Add authentication\n\nRiotAPIRateLimiter(proxy=\"http://127.0.0.1:12227\") # Proxy to 127.0.0.1:12227\nRiotAPIRateLimiter(proxy=\"http://127.0.0.1:12227\", proxy_secret=&lt;SECRET&gt;) # Proxy authentication\nRiotAPIRateLimiter(proxy=\"&lt;SCHEME&gt;://&lt;HOST&gt;:&lt;PORT&gt;\")\nRiotAPIRateLimiter(proxy=\"&lt;SCHEME&gt;://&lt;HOST&gt;:&lt;PORT&gt;\", proxy_secret=&lt;SECRET&gt;)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>proxy</code> <code>str | None</code> <p>URL of the proxy rate limiter.</p> <code>None</code> <code>proxy_secret</code> <code>str | None</code> <p>Secret of the proxy rate limiter if required.</p> <code>None</code> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>class RiotAPIRateLimiter(BaseRateLimiter):\n    \"\"\"Riot API rate limiter.\n\n    This rate limiter can be served stand-alone for centralized rate limiting,\n    also accepting proxy configuration towards said centralized rate limiter.\n\n    Example:\n    ```python\n    RiotAPIRateLimiter() # Local rate limiter\n\n    RiotAPIRateLimiter().serve() # Served at 127.0.0.1:12227\n    RiotAPIRateLimiter().serve(port=&lt;PORT&gt;) # Served at 127.0.0.1:&lt;PORT&gt;\n    RiotAPIRateLimiter().serve(\"0.0.0.0\", 12227) # Served at 0.0.0.0:12227 (public)\n    RiotAPIRateLimiter().serve(\"0.0.0.0\", 12227, secret=&lt;SECRET&gt;) # Add authentication\n\n    RiotAPIRateLimiter(proxy=\"http://127.0.0.1:12227\") # Proxy to 127.0.0.1:12227\n    RiotAPIRateLimiter(proxy=\"http://127.0.0.1:12227\", proxy_secret=&lt;SECRET&gt;) # Proxy authentication\n    RiotAPIRateLimiter(proxy=\"&lt;SCHEME&gt;://&lt;HOST&gt;:&lt;PORT&gt;\")\n    RiotAPIRateLimiter(proxy=\"&lt;SCHEME&gt;://&lt;HOST&gt;:&lt;PORT&gt;\", proxy_secret=&lt;SECRET&gt;)\n    ```\n\n    Parameters:\n        proxy: URL of the proxy rate limiter.\n        proxy_secret: Secret of the proxy rate limiter if required.\n    \"\"\"\n\n    _index: dict[tuple[str, int, *tuple[str]], tuple[int, int, float, float, float]] = \\\n        collections.defaultdict(lambda: (0, 0, 0, 0, 0))\n\n    def __init__(self, *, proxy: str | None = None, proxy_secret: str | None = None) -&gt; None:\n        self.proxy = proxy\n        self.proxy_secret = proxy_secret\n        self._track_syncs: dict[str, tuple[float, list]] = {}\n\n    async def acquire(self, invocation: Invocation) -&gt; float:\n        if self.proxy:\n            response = await invocation.session.post(\n                self.proxy + \"/acquire\",\n                json={\n                    \"invocation\": {\n                        \"uid\": invocation.uid,\n                        \"method\": invocation.method,\n                        \"urlformat\": invocation.urlformat,\n                        \"params\": invocation.params,\n                    }\n                },\n                headers=self.proxy_secret and {\"Authorization\": \"Bearer \" + self.proxy_secret}\n            )\n            response.raise_for_status()\n            return await response.json()\n\n        wait_for = 0\n        pinging_targets = []\n        requesting_targets = []\n        request_time = time.time()\n        for target in [\n            (\"app\", 0, invocation.params.get(\"region\", \"\"), invocation.method),\n            (\"app\", 1, invocation.params.get(\"region\", \"\"), invocation.method),\n            (\"method\", 0, invocation.params.get(\"region\", \"\"), invocation.method, invocation.urlformat),\n            (\"method\", 1, invocation.params.get(\"region\", \"\"), invocation.method, invocation.urlformat),\n        ]:\n            count, limit, expire, latency, pinged = self._index[target]\n            pinging = pinged and request_time - pinged &lt; 10\n            if pinging:\n                wait_for = max(wait_for, 0.1)\n            elif request_time &gt; expire:\n                pinging_targets.append(target)\n            elif request_time &gt; expire - latency * 1.1 + 0.01 or count &gt;= limit:\n                wait_for = max(wait_for, expire - request_time)\n            else:\n                requesting_targets.append(target)\n        if wait_for &lt;= 0:\n            if pinging_targets:\n                self._track_syncs[invocation.uid] = (request_time, pinging_targets)\n                for pinging_target in pinging_targets:\n                    self._index[pinging_target] = (0, 0, 0, 0, time.time())\n                wait_for = -1\n            for requesting_target in requesting_targets:\n                count, *values = self._index[requesting_target]\n                self._index[requesting_target] = (count + 1, *values)\n        return wait_for\n\n    async def synchronize(self, invocation: Invocation, headers: dict[str, str]) -&gt; None:\n        if self.proxy:\n            response = await invocation.session.post(\n                self.proxy + \"/synchronize\",\n                json={\n                    \"invocation\": {\n                        \"uid\": invocation.uid,\n                        \"method\": invocation.method,\n                        \"urlformat\": invocation.urlformat,\n                        \"params\": invocation.params,\n                    },\n                    \"headers\": dict(headers)\n                },\n                headers=self.proxy_secret and {\"Authorization\": \"Bearer \" + self.proxy_secret}\n            )\n            return response.raise_for_status()\n\n        response_time = time.time()\n        request_time, pinging_targets = self._track_syncs.pop(invocation.uid, [None, None])\n        if request_time is None:\n            return\n\n        if random.random() &lt; 0.1:\n            for prev_uid, (prev_request_time, _) in list(self._track_syncs.items()):\n                if response_time - prev_request_time &gt; 600:\n                    self._track_syncs.pop(prev_uid, None)\n\n        try:\n            header_limits = {\n                \"app\": [[int(v) for v in t.split(':')] for t in headers[\"X-App-Rate-Limit\"].split(',')],\n                \"method\": [[int(v) for v in t.split(':')] for t in headers[\"X-Method-Rate-Limit\"].split(',')],\n            }\n            header_counts = {\n                \"app\": [[int(v) for v in t.split(':')] for t in headers[\"X-App-Rate-Limit-Count\"].split(',')],\n                \"method\": [[int(v) for v in t.split(':')] for t in headers[\"X-Method-Rate-Limit-Count\"].split(',')],\n            }\n        except KeyError:\n            for pinging_target in pinging_targets:\n                self._index[pinging_target] = (0, 0, 0, 0, 0)\n            return\n        for scope, idx, *subscopes in pinging_targets:\n            if idx &gt;= len(header_limits[scope]):\n                self._index[(scope, idx, *subscopes)] = (0, 10**10, response_time + 3600, 0, 0)\n                continue\n            self._index[(scope, idx, *subscopes)] = (\n                header_counts[scope][idx][0],\n                header_limits[scope][idx][0],\n                header_limits[scope][idx][1] + response_time,\n                response_time - request_time,\n                0\n            )\n\n    def serve(self, host=\"127.0.0.1\", port=12227, *, secret: str | None = None) -&gt; NoReturn:\n        from aiohttp import web\n\n        app = web.Application(client_max_size=4096)\n        routes = web.RouteTableDef()\n\n        def is_authenticated(request: web.Request):\n            if not secret:\n                return True\n            request_secret = request.headers.get(\"Authorization\", \"Bearer \").lstrip(\"Bearer \")\n            return request_secret == secret\n\n        @routes.post(\"/acquire\")\n        async def acquire(request: web.Request) -&gt; web.Response:\n            if not is_authenticated(request):\n                return web.Response(status=401)\n            try:\n                data = await request.json()\n                wait_for = await self.acquire(Invocation(**data[\"invocation\"]))\n                return web.json_response(wait_for)\n            except (KeyError, ValueError):\n                return web.Response(status=400)\n\n        @routes.post(\"/synchronize\")\n        async def synchronize(request: web.Request) -&gt; web.Response:\n            if not is_authenticated(request):\n                return web.Response(status=401)\n            try:\n                data = await request.json()\n                await self.synchronize(Invocation(**data[\"invocation\"]), data[\"headers\"])\n                return web.Response()\n            except (KeyError, ValueError):\n                return web.Response(status=400)\n\n        app.add_routes(routes)\n        web.run_app(app, host=host, port=port)\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter-attributes","title":"Attributes","text":""},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter.proxy","title":"proxy  <code>instance-attribute</code>","text":"<pre><code>proxy = proxy\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter.proxy_secret","title":"proxy_secret  <code>instance-attribute</code>","text":"<pre><code>proxy_secret = proxy_secret\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter-functions","title":"Functions","text":""},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter.__init__","title":"__init__","text":"<pre><code>__init__(\n    *, proxy: str | None = None, proxy_secret: str | None = None\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>def __init__(self, *, proxy: str | None = None, proxy_secret: str | None = None) -&gt; None:\n    self.proxy = proxy\n    self.proxy_secret = proxy_secret\n    self._track_syncs: dict[str, tuple[float, list]] = {}\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter.acquire","title":"acquire  <code>async</code>","text":"<pre><code>acquire(invocation: Invocation) -&gt; float\n</code></pre> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>async def acquire(self, invocation: Invocation) -&gt; float:\n    if self.proxy:\n        response = await invocation.session.post(\n            self.proxy + \"/acquire\",\n            json={\n                \"invocation\": {\n                    \"uid\": invocation.uid,\n                    \"method\": invocation.method,\n                    \"urlformat\": invocation.urlformat,\n                    \"params\": invocation.params,\n                }\n            },\n            headers=self.proxy_secret and {\"Authorization\": \"Bearer \" + self.proxy_secret}\n        )\n        response.raise_for_status()\n        return await response.json()\n\n    wait_for = 0\n    pinging_targets = []\n    requesting_targets = []\n    request_time = time.time()\n    for target in [\n        (\"app\", 0, invocation.params.get(\"region\", \"\"), invocation.method),\n        (\"app\", 1, invocation.params.get(\"region\", \"\"), invocation.method),\n        (\"method\", 0, invocation.params.get(\"region\", \"\"), invocation.method, invocation.urlformat),\n        (\"method\", 1, invocation.params.get(\"region\", \"\"), invocation.method, invocation.urlformat),\n    ]:\n        count, limit, expire, latency, pinged = self._index[target]\n        pinging = pinged and request_time - pinged &lt; 10\n        if pinging:\n            wait_for = max(wait_for, 0.1)\n        elif request_time &gt; expire:\n            pinging_targets.append(target)\n        elif request_time &gt; expire - latency * 1.1 + 0.01 or count &gt;= limit:\n            wait_for = max(wait_for, expire - request_time)\n        else:\n            requesting_targets.append(target)\n    if wait_for &lt;= 0:\n        if pinging_targets:\n            self._track_syncs[invocation.uid] = (request_time, pinging_targets)\n            for pinging_target in pinging_targets:\n                self._index[pinging_target] = (0, 0, 0, 0, time.time())\n            wait_for = -1\n        for requesting_target in requesting_targets:\n            count, *values = self._index[requesting_target]\n            self._index[requesting_target] = (count + 1, *values)\n    return wait_for\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter.synchronize","title":"synchronize  <code>async</code>","text":"<pre><code>synchronize(invocation: Invocation, headers: dict[str, str]) -&gt; None\n</code></pre> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>async def synchronize(self, invocation: Invocation, headers: dict[str, str]) -&gt; None:\n    if self.proxy:\n        response = await invocation.session.post(\n            self.proxy + \"/synchronize\",\n            json={\n                \"invocation\": {\n                    \"uid\": invocation.uid,\n                    \"method\": invocation.method,\n                    \"urlformat\": invocation.urlformat,\n                    \"params\": invocation.params,\n                },\n                \"headers\": dict(headers)\n            },\n            headers=self.proxy_secret and {\"Authorization\": \"Bearer \" + self.proxy_secret}\n        )\n        return response.raise_for_status()\n\n    response_time = time.time()\n    request_time, pinging_targets = self._track_syncs.pop(invocation.uid, [None, None])\n    if request_time is None:\n        return\n\n    if random.random() &lt; 0.1:\n        for prev_uid, (prev_request_time, _) in list(self._track_syncs.items()):\n            if response_time - prev_request_time &gt; 600:\n                self._track_syncs.pop(prev_uid, None)\n\n    try:\n        header_limits = {\n            \"app\": [[int(v) for v in t.split(':')] for t in headers[\"X-App-Rate-Limit\"].split(',')],\n            \"method\": [[int(v) for v in t.split(':')] for t in headers[\"X-Method-Rate-Limit\"].split(',')],\n        }\n        header_counts = {\n            \"app\": [[int(v) for v in t.split(':')] for t in headers[\"X-App-Rate-Limit-Count\"].split(',')],\n            \"method\": [[int(v) for v in t.split(':')] for t in headers[\"X-Method-Rate-Limit-Count\"].split(',')],\n        }\n    except KeyError:\n        for pinging_target in pinging_targets:\n            self._index[pinging_target] = (0, 0, 0, 0, 0)\n        return\n    for scope, idx, *subscopes in pinging_targets:\n        if idx &gt;= len(header_limits[scope]):\n            self._index[(scope, idx, *subscopes)] = (0, 10**10, response_time + 3600, 0, 0)\n            continue\n        self._index[(scope, idx, *subscopes)] = (\n            header_counts[scope][idx][0],\n            header_limits[scope][idx][0],\n            header_limits[scope][idx][1] + response_time,\n            response_time - request_time,\n            0\n        )\n</code></pre>"},{"location":"reference/ratelimiters/riot-api-rate-limiter/#pulsefire.ratelimiters.RiotAPIRateLimiter.serve","title":"serve","text":"<pre><code>serve(\n    host=\"127.0.0.1\", port=12227, *, secret: str | None = None\n) -&gt; NoReturn\n</code></pre> Source code in <code>pulsefire/ratelimiters.py</code> <pre><code>def serve(self, host=\"127.0.0.1\", port=12227, *, secret: str | None = None) -&gt; NoReturn:\n    from aiohttp import web\n\n    app = web.Application(client_max_size=4096)\n    routes = web.RouteTableDef()\n\n    def is_authenticated(request: web.Request):\n        if not secret:\n            return True\n        request_secret = request.headers.get(\"Authorization\", \"Bearer \").lstrip(\"Bearer \")\n        return request_secret == secret\n\n    @routes.post(\"/acquire\")\n    async def acquire(request: web.Request) -&gt; web.Response:\n        if not is_authenticated(request):\n            return web.Response(status=401)\n        try:\n            data = await request.json()\n            wait_for = await self.acquire(Invocation(**data[\"invocation\"]))\n            return web.json_response(wait_for)\n        except (KeyError, ValueError):\n            return web.Response(status=400)\n\n    @routes.post(\"/synchronize\")\n    async def synchronize(request: web.Request) -&gt; web.Response:\n        if not is_authenticated(request):\n            return web.Response(status=401)\n        try:\n            data = await request.json()\n            await self.synchronize(Invocation(**data[\"invocation\"]), data[\"headers\"])\n            return web.Response()\n        except (KeyError, ValueError):\n            return web.Response(status=400)\n\n    app.add_routes(routes)\n    web.run_app(app, host=host, port=port)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/","title":"CDragonSchema","text":"<pre><code>from pulsefire.schemas import CDragonSchema\n</code></pre> Source code in <code>pulsefire/schemas.py</code> <pre><code>class CDragonSchema:\n\n    LolV1ChampionTacticalInfo = TypedDict(\"LolV1ChampionTacticalInfo\", {\n        \"style\": int,\n        \"difficulty\": int,\n        \"damageType\": str\n    })\n    LolV1ChampionPlaystyleInfo = TypedDict(\"LolV1ChampionPlaystyleInfo\", {\n        \"damage\": int,\n        \"durability\": int,\n        \"crowdControl\": int,\n        \"mobility\": int,\n        \"utility\": int\n    })\n    LolV1ChampionSkinLine = TypedDict(\"LolV1ChampionSkinLine\", {\n        \"id\": int\n    })\n    LolV1ChampionSkinChromaDescription = TypedDict(\"LolV1ChampionSkinChromaDescription\", {\n        \"region\": str,\n        \"description\": str\n    })\n    LolV1ChampionSkinChromaRarity = TypedDict(\"LolV1ChampionSkinChromaRarity\", {\n        \"region\": str,\n        \"rarity\": int\n    })\n    LolV1ChampionSkinChroma = TypedDict(\"LolV1ChampionSkinChroma\", {\n        \"id\": int,\n        \"name\": str,\n        \"chromaPath\": str,\n        \"colors\": list[str],\n        \"descriptions\": list[LolV1ChampionSkinChromaDescription],\n        \"rarities\": list[LolV1ChampionSkinChromaRarity]\n    })\n    LolV1ChampionSkin = TypedDict(\"LolV1ChampionSkin\", {\n        \"id\": int,\n        \"isBase\": bool,\n        \"name\": str,\n        \"contentId\": str,\n        \"splashPath\": str,\n        \"uncenteredSplashPath\": str,\n        \"tilePath\": str,\n        \"loadScreenPath\": str,\n        \"loadScreenVintagePath\": NotRequired[str],\n        \"skinType\": str,\n        \"rarity\": str,\n        \"isLegacy\": bool,\n        \"splashVideoPath\": str | None,\n        \"collectionSplashVideoPath\": str | None,\n        \"collectionCardHoverVideoPath\": str | None,\n        \"featuresText\": str | None,\n        \"chromaPath\": str | None,\n        \"emblems\": str | None,\n        \"regionRarityId\": int,\n        \"rarityGemPath\": str | None,\n        \"skinLines\": None | list[LolV1ChampionSkinLine],\n        \"description\": str | None,\n        \"chromas\": NotRequired[list[LolV1ChampionSkinChroma]],\n    })\n    LolV1ChampionPassive = TypedDict(\"LolV1ChampionPassive\", {\n        \"name\": str,\n        \"abilityIconPath\": str,\n        \"abilityVideoPath\": str,\n        \"abilityVideoImagePath\": str,\n        \"description\": str\n    })\n    LolV1ChampionSpellCoefficients = TypedDict(\"LolV1ChampionSpellCoefficients\", {\n        \"coefficient1\": float,\n        \"coefficient2\": float\n    })\n    LolV1ChampionSpellEffectAmounts = TypedDict(\"LolV1ChampionSpellEffectAmounts\", {\n        \"Effect1Amount\": list[float],\n        \"Effect2Amount\": list[float],\n        \"Effect3Amount\": list[float],\n        \"Effect4Amount\": list[float],\n        \"Effect5Amount\": list[float],\n        \"Effect6Amount\": list[float],\n        \"Effect7Amount\": list[float],\n        \"Effect8Amount\": list[float],\n        \"Effect9Amount\": list[float],\n        \"Effect10Amount\": list[float]\n    })\n    LolV1ChampionSpellAmmo = TypedDict(\"LolV1ChampionSpellAmmo\", {\n        \"ammoRechargeTime\": list[float],\n        \"maxAmmo\": list[int]\n    })\n    LolV1ChampionSpell = TypedDict(\"LolV1ChampionSpell\", {\n        \"spellKey\": str,\n        \"name\": str,\n        \"abilityIconPath\": str,\n        \"abilityVideoPath\": str,\n        \"abilityVideoImagePath\": str,\n        \"cost\": str,\n        \"cooldown\": str,\n        \"description\": str,\n        \"dynamicDescription\": str,\n        \"range\": list[float],\n        \"costCoefficients\": list[float],\n        \"cooldownCoefficients\": list[float],\n        \"coefficients\": LolV1ChampionSpellCoefficients,\n        \"effectAmounts\": LolV1ChampionSpellEffectAmounts,\n        \"ammo\": LolV1ChampionSpellAmmo,\n        \"maxLevel\": int\n    })\n    LolV1Champion = TypedDict(\"LolGameDataV1Champion\", {\n        \"id\": int,\n        \"name\": str,\n        \"alias\": str,\n        \"title\": str,\n        \"shortBio\": str,\n        \"tacticalInfo\": LolV1ChampionTacticalInfo,\n        \"playstyleInfo\": LolV1ChampionPlaystyleInfo,\n        \"squarePortraitPath\": str,\n        \"stingerSfxPath\": str,\n        \"chooseVoPath\": str,\n        \"banVoPath\": str,\n        \"roles\": list[str],\n        \"recommendedItemDefaults\": list[int],\n        \"skins\": list[LolV1ChampionSkin],\n        \"passive\": LolV1ChampionPassive,\n        \"spells\": list[LolV1ChampionSpell]\n    })\n    LolChampionBinValueCatalogEntry = TypedDict(\"LolChampionBinValueCatalogEntry\", {\n        \"contentId\": str,\n        \"itemID\": int,\n        \"offerId\": str,\n        \"__type\": str\n    })\n    LolChampionBinValueEventsToTrack = TypedDict(\"LolChampionBinValueEventsToTrack\", {\n        \"EventToTrack\": int,\n        \"__type\": str\n    })\n    LolChampionBinValue = TypedDict(\"LolChampionBinValue\", {\n        \"mNameTraKey\": str,\n        \"catalogEntry\": LolChampionBinValueCatalogEntry,\n        \"mDescriptionTraKey\": str,\n        \"EventsToTrack\": list[LolChampionBinValueEventsToTrack],\n        \"category\": str,\n        \"Milestones\": list[int],\n        \"EpicStatStone\": bool,\n        \"TriggeredFromScript\": bool,\n        \"stoneName\": str,\n        \"name\": str,\n        \"statStones\": list[str],\n        \"__type\": str\n    }, total=False)\n    LolV1ChampionInfo = TypedDict(\"LolV1ChampionInfo\", {\n        \"id\": int,\n        \"name\": str,\n        \"alias\": str,\n        \"contentId\": str,\n        \"description\": str,\n        \"squarePortraitPath\": str,\n        \"roles\": list[str]\n    })\n    LolV1Item = TypedDict(\"LolV1Item\", {\n        \"id\": int,\n        \"name\": str,\n        \"description\": str,\n        \"active\": bool,\n        \"inStore\": bool,\n        \"from\": list[int],\n        \"to\": list[int],\n        \"categories\": list[str],\n        \"maxStacks\": int,\n        \"requiredChampion\": str,\n        \"requiredAlly\": str,\n        \"requiredBuffCurrencyName\": str,\n        \"requiredBuffCurrencyCost\": int,\n        \"specialRecipe\": int,\n        \"isEnchantment\": bool,\n        \"price\": int,\n        \"priceTotal\": int,\n        \"iconPath\": str,\n        \"displayInItemSets\": bool\n    })\n    LolV1PerkDescriptorAttributes = TypedDict(\"LolV1PerkDescriptorAttributes\", {\n        \"kBurstDamage\": NotRequired[int],\n        \"kDamagePerSecond\": NotRequired[int],\n        \"kMoveSpeed\": NotRequired[int],\n        \"kGold\": NotRequired[int],\n        \"kHealing\": NotRequired[int],\n        \"kDurability\": NotRequired[int],\n        \"kUtility\": NotRequired[int],\n        \"kCooldown\": NotRequired[int],\n        \"kMana\": NotRequired[int],\n    })\n    LolV1Perk = TypedDict(\"LolV1Perk\", {\n        \"id\": int,\n        \"name\": str,\n        \"majorChangePatchVersion\": str,\n        \"tooltip\": str,\n        \"shortDesc\": str,\n        \"longDesc\": str,\n        \"recommendationDescriptor\": str,\n        \"iconPath\": str,\n        \"endOfGameStatDescs\": list[str],\n        \"recommendationDescriptorAttributes\": LolV1PerkDescriptorAttributes\n    })\n    LolV1SummonerSpell = TypedDict(\"LolV1SummonerSpell\", {\n        \"id\": int,\n        \"name\": str,\n        \"description\": str,\n        \"summonerLevel\": int,\n        \"cooldown\": int,\n        \"gameModes\": list[str],\n        \"iconPath\": str\n    })\n    LolV1ProfileIcon = TypedDict(\"LolV1ProfileIcon\", {\n        \"id\": int,\n        \"iconPath\": str\n    })\n    TftDataTftItem = TypedDict(\"TftDataTftItem\", {\n        \"apiName\": str,\n        \"associatedTraits\": list[str],\n        \"composition\": list[str],\n        \"desc\": str,\n        \"effects\": dict[str, float],\n        \"from\": list[int] | None,\n        \"icon\": str,\n        \"id\": int | None,\n        \"incompatibleTraits\": list[str],\n        \"name\": str,\n        \"unique\": bool,\n        \"tags\": list[str],\n    })\n    TftDataTftSetChampionAbilityVariable = TypedDict(\"TftDataTftSetChampionAbilityVariable\", {\n        \"name\": str,\n        \"value\": list[float]\n    })\n    TftDataTftSetChampionAbility = TypedDict(\"TftDataTftSetChampionAbility\", {\n        \"desc\": str,\n        \"icon\": str,\n        \"name\": str,\n        \"variables\": list[TftDataTftSetChampionAbilityVariable]\n    })\n    TftDataTftSetChampionStats = TypedDict(\"TftDataTftSetChampionStats\", {\n        \"armor\": float,\n        \"attackSpeed\": float,\n        \"critChance\": float,\n        \"critMultiplier\": float,\n        \"damage\": float,\n        \"hp\": float | None,\n        \"initialMana\": float,\n        \"magicResist\": float,\n        \"mana\": float,\n        \"range\": float\n    })\n    TftDataTftSetChampion = TypedDict(\"TftDataTftSetChampion\", {\n        \"ability\": TftDataTftSetChampionAbility,\n        \"apiName\": str,\n        \"characterName\": str,\n        \"cost\": int,\n        \"icon\": str,\n        \"name\": str,\n        \"squareIcon\": str,\n        \"role\": None,\n        \"stats\": TftDataTftSetChampionStats,\n        \"tileIcon\": str,\n        \"traits\": list[str]\n    })\n    TftDataTftSetTraitEffect = TypedDict(\"TftDataTftSetTraitEffect\", {\n        \"maxUnits\": int,\n        \"minUnits\": int,\n        \"style\": int,\n        \"variables\": dict[str, float | str | None]\n    })\n    TftDataTftSetTrait = TypedDict(\"TftDataTftSetTrait\", {\n        \"apiName\": str,\n        \"desc\": str,\n        \"effects\": list[TftDataTftSetTraitEffect],\n        \"icon\": str,\n        \"name\": str\n    })\n    TftDataTftSetCurrent = TypedDict(\"TftDataTftSetCurrent\", {\n        \"champions\": list[TftDataTftSetChampion],\n        \"mutator\": NotRequired[str],\n        \"name\": NotRequired[str],\n        \"number\": NotRequired[int],\n        \"traits\": list[TftDataTftSetTrait],\n        \"augments\": list[str],\n        \"items\": list[str],\n    })\n    TftDataTftSet = TypedDict(\"TftDataTftSet\", {\n        \"champions\": list[TftDataTftSetChampion],\n        \"mutator\": NotRequired[str],\n        \"name\": NotRequired[str],\n        \"number\": NotRequired[int],\n        \"traits\": list[TftDataTftSetTrait],\n    })\n    TftData = TypedDict(\"TftData\", {\n        \"items\": list[TftDataTftItem],\n        \"setData\": list[TftDataTftSetCurrent],\n        \"sets\": dict[str, TftDataTftSet]\n    })\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema-attributes","title":"Attributes","text":""},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionTacticalInfo","title":"LolV1ChampionTacticalInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionTacticalInfo = TypedDict(\n    \"LolV1ChampionTacticalInfo\",\n    {\"style\": int, \"difficulty\": int, \"damageType\": str},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionPlaystyleInfo","title":"LolV1ChampionPlaystyleInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionPlaystyleInfo = TypedDict(\n    \"LolV1ChampionPlaystyleInfo\",\n    {\n        \"damage\": int,\n        \"durability\": int,\n        \"crowdControl\": int,\n        \"mobility\": int,\n        \"utility\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSkinLine","title":"LolV1ChampionSkinLine  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSkinLine = TypedDict(\n    \"LolV1ChampionSkinLine\", {\"id\": int}\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSkinChromaDescription","title":"LolV1ChampionSkinChromaDescription  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSkinChromaDescription = TypedDict(\n    \"LolV1ChampionSkinChromaDescription\",\n    {\"region\": str, \"description\": str},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSkinChromaRarity","title":"LolV1ChampionSkinChromaRarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSkinChromaRarity = TypedDict(\n    \"LolV1ChampionSkinChromaRarity\", {\"region\": str, \"rarity\": int}\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSkinChroma","title":"LolV1ChampionSkinChroma  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSkinChroma = TypedDict(\n    \"LolV1ChampionSkinChroma\",\n    {\n        \"id\": int,\n        \"name\": str,\n        \"chromaPath\": str,\n        \"colors\": list[str],\n        \"descriptions\": list[LolV1ChampionSkinChromaDescription],\n        \"rarities\": list[LolV1ChampionSkinChromaRarity],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSkin","title":"LolV1ChampionSkin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSkin = TypedDict(\n    \"LolV1ChampionSkin\",\n    {\n        \"id\": int,\n        \"isBase\": bool,\n        \"name\": str,\n        \"contentId\": str,\n        \"splashPath\": str,\n        \"uncenteredSplashPath\": str,\n        \"tilePath\": str,\n        \"loadScreenPath\": str,\n        \"loadScreenVintagePath\": NotRequired[str],\n        \"skinType\": str,\n        \"rarity\": str,\n        \"isLegacy\": bool,\n        \"splashVideoPath\": str | None,\n        \"collectionSplashVideoPath\": str | None,\n        \"collectionCardHoverVideoPath\": str | None,\n        \"featuresText\": str | None,\n        \"chromaPath\": str | None,\n        \"emblems\": str | None,\n        \"regionRarityId\": int,\n        \"rarityGemPath\": str | None,\n        \"skinLines\": None | list[LolV1ChampionSkinLine],\n        \"description\": str | None,\n        \"chromas\": NotRequired[list[LolV1ChampionSkinChroma]],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionPassive","title":"LolV1ChampionPassive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionPassive = TypedDict(\n    \"LolV1ChampionPassive\",\n    {\n        \"name\": str,\n        \"abilityIconPath\": str,\n        \"abilityVideoPath\": str,\n        \"abilityVideoImagePath\": str,\n        \"description\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSpellCoefficients","title":"LolV1ChampionSpellCoefficients  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSpellCoefficients = TypedDict(\n    \"LolV1ChampionSpellCoefficients\",\n    {\"coefficient1\": float, \"coefficient2\": float},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSpellEffectAmounts","title":"LolV1ChampionSpellEffectAmounts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSpellEffectAmounts = TypedDict(\n    \"LolV1ChampionSpellEffectAmounts\",\n    {\n        \"Effect1Amount\": list[float],\n        \"Effect2Amount\": list[float],\n        \"Effect3Amount\": list[float],\n        \"Effect4Amount\": list[float],\n        \"Effect5Amount\": list[float],\n        \"Effect6Amount\": list[float],\n        \"Effect7Amount\": list[float],\n        \"Effect8Amount\": list[float],\n        \"Effect9Amount\": list[float],\n        \"Effect10Amount\": list[float],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSpellAmmo","title":"LolV1ChampionSpellAmmo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSpellAmmo = TypedDict(\n    \"LolV1ChampionSpellAmmo\",\n    {\"ammoRechargeTime\": list[float], \"maxAmmo\": list[int]},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionSpell","title":"LolV1ChampionSpell  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionSpell = TypedDict(\n    \"LolV1ChampionSpell\",\n    {\n        \"spellKey\": str,\n        \"name\": str,\n        \"abilityIconPath\": str,\n        \"abilityVideoPath\": str,\n        \"abilityVideoImagePath\": str,\n        \"cost\": str,\n        \"cooldown\": str,\n        \"description\": str,\n        \"dynamicDescription\": str,\n        \"range\": list[float],\n        \"costCoefficients\": list[float],\n        \"cooldownCoefficients\": list[float],\n        \"coefficients\": LolV1ChampionSpellCoefficients,\n        \"effectAmounts\": LolV1ChampionSpellEffectAmounts,\n        \"ammo\": LolV1ChampionSpellAmmo,\n        \"maxLevel\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1Champion","title":"LolV1Champion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1Champion = TypedDict(\n    \"LolGameDataV1Champion\",\n    {\n        \"id\": int,\n        \"name\": str,\n        \"alias\": str,\n        \"title\": str,\n        \"shortBio\": str,\n        \"tacticalInfo\": LolV1ChampionTacticalInfo,\n        \"playstyleInfo\": LolV1ChampionPlaystyleInfo,\n        \"squarePortraitPath\": str,\n        \"stingerSfxPath\": str,\n        \"chooseVoPath\": str,\n        \"banVoPath\": str,\n        \"roles\": list[str],\n        \"recommendedItemDefaults\": list[int],\n        \"skins\": list[LolV1ChampionSkin],\n        \"passive\": LolV1ChampionPassive,\n        \"spells\": list[LolV1ChampionSpell],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolChampionBinValueCatalogEntry","title":"LolChampionBinValueCatalogEntry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionBinValueCatalogEntry = TypedDict(\n    \"LolChampionBinValueCatalogEntry\",\n    {\"contentId\": str, \"itemID\": int, \"offerId\": str, \"__type\": str},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolChampionBinValueEventsToTrack","title":"LolChampionBinValueEventsToTrack  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionBinValueEventsToTrack = TypedDict(\n    \"LolChampionBinValueEventsToTrack\",\n    {\"EventToTrack\": int, \"__type\": str},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolChampionBinValue","title":"LolChampionBinValue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionBinValue = TypedDict(\n    \"LolChampionBinValue\",\n    {\n        \"mNameTraKey\": str,\n        \"catalogEntry\": LolChampionBinValueCatalogEntry,\n        \"mDescriptionTraKey\": str,\n        \"EventsToTrack\": list[LolChampionBinValueEventsToTrack],\n        \"category\": str,\n        \"Milestones\": list[int],\n        \"EpicStatStone\": bool,\n        \"TriggeredFromScript\": bool,\n        \"stoneName\": str,\n        \"name\": str,\n        \"statStones\": list[str],\n        \"__type\": str,\n    },\n    total=False,\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ChampionInfo","title":"LolV1ChampionInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ChampionInfo = TypedDict(\n    \"LolV1ChampionInfo\",\n    {\n        \"id\": int,\n        \"name\": str,\n        \"alias\": str,\n        \"contentId\": str,\n        \"description\": str,\n        \"squarePortraitPath\": str,\n        \"roles\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1Item","title":"LolV1Item  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1Item = TypedDict(\n    \"LolV1Item\",\n    {\n        \"id\": int,\n        \"name\": str,\n        \"description\": str,\n        \"active\": bool,\n        \"inStore\": bool,\n        \"from\": list[int],\n        \"to\": list[int],\n        \"categories\": list[str],\n        \"maxStacks\": int,\n        \"requiredChampion\": str,\n        \"requiredAlly\": str,\n        \"requiredBuffCurrencyName\": str,\n        \"requiredBuffCurrencyCost\": int,\n        \"specialRecipe\": int,\n        \"isEnchantment\": bool,\n        \"price\": int,\n        \"priceTotal\": int,\n        \"iconPath\": str,\n        \"displayInItemSets\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1PerkDescriptorAttributes","title":"LolV1PerkDescriptorAttributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1PerkDescriptorAttributes = TypedDict(\n    \"LolV1PerkDescriptorAttributes\",\n    {\n        \"kBurstDamage\": NotRequired[int],\n        \"kDamagePerSecond\": NotRequired[int],\n        \"kMoveSpeed\": NotRequired[int],\n        \"kGold\": NotRequired[int],\n        \"kHealing\": NotRequired[int],\n        \"kDurability\": NotRequired[int],\n        \"kUtility\": NotRequired[int],\n        \"kCooldown\": NotRequired[int],\n        \"kMana\": NotRequired[int],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1Perk","title":"LolV1Perk  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1Perk = TypedDict(\n    \"LolV1Perk\",\n    {\n        \"id\": int,\n        \"name\": str,\n        \"majorChangePatchVersion\": str,\n        \"tooltip\": str,\n        \"shortDesc\": str,\n        \"longDesc\": str,\n        \"recommendationDescriptor\": str,\n        \"iconPath\": str,\n        \"endOfGameStatDescs\": list[str],\n        \"recommendationDescriptorAttributes\": LolV1PerkDescriptorAttributes,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1SummonerSpell","title":"LolV1SummonerSpell  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1SummonerSpell = TypedDict(\n    \"LolV1SummonerSpell\",\n    {\n        \"id\": int,\n        \"name\": str,\n        \"description\": str,\n        \"summonerLevel\": int,\n        \"cooldown\": int,\n        \"gameModes\": list[str],\n        \"iconPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.LolV1ProfileIcon","title":"LolV1ProfileIcon  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolV1ProfileIcon = TypedDict(\n    \"LolV1ProfileIcon\", {\"id\": int, \"iconPath\": str}\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftItem","title":"TftDataTftItem  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftItem = TypedDict(\n    \"TftDataTftItem\",\n    {\n        \"apiName\": str,\n        \"associatedTraits\": list[str],\n        \"composition\": list[str],\n        \"desc\": str,\n        \"effects\": dict[str, float],\n        \"from\": list[int] | None,\n        \"icon\": str,\n        \"id\": int | None,\n        \"incompatibleTraits\": list[str],\n        \"name\": str,\n        \"unique\": bool,\n        \"tags\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetChampionAbilityVariable","title":"TftDataTftSetChampionAbilityVariable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetChampionAbilityVariable = TypedDict(\n    \"TftDataTftSetChampionAbilityVariable\",\n    {\"name\": str, \"value\": list[float]},\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetChampionAbility","title":"TftDataTftSetChampionAbility  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetChampionAbility = TypedDict(\n    \"TftDataTftSetChampionAbility\",\n    {\n        \"desc\": str,\n        \"icon\": str,\n        \"name\": str,\n        \"variables\": list[TftDataTftSetChampionAbilityVariable],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetChampionStats","title":"TftDataTftSetChampionStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetChampionStats = TypedDict(\n    \"TftDataTftSetChampionStats\",\n    {\n        \"armor\": float,\n        \"attackSpeed\": float,\n        \"critChance\": float,\n        \"critMultiplier\": float,\n        \"damage\": float,\n        \"hp\": float | None,\n        \"initialMana\": float,\n        \"magicResist\": float,\n        \"mana\": float,\n        \"range\": float,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetChampion","title":"TftDataTftSetChampion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetChampion = TypedDict(\n    \"TftDataTftSetChampion\",\n    {\n        \"ability\": TftDataTftSetChampionAbility,\n        \"apiName\": str,\n        \"characterName\": str,\n        \"cost\": int,\n        \"icon\": str,\n        \"name\": str,\n        \"squareIcon\": str,\n        \"role\": None,\n        \"stats\": TftDataTftSetChampionStats,\n        \"tileIcon\": str,\n        \"traits\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetTraitEffect","title":"TftDataTftSetTraitEffect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetTraitEffect = TypedDict(\n    \"TftDataTftSetTraitEffect\",\n    {\n        \"maxUnits\": int,\n        \"minUnits\": int,\n        \"style\": int,\n        \"variables\": dict[str, float | str | None],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetTrait","title":"TftDataTftSetTrait  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetTrait = TypedDict(\n    \"TftDataTftSetTrait\",\n    {\n        \"apiName\": str,\n        \"desc\": str,\n        \"effects\": list[TftDataTftSetTraitEffect],\n        \"icon\": str,\n        \"name\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSetCurrent","title":"TftDataTftSetCurrent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSetCurrent = TypedDict(\n    \"TftDataTftSetCurrent\",\n    {\n        \"champions\": list[TftDataTftSetChampion],\n        \"mutator\": NotRequired[str],\n        \"name\": NotRequired[str],\n        \"number\": NotRequired[int],\n        \"traits\": list[TftDataTftSetTrait],\n        \"augments\": list[str],\n        \"items\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftDataTftSet","title":"TftDataTftSet  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftDataTftSet = TypedDict(\n    \"TftDataTftSet\",\n    {\n        \"champions\": list[TftDataTftSetChampion],\n        \"mutator\": NotRequired[str],\n        \"name\": NotRequired[str],\n        \"number\": NotRequired[int],\n        \"traits\": list[TftDataTftSetTrait],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/cdragon-schema/#pulsefire.schemas.CDragonSchema.TftData","title":"TftData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftData = TypedDict(\n    \"TftData\",\n    {\n        \"items\": list[TftDataTftItem],\n        \"setData\": list[TftDataTftSetCurrent],\n        \"sets\": dict[str, TftDataTftSet],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/ddragon-schema/","title":"DDragonSchema","text":"<pre><code>from pulsefire.schemas import DDragonSchema\n</code></pre> Source code in <code>pulsefire/schemas.py</code> <pre><code>class DDragonSchema:\n\n    LorCardAsset = TypedDict(\"LorCardAsset\", {\n        \"gameAbsolutePath\": str,\n        \"fullAbsolutePath\": str\n    })\n    LorCard = TypedDict(\"LorCard\", {\n        \"associatedCards\": list[str],\n        \"associatedCardRefs\": list[str],\n        \"assets\": list[LorCardAsset],\n        \"regions\": list[str],\n        \"regionRefs\": list[str],\n        \"attack\": int,\n        \"cost\": int,\n        \"health\": int,\n        \"description\": str,\n        \"descriptionRaw\": str,\n        \"levelupDescription\": str,\n        \"levelupDescriptionRaw\": str,\n        \"flavorText\": str,\n        \"artistName\": str,\n        \"name\": str,\n        \"cardCode\": str,\n        \"keywords\": list[str],\n        \"keywordRefs\": list[str],\n        \"spellSpeed\": str,\n        \"spellSpeedRef\": str,\n        \"rarity\": str,\n        \"rarityRef\": str,\n        \"subtypes\": list[str],\n        \"supertype\": str,\n        \"type\": str,\n        \"collectible\": bool,\n        \"set\": str,\n        \"formats\": list[str],\n        \"formatRefs\": list[str]\n    })\n</code></pre>"},{"location":"reference/schemas/ddragon-schema/#pulsefire.schemas.DDragonSchema-attributes","title":"Attributes","text":""},{"location":"reference/schemas/ddragon-schema/#pulsefire.schemas.DDragonSchema.LorCardAsset","title":"LorCardAsset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorCardAsset = TypedDict(\n    \"LorCardAsset\", {\"gameAbsolutePath\": str, \"fullAbsolutePath\": str}\n)\n</code></pre>"},{"location":"reference/schemas/ddragon-schema/#pulsefire.schemas.DDragonSchema.LorCard","title":"LorCard  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorCard = TypedDict(\n    \"LorCard\",\n    {\n        \"associatedCards\": list[str],\n        \"associatedCardRefs\": list[str],\n        \"assets\": list[LorCardAsset],\n        \"regions\": list[str],\n        \"regionRefs\": list[str],\n        \"attack\": int,\n        \"cost\": int,\n        \"health\": int,\n        \"description\": str,\n        \"descriptionRaw\": str,\n        \"levelupDescription\": str,\n        \"levelupDescriptionRaw\": str,\n        \"flavorText\": str,\n        \"artistName\": str,\n        \"name\": str,\n        \"cardCode\": str,\n        \"keywords\": list[str],\n        \"keywordRefs\": list[str],\n        \"spellSpeed\": str,\n        \"spellSpeedRef\": str,\n        \"rarity\": str,\n        \"rarityRef\": str,\n        \"subtypes\": list[str],\n        \"supertype\": str,\n        \"type\": str,\n        \"collectible\": bool,\n        \"set\": str,\n        \"formats\": list[str],\n        \"formatRefs\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/","title":"MarlonAPISchema","text":"<pre><code>from pulsefire.schemas import MarlonAPISchema\n</code></pre> Source code in <code>pulsefire/schemas.py</code> <pre><code>class MarlonAPISchema:\n\n    ValV1AgentRole = TypedDict(\"ValV1AgentRole\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str\n    })\n    ValV1AgentRecruitmentData = TypedDict(\"ValV1AgentRecruitmentData\", {\n        \"counterId\": str,\n        \"milestoneId\": str,\n        \"milestoneThreshold\": int,\n        \"useLevelVpCostOverride\": bool,\n        \"levelVpCostOverride\": int,\n        \"startDate\": str,\n        \"endDate\": str\n    })\n    ValV1AgentAbility = TypedDict(\"ValV1AgentAbility\", {\n        \"slot\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"displayIcon\": str | None\n    })\n    ValV1Agent = TypedDict(\"ValV1Agent\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"developerName\": str,\n        \"characterTags\": list[str] | None,\n        \"displayIcon\": str,\n        \"displayIconSmall\": str,\n        \"bustPortrait\": str,\n        \"fullPortrait\": str,\n        \"fullPortraitV2\": str,\n        \"killfeedPortrait\": str,\n        \"background\": str,\n        \"backgroundGradientColors\": list[str],\n        \"assetPath\": str,\n        \"isFullPortraitRightFacing\": bool,\n        \"isPlayableCharacter\": bool,\n        \"isAvailableForTest\": bool,\n        \"isBaseContent\": bool,\n        \"role\": ValV1AgentRole,\n        \"recruitmentData\": ValV1AgentRecruitmentData | None,\n        \"abilities\": list[ValV1AgentAbility],\n        \"voiceLine\": str | None\n    })\n    ValV1BuddyLevel = TypedDict(\"ValV1BuddyLevel\", {\n        \"uuid\": str,\n        \"charmLevel\": int,\n        \"hideIfNotOwned\": bool,\n        \"displayName\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str\n    })\n    ValV1Buddy = TypedDict(\"ValV1Buddy\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"isHiddenIfNotOwned\": bool,\n        \"themeUuid\": str | None,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n        \"levels\": list[ValV1BuddyLevel]\n    })\n    ValV1Bundle = TypedDict(\"ValV1Bundle\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayNameSubText\": str | None,\n        \"description\": str,\n        \"extraDescription\": str | None,\n        \"promoDescription\": str | None,\n        \"useAdditionalContext\": bool,\n        \"displayIcon\": str,\n        \"displayIcon2\": str,\n        \"verticalPromoImage\": str | None,\n        \"assetPath\": str\n    })\n    ValV1Ceremony = TypedDict(\"ValV1Ceremony\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"assetPath\": str\n    })\n    ValV1CompetitiveTierTier = TypedDict(\"ValV1CompetitiveTierTier\", {\n        \"tier\": int,\n        \"tierName\": str,\n        \"division\": str,\n        \"divisionName\": str,\n        \"color\": str,\n        \"backgroundColor\": str,\n        \"smallIcon\": str | None,\n        \"largeIcon\": str | None,\n        \"rankTriangleDownIcon\": str | None,\n        \"rankTriangleUpIcon\": str | None\n    })\n    ValV1CompetitiveTier = TypedDict(\"ValV1CompetitiveTier\", {\n        \"uuid\": str,\n        \"assetObjectName\": str,\n        \"tiers\": list[ValV1CompetitiveTierTier],\n        \"assetPath\": str\n    })\n    ValV1ContentTier = TypedDict(\"ValV1ContentTier\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"devName\": str,\n        \"rank\": int,\n        \"juiceValue\": int,\n        \"juiceCost\": int,\n        \"highlightColor\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str\n    })\n    ValV1ContractReward = TypedDict(\"ValV1ContractReward\", {\n        \"type\": str,\n        \"uuid\": str,\n        \"amount\": int,\n        \"isHighlighted\": bool\n    })\n    ValV1ContractContentChapterLevel = TypedDict(\"ValV1ContractContentChapterLevel\", {\n        \"reward\": ValV1ContractReward,\n        \"xp\": int,\n        \"vpCost\": int,\n        \"isPurchasableWithVP\": bool,\n        \"doughCost\": int,\n        \"isPurchasableWithDough\": bool\n    })\n    ValV1ContractContentChapter = TypedDict(\"ValV1ContractContentChapter\", {\n        \"isEpilogue\": bool,\n        \"levels\": list[ValV1ContractContentChapterLevel],\n        \"freeRewards\": list[ValV1ContractReward] | None\n    })\n    ValV1ContractContent = TypedDict(\"ValV1ContractContent\", {\n        \"relationType\": str | None,\n        \"relationUuid\": str | None,\n        \"chapters\": list[ValV1ContractContentChapter],\n        \"premiumRewardScheduleUuid\": str | None,\n        \"premiumVPCost\": int\n    })\n    ValV1Contract = TypedDict(\"ValV1Contract\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayIcon\": str | None,\n        \"shipIt\": bool,\n        \"freeRewardScheduleUuid\": str,\n        \"content\": ValV1ContractContent,\n        \"assetPath\": str\n    })\n    ValV1Currency = TypedDict(\"ValV1Currency\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayNameSingular\": str,\n        \"displayIcon\": str,\n        \"largeIcon\": str,\n        \"assetPath\": str\n    })\n    ValV1Event = TypedDict(\"ValV1Event\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"shortDisplayName\": str,\n        \"startTime\": str,\n        \"endTime\": str,\n        \"assetPath\": str\n    })\n    ValV1GameModeGameRuleBoolOverride = TypedDict(\"ValV1GameModeGameRuleBoolOverride\", {\n        \"ruleName\": str,\n        \"state\": bool\n    })\n    ValV1GameModeGameFeatureOverride = TypedDict(\"ValV1GameModeGameFeatureOverride\", {\n        \"featureName\": str,\n        \"state\": bool\n    })\n    ValV1GameMode = TypedDict(\"ValV1GameMode\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"duration\": str,\n        \"economyType\": str,\n        \"allowsMatchTimeouts\": bool,\n        \"isTeamVoiceAllowed\": bool,\n        \"isMinimapHidden\": bool,\n        \"orbCount\": int,\n        \"roundsPerHalf\": int,\n        \"teamRoles\": list[str] | None,\n        \"gameFeatureOverrides\": list[ValV1GameModeGameFeatureOverride] | None,\n        \"gameRuleBoolOverrides\": list[ValV1GameModeGameRuleBoolOverride] | None,\n        \"displayIcon\": str,\n        \"assetPath\": str\n    })\n    ValV1GearShopData = TypedDict(\"ValV1GearShopData\", {\n        \"cost\": int,\n        \"category\": str,\n        \"categoryText\": str,\n        \"gridPosition\": str | None,\n        \"canBeTrashed\": bool,\n        \"image\": str | None,\n        \"newImage\": str | None,\n        \"newImage2\": str | None,\n        \"assetPath\": str\n    })\n    ValV1Gear = TypedDict(\"ValV1Gear\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n        \"shopData\": ValV1GearShopData\n    })\n    ValV1MapCalloutLocation = TypedDict(\"ValV1MapCalloutLocation\", {\n        \"x\": float,\n        \"y\": float\n    })\n    ValV1MapCallout = TypedDict(\"ValV1MapCallout\", {\n        \"regionName\": str,\n        \"superRegionName\": str,\n        \"location\": ValV1MapCalloutLocation\n    })\n    ValV1Map = TypedDict(\"ValV1Map\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"narrativeDescription\": str,\n        \"tacticalDescription\": str,\n        \"coordinates\": str,\n        \"displayIcon\": str,\n        \"listViewIcon\": str,\n        \"splash\": str,\n        \"assetPath\": str,\n        \"mapUrl\": str,\n        \"xMultiplier\": float,\n        \"yMultiplier\": float,\n        \"xScalarToAdd\": float,\n        \"yScalarToAdd\": float,\n        \"callouts\": list[ValV1MapCallout]\n    })\n    ValV1PlayerCard = TypedDict(\"ValV1PlayerCard\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"isHiddenIfNotOwned\": bool,\n        \"themeUuid\": str | None,\n        \"displayIcon\": str,\n        \"smallArt\": str,\n        \"wideArt\": str,\n        \"largeArt\": str,\n        \"assetPath\": str\n    })\n    ValV1PlayerTitle = TypedDict(\"ValV1PlayerTitle\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"titleText\": str,\n        \"isHiddenIfNotOwned\": bool,\n        \"assetPath\": str\n    })\n    ValV1Season = TypedDict(\"ValV1Season\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"type\": str | None,\n        \"startTime\": str,\n        \"endTime\": str,\n        \"parentUuid\": str | None,\n        \"assetPath\": str\n    })\n    ValV1SprayLevel = TypedDict(\"ValV1SprayLevel\", {\n        \"uuid\": str,\n        \"sprayLevel\": int,\n        \"displayName\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str\n    })\n    ValV1Spray = TypedDict(\"ValV1Spray\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"category\": str | None,\n        \"themeUuid\": str | None,\n        \"isNullSpray\": bool,\n        \"hideIfNotOwned\": bool,\n        \"displayIcon\": str,\n        \"fullIcon\": str,\n        \"fullTransparentIcon\": str,\n        \"animationPng\": str | None,\n        \"animationGif\": str | None,\n        \"assetPath\": str,\n        \"levels\": list[ValV1SprayLevel]\n    })\n    ValV1Theme = TypedDict(\"ValV1Theme\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayIcon\": str | None,\n        \"storeFeaturedImage\": str | None,\n        \"assetPath\": str\n    })\n    ValV1WeaponSkinLevel = TypedDict(\"ValV1WeaponSkinLevel\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"levelItem\": str | None,\n        \"displayIcon\": str | None,\n        \"streamedVideo\": str | None,\n        \"assetPath\": str\n    })\n    ValV1WeaponSkinChroma = TypedDict(\"ValV1WeaponSkinChroma\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayIcon\": str | None,\n        \"fullRender\": str,\n        \"swatch\": str | None,\n        \"streamedVideo\": str | None,\n        \"assetPath\": str\n    })\n    ValV1WeaponSkin = TypedDict(\"ValV1WeaponSkin\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"themeUuid\": str,\n        \"contentTierUuid\": None | str,\n        \"displayIcon\": str | None,\n        \"wallpaper\": str | None,\n        \"assetPath\": str,\n        \"chromas\": list[ValV1WeaponSkinChroma],\n        \"levels\": list[ValV1WeaponSkinLevel]\n    })\n    ValV1WeaponShopDataGridPosition = TypedDict(\"ValV1WeaponShopDataGridPosition\", {\n        \"row\": int,\n        \"column\": int\n    })\n    ValV1WeaponShopData = TypedDict(\"ValV1WeaponShopData\", {\n        \"cost\": int,\n        \"category\": str,\n        \"categoryText\": str,\n        \"gridPosition\": ValV1WeaponShopDataGridPosition,\n        \"canBeTrashed\": bool,\n        \"image\": str | None,\n        \"newImage\": str | None,\n        \"newImage2\": str | None,\n        \"assetPath\": str\n    })\n    ValV1WeaponStatsDamageRange = TypedDict(\"ValV1WeaponStatsDamageRange\", {\n        \"rangeStartMeters\": int,\n        \"rangeEndMeters\": int,\n        \"headDamage\": float,\n        \"bodyDamage\": int,\n        \"legDamage\": float\n    })\n    ValV1WeaponStatsAdsStats = TypedDict(\"ValV1WeaponStatsAdsStats\", {\n        \"zoomMultiplier\": float,\n        \"fireRate\": float,\n        \"runSpeedMultiplier\": float,\n        \"burstCount\": int,\n        \"firstBulletAccuracy\": float\n    })\n    ValV1WeaponStatsAltShotgunStats = TypedDict(\"ValV1WeaponStatsAltShotgunStats\", {\n        \"shotgunPelletCount\": float,\n        \"burstRate\": float\n    })\n    ValV1WeaponStatsAirBurstStats = TypedDict(\"ValV1WeaponStatsAirBurstStats\", {\n        \"shotgunPelletCount\": float,\n        \"burstDistance\": float\n    })\n    ValV1WeaponStats = TypedDict(\"ValV1WeaponStats\", {\n        \"fireRate\": int,\n        \"magazineSize\": int,\n        \"runSpeedMultiplier\": float,\n        \"equipTimeSeconds\": float,\n        \"reloadTimeSeconds\": int,\n        \"firstBulletAccuracy\": float,\n        \"shotgunPelletCount\": int,\n        \"wallPenetration\": str,\n        \"feature\": str | None,\n        \"fireMode\": str | None,\n        \"altFireType\": str | None,\n        \"adsStats\": ValV1WeaponStatsAdsStats,\n        \"altShotgunStats\": ValV1WeaponStatsAltShotgunStats,\n        \"airBurstStats\": ValV1WeaponStatsAirBurstStats,\n        \"damageRanges\": list[ValV1WeaponStatsDamageRange]\n    })\n    ValV1Weapon = TypedDict(\"ValV1Weapon\", {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"category\": str,\n        \"defaultSkinUuid\": str,\n        \"displayIcon\": str,\n        \"killStreamIcon\": str,\n        \"assetPath\": str,\n        \"weaponStats\": ValV1WeaponStats,\n        \"shopData\": ValV1WeaponShopData,\n        \"skins\": list[ValV1WeaponSkin]\n    })\n    ValV1Version = TypedDict(\"ValV1Version\", {\n        \"manifestId\": str,\n        \"branch\": str,\n        \"version\": str,\n        \"buildVersion\": str,\n        \"engineVersion\": str,\n        \"riotClientVersion\": str,\n        \"riotClientBuild\": str,\n        \"buildDate\": str\n    })\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema-attributes","title":"Attributes","text":""},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1AgentRole","title":"ValV1AgentRole  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1AgentRole = TypedDict(\n    \"ValV1AgentRole\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1AgentRecruitmentData","title":"ValV1AgentRecruitmentData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1AgentRecruitmentData = TypedDict(\n    \"ValV1AgentRecruitmentData\",\n    {\n        \"counterId\": str,\n        \"milestoneId\": str,\n        \"milestoneThreshold\": int,\n        \"useLevelVpCostOverride\": bool,\n        \"levelVpCostOverride\": int,\n        \"startDate\": str,\n        \"endDate\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1AgentAbility","title":"ValV1AgentAbility  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1AgentAbility = TypedDict(\n    \"ValV1AgentAbility\",\n    {\n        \"slot\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"displayIcon\": str | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Agent","title":"ValV1Agent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Agent = TypedDict(\n    \"ValV1Agent\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"developerName\": str,\n        \"characterTags\": list[str] | None,\n        \"displayIcon\": str,\n        \"displayIconSmall\": str,\n        \"bustPortrait\": str,\n        \"fullPortrait\": str,\n        \"fullPortraitV2\": str,\n        \"killfeedPortrait\": str,\n        \"background\": str,\n        \"backgroundGradientColors\": list[str],\n        \"assetPath\": str,\n        \"isFullPortraitRightFacing\": bool,\n        \"isPlayableCharacter\": bool,\n        \"isAvailableForTest\": bool,\n        \"isBaseContent\": bool,\n        \"role\": ValV1AgentRole,\n        \"recruitmentData\": ValV1AgentRecruitmentData | None,\n        \"abilities\": list[ValV1AgentAbility],\n        \"voiceLine\": str | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1BuddyLevel","title":"ValV1BuddyLevel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1BuddyLevel = TypedDict(\n    \"ValV1BuddyLevel\",\n    {\n        \"uuid\": str,\n        \"charmLevel\": int,\n        \"hideIfNotOwned\": bool,\n        \"displayName\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Buddy","title":"ValV1Buddy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Buddy = TypedDict(\n    \"ValV1Buddy\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"isHiddenIfNotOwned\": bool,\n        \"themeUuid\": str | None,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n        \"levels\": list[ValV1BuddyLevel],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Bundle","title":"ValV1Bundle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Bundle = TypedDict(\n    \"ValV1Bundle\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayNameSubText\": str | None,\n        \"description\": str,\n        \"extraDescription\": str | None,\n        \"promoDescription\": str | None,\n        \"useAdditionalContext\": bool,\n        \"displayIcon\": str,\n        \"displayIcon2\": str,\n        \"verticalPromoImage\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Ceremony","title":"ValV1Ceremony  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Ceremony = TypedDict(\n    \"ValV1Ceremony\",\n    {\"uuid\": str, \"displayName\": str, \"assetPath\": str},\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1CompetitiveTierTier","title":"ValV1CompetitiveTierTier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1CompetitiveTierTier = TypedDict(\n    \"ValV1CompetitiveTierTier\",\n    {\n        \"tier\": int,\n        \"tierName\": str,\n        \"division\": str,\n        \"divisionName\": str,\n        \"color\": str,\n        \"backgroundColor\": str,\n        \"smallIcon\": str | None,\n        \"largeIcon\": str | None,\n        \"rankTriangleDownIcon\": str | None,\n        \"rankTriangleUpIcon\": str | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1CompetitiveTier","title":"ValV1CompetitiveTier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1CompetitiveTier = TypedDict(\n    \"ValV1CompetitiveTier\",\n    {\n        \"uuid\": str,\n        \"assetObjectName\": str,\n        \"tiers\": list[ValV1CompetitiveTierTier],\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1ContentTier","title":"ValV1ContentTier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1ContentTier = TypedDict(\n    \"ValV1ContentTier\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"devName\": str,\n        \"rank\": int,\n        \"juiceValue\": int,\n        \"juiceCost\": int,\n        \"highlightColor\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1ContractReward","title":"ValV1ContractReward  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1ContractReward = TypedDict(\n    \"ValV1ContractReward\",\n    {\"type\": str, \"uuid\": str, \"amount\": int, \"isHighlighted\": bool},\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1ContractContentChapterLevel","title":"ValV1ContractContentChapterLevel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1ContractContentChapterLevel = TypedDict(\n    \"ValV1ContractContentChapterLevel\",\n    {\n        \"reward\": ValV1ContractReward,\n        \"xp\": int,\n        \"vpCost\": int,\n        \"isPurchasableWithVP\": bool,\n        \"doughCost\": int,\n        \"isPurchasableWithDough\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1ContractContentChapter","title":"ValV1ContractContentChapter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1ContractContentChapter = TypedDict(\n    \"ValV1ContractContentChapter\",\n    {\n        \"isEpilogue\": bool,\n        \"levels\": list[ValV1ContractContentChapterLevel],\n        \"freeRewards\": list[ValV1ContractReward] | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1ContractContent","title":"ValV1ContractContent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1ContractContent = TypedDict(\n    \"ValV1ContractContent\",\n    {\n        \"relationType\": str | None,\n        \"relationUuid\": str | None,\n        \"chapters\": list[ValV1ContractContentChapter],\n        \"premiumRewardScheduleUuid\": str | None,\n        \"premiumVPCost\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Contract","title":"ValV1Contract  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Contract = TypedDict(\n    \"ValV1Contract\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayIcon\": str | None,\n        \"shipIt\": bool,\n        \"freeRewardScheduleUuid\": str,\n        \"content\": ValV1ContractContent,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Currency","title":"ValV1Currency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Currency = TypedDict(\n    \"ValV1Currency\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayNameSingular\": str,\n        \"displayIcon\": str,\n        \"largeIcon\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Event","title":"ValV1Event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Event = TypedDict(\n    \"ValV1Event\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"shortDisplayName\": str,\n        \"startTime\": str,\n        \"endTime\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1GameModeGameRuleBoolOverride","title":"ValV1GameModeGameRuleBoolOverride  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1GameModeGameRuleBoolOverride = TypedDict(\n    \"ValV1GameModeGameRuleBoolOverride\",\n    {\"ruleName\": str, \"state\": bool},\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1GameModeGameFeatureOverride","title":"ValV1GameModeGameFeatureOverride  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1GameModeGameFeatureOverride = TypedDict(\n    \"ValV1GameModeGameFeatureOverride\",\n    {\"featureName\": str, \"state\": bool},\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1GameMode","title":"ValV1GameMode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1GameMode = TypedDict(\n    \"ValV1GameMode\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"duration\": str,\n        \"economyType\": str,\n        \"allowsMatchTimeouts\": bool,\n        \"isTeamVoiceAllowed\": bool,\n        \"isMinimapHidden\": bool,\n        \"orbCount\": int,\n        \"roundsPerHalf\": int,\n        \"teamRoles\": list[str] | None,\n        \"gameFeatureOverrides\": list[ValV1GameModeGameFeatureOverride]\n        | None,\n        \"gameRuleBoolOverrides\": list[\n            ValV1GameModeGameRuleBoolOverride\n        ]\n        | None,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1GearShopData","title":"ValV1GearShopData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1GearShopData = TypedDict(\n    \"ValV1GearShopData\",\n    {\n        \"cost\": int,\n        \"category\": str,\n        \"categoryText\": str,\n        \"gridPosition\": str | None,\n        \"canBeTrashed\": bool,\n        \"image\": str | None,\n        \"newImage\": str | None,\n        \"newImage2\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Gear","title":"ValV1Gear  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Gear = TypedDict(\n    \"ValV1Gear\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"description\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n        \"shopData\": ValV1GearShopData,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1MapCalloutLocation","title":"ValV1MapCalloutLocation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1MapCalloutLocation = TypedDict(\n    \"ValV1MapCalloutLocation\", {\"x\": float, \"y\": float}\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1MapCallout","title":"ValV1MapCallout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1MapCallout = TypedDict(\n    \"ValV1MapCallout\",\n    {\n        \"regionName\": str,\n        \"superRegionName\": str,\n        \"location\": ValV1MapCalloutLocation,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Map","title":"ValV1Map  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Map = TypedDict(\n    \"ValV1Map\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"narrativeDescription\": str,\n        \"tacticalDescription\": str,\n        \"coordinates\": str,\n        \"displayIcon\": str,\n        \"listViewIcon\": str,\n        \"splash\": str,\n        \"assetPath\": str,\n        \"mapUrl\": str,\n        \"xMultiplier\": float,\n        \"yMultiplier\": float,\n        \"xScalarToAdd\": float,\n        \"yScalarToAdd\": float,\n        \"callouts\": list[ValV1MapCallout],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1PlayerCard","title":"ValV1PlayerCard  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1PlayerCard = TypedDict(\n    \"ValV1PlayerCard\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"isHiddenIfNotOwned\": bool,\n        \"themeUuid\": str | None,\n        \"displayIcon\": str,\n        \"smallArt\": str,\n        \"wideArt\": str,\n        \"largeArt\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1PlayerTitle","title":"ValV1PlayerTitle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1PlayerTitle = TypedDict(\n    \"ValV1PlayerTitle\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"titleText\": str,\n        \"isHiddenIfNotOwned\": bool,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Season","title":"ValV1Season  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Season = TypedDict(\n    \"ValV1Season\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"type\": str | None,\n        \"startTime\": str,\n        \"endTime\": str,\n        \"parentUuid\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1SprayLevel","title":"ValV1SprayLevel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1SprayLevel = TypedDict(\n    \"ValV1SprayLevel\",\n    {\n        \"uuid\": str,\n        \"sprayLevel\": int,\n        \"displayName\": str,\n        \"displayIcon\": str,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Spray","title":"ValV1Spray  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Spray = TypedDict(\n    \"ValV1Spray\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"category\": str | None,\n        \"themeUuid\": str | None,\n        \"isNullSpray\": bool,\n        \"hideIfNotOwned\": bool,\n        \"displayIcon\": str,\n        \"fullIcon\": str,\n        \"fullTransparentIcon\": str,\n        \"animationPng\": str | None,\n        \"animationGif\": str | None,\n        \"assetPath\": str,\n        \"levels\": list[ValV1SprayLevel],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Theme","title":"ValV1Theme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Theme = TypedDict(\n    \"ValV1Theme\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayIcon\": str | None,\n        \"storeFeaturedImage\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponSkinLevel","title":"ValV1WeaponSkinLevel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponSkinLevel = TypedDict(\n    \"ValV1WeaponSkinLevel\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"levelItem\": str | None,\n        \"displayIcon\": str | None,\n        \"streamedVideo\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponSkinChroma","title":"ValV1WeaponSkinChroma  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponSkinChroma = TypedDict(\n    \"ValV1WeaponSkinChroma\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"displayIcon\": str | None,\n        \"fullRender\": str,\n        \"swatch\": str | None,\n        \"streamedVideo\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponSkin","title":"ValV1WeaponSkin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponSkin = TypedDict(\n    \"ValV1WeaponSkin\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"themeUuid\": str,\n        \"contentTierUuid\": None | str,\n        \"displayIcon\": str | None,\n        \"wallpaper\": str | None,\n        \"assetPath\": str,\n        \"chromas\": list[ValV1WeaponSkinChroma],\n        \"levels\": list[ValV1WeaponSkinLevel],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponShopDataGridPosition","title":"ValV1WeaponShopDataGridPosition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponShopDataGridPosition = TypedDict(\n    \"ValV1WeaponShopDataGridPosition\", {\"row\": int, \"column\": int}\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponShopData","title":"ValV1WeaponShopData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponShopData = TypedDict(\n    \"ValV1WeaponShopData\",\n    {\n        \"cost\": int,\n        \"category\": str,\n        \"categoryText\": str,\n        \"gridPosition\": ValV1WeaponShopDataGridPosition,\n        \"canBeTrashed\": bool,\n        \"image\": str | None,\n        \"newImage\": str | None,\n        \"newImage2\": str | None,\n        \"assetPath\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponStatsDamageRange","title":"ValV1WeaponStatsDamageRange  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponStatsDamageRange = TypedDict(\n    \"ValV1WeaponStatsDamageRange\",\n    {\n        \"rangeStartMeters\": int,\n        \"rangeEndMeters\": int,\n        \"headDamage\": float,\n        \"bodyDamage\": int,\n        \"legDamage\": float,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponStatsAdsStats","title":"ValV1WeaponStatsAdsStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponStatsAdsStats = TypedDict(\n    \"ValV1WeaponStatsAdsStats\",\n    {\n        \"zoomMultiplier\": float,\n        \"fireRate\": float,\n        \"runSpeedMultiplier\": float,\n        \"burstCount\": int,\n        \"firstBulletAccuracy\": float,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponStatsAltShotgunStats","title":"ValV1WeaponStatsAltShotgunStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponStatsAltShotgunStats = TypedDict(\n    \"ValV1WeaponStatsAltShotgunStats\",\n    {\"shotgunPelletCount\": float, \"burstRate\": float},\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponStatsAirBurstStats","title":"ValV1WeaponStatsAirBurstStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponStatsAirBurstStats = TypedDict(\n    \"ValV1WeaponStatsAirBurstStats\",\n    {\"shotgunPelletCount\": float, \"burstDistance\": float},\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1WeaponStats","title":"ValV1WeaponStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1WeaponStats = TypedDict(\n    \"ValV1WeaponStats\",\n    {\n        \"fireRate\": int,\n        \"magazineSize\": int,\n        \"runSpeedMultiplier\": float,\n        \"equipTimeSeconds\": float,\n        \"reloadTimeSeconds\": int,\n        \"firstBulletAccuracy\": float,\n        \"shotgunPelletCount\": int,\n        \"wallPenetration\": str,\n        \"feature\": str | None,\n        \"fireMode\": str | None,\n        \"altFireType\": str | None,\n        \"adsStats\": ValV1WeaponStatsAdsStats,\n        \"altShotgunStats\": ValV1WeaponStatsAltShotgunStats,\n        \"airBurstStats\": ValV1WeaponStatsAirBurstStats,\n        \"damageRanges\": list[ValV1WeaponStatsDamageRange],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Weapon","title":"ValV1Weapon  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Weapon = TypedDict(\n    \"ValV1Weapon\",\n    {\n        \"uuid\": str,\n        \"displayName\": str,\n        \"category\": str,\n        \"defaultSkinUuid\": str,\n        \"displayIcon\": str,\n        \"killStreamIcon\": str,\n        \"assetPath\": str,\n        \"weaponStats\": ValV1WeaponStats,\n        \"shopData\": ValV1WeaponShopData,\n        \"skins\": list[ValV1WeaponSkin],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/marlon-api-schema/#pulsefire.schemas.MarlonAPISchema.ValV1Version","title":"ValV1Version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValV1Version = TypedDict(\n    \"ValV1Version\",\n    {\n        \"manifestId\": str,\n        \"branch\": str,\n        \"version\": str,\n        \"buildVersion\": str,\n        \"engineVersion\": str,\n        \"riotClientVersion\": str,\n        \"riotClientBuild\": str,\n        \"buildDate\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/","title":"MerakiCDNSchema","text":"<pre><code>from pulsefire.schemas import MerakiCDNSchema\n</code></pre> Source code in <code>pulsefire/schemas.py</code> <pre><code>class MerakiCDNSchema:\n\n    LolChampionModifier = TypedDict(\"LolChampionModifier\", {\n        \"values\": list[float],\n        \"units\": list[str]\n    })\n    LolChampionAbilityEffectLeveling = TypedDict(\"LolChampionAbilityEffectLeveling\", {\n        \"attribute\": str,\n        \"modifiers\": list[LolChampionModifier]\n    })\n    LolChampionAbilityEffect = TypedDict(\"LolChampionAbilityEffect\", {\n        \"description\": str,\n        \"leveling\": list[LolChampionAbilityEffectLeveling]\n    })\n    LolChampionAbilityCost = TypedDict(\"LolChampionAbilityCost\", {\n        \"modifiers\": list[LolChampionModifier],\n    })\n    LolChampionAbilityCooldown = TypedDict(\"LolChampionAbilityCooldown\", {\n        \"modifiers\": list[LolChampionModifier],\n        \"affectedByCdr\": bool\n    })\n    LolChampionAbility = TypedDict(\"LolChampionAbility\", {\n        \"name\": str,\n        \"icon\": str,\n        \"effects\": list[LolChampionAbilityEffect],\n        \"cost\": LolChampionAbilityCost | None,\n        \"cooldown\": LolChampionAbilityCooldown | None,\n        \"targeting\": str,\n        \"affects\": str,\n        \"spellshieldable\": str | None,\n        \"resource\": str | None,\n        \"damageType\": str | None,\n        \"spellEffects\": str | None,\n        \"projectile\": str | None,\n        \"onHitEffects\": str | None,\n        \"occurrence\": str | None,\n        \"notes\": str,\n        \"blurb\": str | None,\n        \"missileSpeed\": str | None,\n        \"rechargeRate\": list[int] | None,\n        \"collisionRadius\": str | None,\n        \"tetherRadius\": str | None,\n        \"onTargetCdStatic\": str | None,\n        \"innerRadius\": str | None,\n        \"speed\": str | None,\n        \"width\": str | None,\n        \"angle\": str | None,\n        \"castTime\": str | None,\n        \"effectRadius\": str | None,\n        \"targetRange\": str | None\n    })\n    LolChampionStat = TypedDict(\"LolChampionStat\", {\n        \"flat\": float,\n        \"percent\": float,\n        \"perLevel\": float,\n        \"percentPerLevel\": float\n    })\n    LolChampionStats = TypedDict(\"LolChampionStats\", {\n        \"health\": LolChampionStat,\n        \"healthRegen\": LolChampionStat,\n        \"mana\": LolChampionStat,\n        \"manaRegen\": LolChampionStat,\n        \"armor\": LolChampionStat,\n        \"magicResistance\": LolChampionStat,\n        \"attackDamage\": LolChampionStat,\n        \"movespeed\": LolChampionStat,\n        \"acquisitionRadius\": LolChampionStat,\n        \"selectionRadius\": LolChampionStat,\n        \"pathingRadius\": LolChampionStat,\n        \"gameplayRadius\": LolChampionStat,\n        \"criticalStrikeDamage\": LolChampionStat,\n        \"criticalStrikeDamageModifier\": LolChampionStat,\n        \"attackSpeed\": LolChampionStat,\n        \"attackSpeedRatio\": LolChampionStat,\n        \"attackCastTime\": LolChampionStat,\n        \"attackTotalTime\": LolChampionStat,\n        \"attackDelayOffset\": LolChampionStat,\n        \"attackRange\": LolChampionStat,\n        \"aramDamageTaken\": LolChampionStat,\n        \"aramDamageDealt\": LolChampionStat,\n        \"aramHealing\": LolChampionStat,\n        \"aramShielding\": LolChampionStat,\n        \"urfDamageTaken\": LolChampionStat,\n        \"urfDamageDealt\": LolChampionStat,\n        \"urfHealing\": LolChampionStat,\n        \"urfShielding\": LolChampionStat,\n        \"aramAbilityHaste\": LolChampionStat,\n        \"aramAttackSpeed\": LolChampionStat,\n        \"aramEnergyRegen\": LolChampionStat,\n        \"aramTenacity\": LolChampionStat,\n    })\n    LolChampionAttributeRatings = TypedDict(\"LolChampionAttributeRatings\", {\n        \"attack\": NotRequired[int],\n        \"damage\": int,\n        \"defense\": NotRequired[int],\n        \"magic\": NotRequired[int],\n        \"toughness\": int,\n        \"control\": int,\n        \"mobility\": int,\n        \"utility\": int,\n        \"abilityReliance\": int,\n        \"difficulty\": int\n    })\n    LolChampionAbilities = TypedDict(\"LolChampionAbilities\", {\n        \"P\": list[LolChampionAbility],\n        \"Q\": list[LolChampionAbility],\n        \"W\": list[LolChampionAbility],\n        \"E\": list[LolChampionAbility],\n        \"R\": list[LolChampionAbility]\n    })\n    LolChampionPrice = TypedDict(\"LolChampionPrice\", {\n        \"blueEssence\": int,\n        \"rp\": int,\n        \"saleRp\": int\n    })\n    LolChampionSkinChromaDescription = TypedDict(\"LolChampionSkinChromaDescription\", {\n        \"description\": str | None,\n        \"region\": str | None\n    })\n    LolChampionSkinChromaRarity = TypedDict(\"LolChampionSkinChromaRarity\", {\n        \"rarity\": int | None,\n        \"region\": str | None\n    })\n    LolChampionSkinChroma = TypedDict(\"LolChampionSkinChroma\", {\n        \"name\": str,\n        \"id\": int,\n        \"chromaPath\": str,\n        \"colors\": list[str],\n        \"descriptions\": list[LolChampionSkinChromaDescription],\n        \"rarities\": list[LolChampionSkinChromaRarity]\n    })\n    LolChampionSkin = TypedDict(\"LolChampionSkin\", {\n        \"name\": str,\n        \"id\": int,\n        \"isBase\": bool,\n        \"availability\": str,\n        \"formatName\": str,\n        \"lootEligible\": bool,\n        \"cost\": int | str,\n        \"sale\": int,\n        \"distribution\": str | None,\n        \"rarity\": str,\n        \"chromas\": list[LolChampionSkinChroma],\n        \"lore\": str,\n        \"release\": str,\n        \"set\": list[str],\n        \"splashPath\": str,\n        \"uncenteredSplashPath\": str,\n        \"tilePath\": str,\n        \"loadScreenPath\": str,\n        \"loadScreenVintagePath\": str | None,\n        \"newEffects\": bool,\n        \"newAnimations\": bool,\n        \"newRecall\": bool,\n        \"newVoice\": bool,\n        \"newQuotes\": bool,\n        \"voiceActor\": list[str],\n        \"splashArtist\": list[str]\n    })\n    LolChampion = TypedDict(\"LolChampion\", {\n        \"id\": int,\n        \"key\": str,\n        \"name\": str,\n        \"title\": str,\n        \"fullName\": str,\n        \"icon\": str,\n        \"resource\": str,\n        \"attackType\": str,\n        \"adaptiveType\": str,\n        \"stats\": LolChampionStats,\n        \"positions\": list[str],\n        \"roles\": list[str],\n        \"attributeRatings\": LolChampionAttributeRatings,\n        \"abilities\": LolChampionAbilities,\n        \"releaseDate\": str,\n        \"releasePatch\": str,\n        \"patchLastChanged\": str,\n        \"price\": LolChampionPrice,\n        \"lore\": str,\n        \"faction\": str,\n        \"skins\": list[LolChampionSkin]\n    })\n    LolItemStat = TypedDict(\"LolItemStat\", {\n        \"flat\": float,\n        \"percent\": float,\n        \"perLevel\": float,\n        \"percentPerLevel\": float,\n        \"percentBase\": float,\n        \"percentBonus\": float\n    })\n    LolItemStats = TypedDict(\"Stats\", {\n        \"abilityPower\": LolItemStat,\n        \"armor\": LolItemStat,\n        \"armorPenetration\": LolItemStat,\n        \"attackDamage\": LolItemStat,\n        \"attackSpeed\": LolItemStat,\n        \"cooldownReduction\": LolItemStat,\n        \"criticalStrikeChance\": LolItemStat,\n        \"criticalStrikeDamage\": LolItemStat,\n        \"goldPer10\": LolItemStat,\n        \"healAndShieldPower\": LolItemStat,\n        \"health\": LolItemStat,\n        \"healthRegen\": LolItemStat,\n        \"lethality\": LolItemStat,\n        \"lifesteal\": LolItemStat,\n        \"magicPenetration\": LolItemStat,\n        \"magicResistance\": LolItemStat,\n        \"mana\": LolItemStat,\n        \"manaRegen\": LolItemStat,\n        \"movespeed\": LolItemStat,\n        \"abilityHaste\": LolItemStat,\n        \"omnivamp\": LolItemStat,\n        \"tenacity\": LolItemStat\n    })\n    LolItemPassive = TypedDict(\"LolItemPassive\", {\n        \"unique\": bool,\n        \"mythic\": bool,\n        \"name\": str,\n        \"effects\": str | None,\n        \"range\": int | None,\n        \"cooldown\": int | None,\n        \"stats\": LolItemStats\n    })\n    LolItemActive = TypedDict(\"LolItemActive\", {\n        \"unique\": bool,\n        \"name\": str,\n        \"effects\": str | None,\n        \"range\": int | None,\n        \"cooldown\": int | None\n    })\n    LolItemShopPrices = TypedDict(\"LolItemShopPrices\", {\n        \"total\": int,\n        \"combined\": int,\n        \"sell\": int\n    })\n    LolItemShop = TypedDict(\"LolItemShop\", {\n        \"prices\": LolItemShopPrices,\n        \"purchasable\": bool,\n        \"tags\": list[str]\n    })\n    LolItem = TypedDict(\"LolItem\", {\n        \"name\": str,\n        \"id\": int,\n        \"tier\": int,\n        \"rank\": list[str],\n        \"buildsFrom\": list[int],\n        \"buildsInto\": list[int],\n        \"specialRecipe\": int,\n        \"noEffects\": bool,\n        \"removed\": bool,\n        \"requiredChampion\": str,\n        \"requiredAlly\": str,\n        \"icon\": str,\n        \"simpleDescription\": str | None,\n        \"nicknames\": list[str],\n        \"passives\": list[LolItemPassive],\n        \"active\": list[LolItemActive],\n        \"stats\": LolItemStats,\n        \"shop\": LolItemShop,\n        \"iconOverlay\": bool\n    })\n    LolPlayRate = TypedDict(\"LolPlayRate\", {\"playRate\": float})\n    LolChampionRate = TypedDict(\"LolChampionRate\", {\n        \"TOP\": LolPlayRate,\n        \"JUNGLE\": LolPlayRate,\n        \"MIDDLE\": LolPlayRate,\n        \"BOTTOM\": LolPlayRate,\n        \"UTILITY\": LolPlayRate,\n    })\n    LolChampionRates = TypedDict(\"LolChampionRates\", {\n        \"data\": dict[str, LolChampionRate],\n        \"patch\": str\n    })\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema-attributes","title":"Attributes","text":""},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionModifier","title":"LolChampionModifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionModifier = TypedDict(\n    \"LolChampionModifier\", {\"values\": list[float], \"units\": list[str]}\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAbilityEffectLeveling","title":"LolChampionAbilityEffectLeveling  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAbilityEffectLeveling = TypedDict(\n    \"LolChampionAbilityEffectLeveling\",\n    {\"attribute\": str, \"modifiers\": list[LolChampionModifier]},\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAbilityEffect","title":"LolChampionAbilityEffect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAbilityEffect = TypedDict(\n    \"LolChampionAbilityEffect\",\n    {\n        \"description\": str,\n        \"leveling\": list[LolChampionAbilityEffectLeveling],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAbilityCost","title":"LolChampionAbilityCost  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAbilityCost = TypedDict(\n    \"LolChampionAbilityCost\", {\"modifiers\": list[LolChampionModifier]}\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAbilityCooldown","title":"LolChampionAbilityCooldown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAbilityCooldown = TypedDict(\n    \"LolChampionAbilityCooldown\",\n    {\"modifiers\": list[LolChampionModifier], \"affectedByCdr\": bool},\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAbility","title":"LolChampionAbility  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAbility = TypedDict(\n    \"LolChampionAbility\",\n    {\n        \"name\": str,\n        \"icon\": str,\n        \"effects\": list[LolChampionAbilityEffect],\n        \"cost\": LolChampionAbilityCost | None,\n        \"cooldown\": LolChampionAbilityCooldown | None,\n        \"targeting\": str,\n        \"affects\": str,\n        \"spellshieldable\": str | None,\n        \"resource\": str | None,\n        \"damageType\": str | None,\n        \"spellEffects\": str | None,\n        \"projectile\": str | None,\n        \"onHitEffects\": str | None,\n        \"occurrence\": str | None,\n        \"notes\": str,\n        \"blurb\": str | None,\n        \"missileSpeed\": str | None,\n        \"rechargeRate\": list[int] | None,\n        \"collisionRadius\": str | None,\n        \"tetherRadius\": str | None,\n        \"onTargetCdStatic\": str | None,\n        \"innerRadius\": str | None,\n        \"speed\": str | None,\n        \"width\": str | None,\n        \"angle\": str | None,\n        \"castTime\": str | None,\n        \"effectRadius\": str | None,\n        \"targetRange\": str | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionStat","title":"LolChampionStat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionStat = TypedDict(\n    \"LolChampionStat\",\n    {\n        \"flat\": float,\n        \"percent\": float,\n        \"perLevel\": float,\n        \"percentPerLevel\": float,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionStats","title":"LolChampionStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionStats = TypedDict(\n    \"LolChampionStats\",\n    {\n        \"health\": LolChampionStat,\n        \"healthRegen\": LolChampionStat,\n        \"mana\": LolChampionStat,\n        \"manaRegen\": LolChampionStat,\n        \"armor\": LolChampionStat,\n        \"magicResistance\": LolChampionStat,\n        \"attackDamage\": LolChampionStat,\n        \"movespeed\": LolChampionStat,\n        \"acquisitionRadius\": LolChampionStat,\n        \"selectionRadius\": LolChampionStat,\n        \"pathingRadius\": LolChampionStat,\n        \"gameplayRadius\": LolChampionStat,\n        \"criticalStrikeDamage\": LolChampionStat,\n        \"criticalStrikeDamageModifier\": LolChampionStat,\n        \"attackSpeed\": LolChampionStat,\n        \"attackSpeedRatio\": LolChampionStat,\n        \"attackCastTime\": LolChampionStat,\n        \"attackTotalTime\": LolChampionStat,\n        \"attackDelayOffset\": LolChampionStat,\n        \"attackRange\": LolChampionStat,\n        \"aramDamageTaken\": LolChampionStat,\n        \"aramDamageDealt\": LolChampionStat,\n        \"aramHealing\": LolChampionStat,\n        \"aramShielding\": LolChampionStat,\n        \"urfDamageTaken\": LolChampionStat,\n        \"urfDamageDealt\": LolChampionStat,\n        \"urfHealing\": LolChampionStat,\n        \"urfShielding\": LolChampionStat,\n        \"aramAbilityHaste\": LolChampionStat,\n        \"aramAttackSpeed\": LolChampionStat,\n        \"aramEnergyRegen\": LolChampionStat,\n        \"aramTenacity\": LolChampionStat,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAttributeRatings","title":"LolChampionAttributeRatings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAttributeRatings = TypedDict(\n    \"LolChampionAttributeRatings\",\n    {\n        \"attack\": NotRequired[int],\n        \"damage\": int,\n        \"defense\": NotRequired[int],\n        \"magic\": NotRequired[int],\n        \"toughness\": int,\n        \"control\": int,\n        \"mobility\": int,\n        \"utility\": int,\n        \"abilityReliance\": int,\n        \"difficulty\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionAbilities","title":"LolChampionAbilities  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionAbilities = TypedDict(\n    \"LolChampionAbilities\",\n    {\n        \"P\": list[LolChampionAbility],\n        \"Q\": list[LolChampionAbility],\n        \"W\": list[LolChampionAbility],\n        \"E\": list[LolChampionAbility],\n        \"R\": list[LolChampionAbility],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionPrice","title":"LolChampionPrice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionPrice = TypedDict(\n    \"LolChampionPrice\", {\"blueEssence\": int, \"rp\": int, \"saleRp\": int}\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionSkinChromaDescription","title":"LolChampionSkinChromaDescription  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionSkinChromaDescription = TypedDict(\n    \"LolChampionSkinChromaDescription\",\n    {\"description\": str | None, \"region\": str | None},\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionSkinChromaRarity","title":"LolChampionSkinChromaRarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionSkinChromaRarity = TypedDict(\n    \"LolChampionSkinChromaRarity\",\n    {\"rarity\": int | None, \"region\": str | None},\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionSkinChroma","title":"LolChampionSkinChroma  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionSkinChroma = TypedDict(\n    \"LolChampionSkinChroma\",\n    {\n        \"name\": str,\n        \"id\": int,\n        \"chromaPath\": str,\n        \"colors\": list[str],\n        \"descriptions\": list[LolChampionSkinChromaDescription],\n        \"rarities\": list[LolChampionSkinChromaRarity],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionSkin","title":"LolChampionSkin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionSkin = TypedDict(\n    \"LolChampionSkin\",\n    {\n        \"name\": str,\n        \"id\": int,\n        \"isBase\": bool,\n        \"availability\": str,\n        \"formatName\": str,\n        \"lootEligible\": bool,\n        \"cost\": int | str,\n        \"sale\": int,\n        \"distribution\": str | None,\n        \"rarity\": str,\n        \"chromas\": list[LolChampionSkinChroma],\n        \"lore\": str,\n        \"release\": str,\n        \"set\": list[str],\n        \"splashPath\": str,\n        \"uncenteredSplashPath\": str,\n        \"tilePath\": str,\n        \"loadScreenPath\": str,\n        \"loadScreenVintagePath\": str | None,\n        \"newEffects\": bool,\n        \"newAnimations\": bool,\n        \"newRecall\": bool,\n        \"newVoice\": bool,\n        \"newQuotes\": bool,\n        \"voiceActor\": list[str],\n        \"splashArtist\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampion","title":"LolChampion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampion = TypedDict(\n    \"LolChampion\",\n    {\n        \"id\": int,\n        \"key\": str,\n        \"name\": str,\n        \"title\": str,\n        \"fullName\": str,\n        \"icon\": str,\n        \"resource\": str,\n        \"attackType\": str,\n        \"adaptiveType\": str,\n        \"stats\": LolChampionStats,\n        \"positions\": list[str],\n        \"roles\": list[str],\n        \"attributeRatings\": LolChampionAttributeRatings,\n        \"abilities\": LolChampionAbilities,\n        \"releaseDate\": str,\n        \"releasePatch\": str,\n        \"patchLastChanged\": str,\n        \"price\": LolChampionPrice,\n        \"lore\": str,\n        \"faction\": str,\n        \"skins\": list[LolChampionSkin],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItemStat","title":"LolItemStat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItemStat = TypedDict(\n    \"LolItemStat\",\n    {\n        \"flat\": float,\n        \"percent\": float,\n        \"perLevel\": float,\n        \"percentPerLevel\": float,\n        \"percentBase\": float,\n        \"percentBonus\": float,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItemStats","title":"LolItemStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItemStats = TypedDict(\n    \"Stats\",\n    {\n        \"abilityPower\": LolItemStat,\n        \"armor\": LolItemStat,\n        \"armorPenetration\": LolItemStat,\n        \"attackDamage\": LolItemStat,\n        \"attackSpeed\": LolItemStat,\n        \"cooldownReduction\": LolItemStat,\n        \"criticalStrikeChance\": LolItemStat,\n        \"criticalStrikeDamage\": LolItemStat,\n        \"goldPer10\": LolItemStat,\n        \"healAndShieldPower\": LolItemStat,\n        \"health\": LolItemStat,\n        \"healthRegen\": LolItemStat,\n        \"lethality\": LolItemStat,\n        \"lifesteal\": LolItemStat,\n        \"magicPenetration\": LolItemStat,\n        \"magicResistance\": LolItemStat,\n        \"mana\": LolItemStat,\n        \"manaRegen\": LolItemStat,\n        \"movespeed\": LolItemStat,\n        \"abilityHaste\": LolItemStat,\n        \"omnivamp\": LolItemStat,\n        \"tenacity\": LolItemStat,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItemPassive","title":"LolItemPassive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItemPassive = TypedDict(\n    \"LolItemPassive\",\n    {\n        \"unique\": bool,\n        \"mythic\": bool,\n        \"name\": str,\n        \"effects\": str | None,\n        \"range\": int | None,\n        \"cooldown\": int | None,\n        \"stats\": LolItemStats,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItemActive","title":"LolItemActive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItemActive = TypedDict(\n    \"LolItemActive\",\n    {\n        \"unique\": bool,\n        \"name\": str,\n        \"effects\": str | None,\n        \"range\": int | None,\n        \"cooldown\": int | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItemShopPrices","title":"LolItemShopPrices  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItemShopPrices = TypedDict(\n    \"LolItemShopPrices\", {\"total\": int, \"combined\": int, \"sell\": int}\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItemShop","title":"LolItemShop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItemShop = TypedDict(\n    \"LolItemShop\",\n    {\n        \"prices\": LolItemShopPrices,\n        \"purchasable\": bool,\n        \"tags\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolItem","title":"LolItem  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolItem = TypedDict(\n    \"LolItem\",\n    {\n        \"name\": str,\n        \"id\": int,\n        \"tier\": int,\n        \"rank\": list[str],\n        \"buildsFrom\": list[int],\n        \"buildsInto\": list[int],\n        \"specialRecipe\": int,\n        \"noEffects\": bool,\n        \"removed\": bool,\n        \"requiredChampion\": str,\n        \"requiredAlly\": str,\n        \"icon\": str,\n        \"simpleDescription\": str | None,\n        \"nicknames\": list[str],\n        \"passives\": list[LolItemPassive],\n        \"active\": list[LolItemActive],\n        \"stats\": LolItemStats,\n        \"shop\": LolItemShop,\n        \"iconOverlay\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolPlayRate","title":"LolPlayRate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolPlayRate = TypedDict('LolPlayRate', {'playRate': float})\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionRate","title":"LolChampionRate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionRate = TypedDict(\n    \"LolChampionRate\",\n    {\n        \"TOP\": LolPlayRate,\n        \"JUNGLE\": LolPlayRate,\n        \"MIDDLE\": LolPlayRate,\n        \"BOTTOM\": LolPlayRate,\n        \"UTILITY\": LolPlayRate,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/meraki-cdn-schema/#pulsefire.schemas.MerakiCDNSchema.LolChampionRates","title":"LolChampionRates  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionRates = TypedDict(\n    \"LolChampionRates\",\n    {\"data\": dict[str, LolChampionRate], \"patch\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/","title":"RiotAPISchema","text":"<pre><code>from pulsefire.schemas import RiotAPISchema\n</code></pre> Source code in <code>pulsefire/schemas.py</code> <pre><code>class RiotAPISchema:\n\n    # Account Types\n\n    AccountV1Account = TypedDict(\"AccountV1Account\", {\n        \"puuid\": str,\n        \"gameName\": str,\n        \"tagLine\": str,\n    })\n    AccountV1ActiveShard = TypedDict(\"AccountV1ActiveShard\", {\n        \"puuid\": str,\n        \"game\": str,\n        \"activeShard\": str,\n    })\n\n    # League of Legends Types\n\n    LolChampionV3Rotation = TypedDict(\"LolChampionV3Rotation\", {\n        \"freeChampionIds\": list[int],\n        \"freeChampionIdsForNewPlayers\": list[int],\n        \"maxNewPlayerLevel\": int\n    })\n    LolChampionV4MasteryMilestoneRewardConfig = TypedDict(\"LolChampionV4MasteryMilestoneRewardConfig\", {\n        \"maximumReward\": int,\n        \"rewardType\": str,\n        \"rewardValue\": str,\n    })\n    LolChampionV4MasteryMilestone = TypedDict(\"LolChampionV4MasteryMilestone\", {\n        \"bonus\": bool,\n        \"requireGradeCounts\": dict[str, int],\n        \"rewardConfig\": NotRequired[LolChampionV4MasteryMilestoneRewardConfig],\n        \"rewardMarks\": int,\n        \"totalGamesRequires\": int,\n    })\n    LolChampionV4Mastery = TypedDict(\"LolChampionV4Mastery\", {\n        \"puuid\": str,\n        \"championId\": int,\n        \"championLevel\": int,\n        \"championPoints\": int,\n        \"lastPlayTime\": int,\n        \"championPointsSinceLastLevel\": int,\n        \"championPointsUntilNextLevel\": int,\n        \"championSeasonMilestone\": int,\n        \"markRequiredForNextLevel\": int,\n        \"milestoneGrades\": NotRequired[list[str]],\n        \"nextSeasonMilestone\": NotRequired[LolChampionV4MasteryMilestone],\n        \"tokensEarned\": int,\n    })\n    LolClashV1Player = TypedDict(\"LolClashV1Player\", {\n        \"summonerId\": str,\n        \"teamId\": str,\n        \"position\": str,\n        \"role\": str,\n    })\n    LolClashV1Team = TypedDict(\"LolClashV1Team\", {\n        \"id\": str,\n        \"tournamentId\": int,\n        \"name\": str,\n        \"iconId\": int,\n        \"tier\": int,\n        \"captain\": str,\n        \"abbreviation\": str,\n        \"players\": list[LolClashV1Player],\n    })\n    LolClashV1TournamentSchedule = TypedDict(\"LolClashV1TournamentSchedule\", {\n        \"id\": int,\n        \"registrationTime\": int,\n        \"startTime\": int,\n        \"cancelled\": bool,\n    })\n    LolClashV1Tournament = TypedDict(\"LolClashV1Tournament\", {\n        \"id\": int,\n        \"themeId\": int,\n        \"nameKey\": str,\n        \"nameKeySecondary\": str,\n        \"schedule\": list[LolClashV1TournamentSchedule]\n    })\n    LolLeagueV4LeagueEntryMiniSeries = TypedDict(\"LolLeagueV4LeagueEntryMiniSeries\", {\n        \"losses\": int,\n        \"progress\": str,\n        \"target\": int,\n        \"wins\": int,\n    })\n    LolLeagueV4LeagueEntry = TypedDict(\"LolLeagueV4LeagueEntry\", {\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"puuid\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n    })\n    LolLeagueV4LeagueFullEntry = TypedDict(\"LolLeagueV4LeagueFullEntry\", {\n        \"leagueId\": str,\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"puuid\": str,\n        \"queueType\": str,\n        \"tier\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n        \"miniSeries\": NotRequired[LolLeagueV4LeagueEntryMiniSeries],\n    })\n    LolLeagueV4League = TypedDict(\"LolLeagueV4League\", {\n        \"tier\": str,\n        \"leagueId\": str,\n        \"queue\": str,\n        \"name\": str,\n        \"entries\": list[LolLeagueV4LeagueEntry]\n    })\n    LolMatchV5MatchMetadata = TypedDict(\"LolMatchV5MatchMetadata\", {\n        \"dataVersion\": str,\n        \"matchId\": str,\n        \"participants\": list[str]\n    })\n    LolMatchV5MatchTeamObjective = TypedDict(\"LolMatchV5MatchTeamObjective\", {\n        \"first\": bool,\n        \"kills\": int\n    })\n    LolMatchV5MatchInfoParticipantChallenges = TypedDict(\"LolMatchV5MatchInfoParticipantChallenges\", {\n        \"12AssistStreakCount\": int,\n        \"abilityUses\": int,\n        \"acesBefore15Minutes\": int,\n        \"alliedJungleMonsterKills\": int,\n        \"baronTakedowns\": int,\n        \"blastConeOppositeOpponentCount\": int,\n        \"bountyGold\": float,\n        \"buffsStolen\": int,\n        \"completeSupportQuestInTime\": int,\n        \"controlWardTimeCoverageInRiverOrEnemyHalf\": float,\n        \"controlWardsPlaced\": int,\n        \"damagePerMinute\": float,\n        \"damageTakenOnTeamPercentage\": float,\n        \"dancedWithRiftHerald\": int,\n        \"deathsByEnemyChamps\": int,\n        \"dodgeSkillShotsSmallWindow\": int,\n        \"doubleAces\": int,\n        \"dragonTakedowns\": int,\n        \"earliestBaron\": float,\n        \"earliestElderDragon\": float,\n        \"earlyLaningPhaseGoldExpAdvantage\": int,\n        \"effectiveHealAndShielding\": float,\n        \"elderDragonKillsWithOpposingSoul\": int,\n        \"elderDragonMultikills\": int,\n        \"enemyChampionImmobilizations\": int,\n        \"enemyJungleMonsterKills\": int,\n        \"epicMonsterKillsNearEnemyJungler\": int,\n        \"epicMonsterKillsWithin30SecondsOfSpawn\": int,\n        \"epicMonsterSteals\": int,\n        \"epicMonsterStolenWithoutSmite\": int,\n        \"firstTurretKilled\": int,\n        \"firstTurretKilledTime\": float,\n        \"flawlessAces\": int,\n        \"fullTeamTakedown\": int,\n        \"gameLength\": float,\n        \"getTakedownsInAllLanesEarlyJungleAsLaner\": int,\n        \"goldPerMinute\": float,\n        \"hadOpenNexus\": int,\n        \"immobilizeAndKillWithAlly\": int,\n        \"initialBuffCount\": int,\n        \"initialCrabCount\": int,\n        \"jungleCsBefore10Minutes\": float,\n        \"junglerTakedownsNearDamagedEpicMonster\": int,\n        \"kTurretsDestroyedBeforePlatesFall\": int,\n        \"kda\": float,\n        \"killAfterHiddenWithAlly\": int,\n        \"killParticipation\": float,\n        \"killedChampTookFullTeamDamageSurvived\": int,\n        \"killingSprees\": int,\n        \"killsNearEnemyTurret\": int,\n        \"killsOnOtherLanesEarlyJungleAsLaner\": int,\n        \"killsOnRecentlyHealedByAramPack\": int,\n        \"killsUnderOwnTurret\": int,\n        \"killsWithHelpFromEpicMonster\": int,\n        \"knockEnemyIntoTeamAndKill\": int,\n        \"landSkillShotsEarlyGame\": int,\n        \"laneMinionsFirst10Minutes\": int,\n        \"laningPhaseGoldExpAdvantage\": int,\n        \"legendaryCount\": int,\n        \"lostAnInhibitor\": int,\n        \"maxCsAdvantageOnLaneOpponent\": float,\n        \"maxKillDeficit\": int,\n        \"maxLevelLeadLaneOpponent\": int,\n        \"mejaisFullStackInTime\": int,\n        \"moreEnemyJungleThanOpponent\": float,\n        \"multiKillOneSpell\": int,\n        \"multiTurretRiftHeraldCount\": int,\n        \"multikills\": int,\n        \"multikillsAfterAggressiveFlash\": int,\n        \"mythicItemUsed\": int,\n        \"outerTurretExecutesBefore10Minutes\": int,\n        \"outnumberedKills\": int,\n        \"outnumberedNexusKill\": int,\n        \"perfectDragonSoulsTaken\": int,\n        \"perfectGame\": int,\n        \"pickKillWithAlly\": int,\n        \"playedChampSelectPosition\": int,\n        \"poroExplosions\": int,\n        \"quickCleanse\": int,\n        \"quickFirstTurret\": int,\n        \"quickSoloKills\": int,\n        \"riftHeraldTakedowns\": int,\n        \"saveAllyFromDeath\": int,\n        \"scuttleCrabKills\": int,\n        \"shortestTimeToAceFromFirstTakedown\": float,\n        \"skillshotsDodged\": int,\n        \"skillshotsHit\": int,\n        \"snowballsHit\": int,\n        \"soloBaronKills\": int,\n        \"soloKills\": int,\n        \"stealthWardsPlaced\": int,\n        \"survivedSingleDigitHpCount\": int,\n        \"survivedThreeImmobilizesInFight\": int,\n        \"takedownOnFirstTurret\": int,\n        \"takedowns\": int,\n        \"takedownsAfterGainingLevelAdvantage\": int,\n        \"takedownsBeforeJungleMinionSpawn\": int,\n        \"takedownsFirstXMinutes\": int,\n        \"takedownsInAlcove\": int,\n        \"takedownsInEnemyFountain\": int,\n        \"teamBaronKills\": int,\n        \"teamDamagePercentage\": float,\n        \"teamElderDragonKills\": int,\n        \"teamRiftHeraldKills\": int,\n        \"tookLargeDamageSurvived\": int,\n        \"turretPlatesTaken\": int,\n        \"turretTakedowns\": int,\n        \"turretsTakenWithRiftHerald\": int,\n        \"twentyMinionsIn3SecondsCount\": int,\n        \"twoWardsOneSweeperCount\": int,\n        \"unseenRecalls\": int,\n        \"visionScoreAdvantageLaneOpponent\": float,\n        \"visionScorePerMinute\": float,\n        \"wardTakedowns\": int,\n        \"wardTakedownsBefore20M\": int,\n        \"wardsGuarded\": int,\n        \"earliestDragonTakedown\": float,\n        \"baronBuffGoldAdvantageOverThreshold\": int,\n        \"teleportTakedowns\": int,\n        \"fastestLegendary\": float,\n        \"highestChampionDamage\": int,\n        \"highestCrowdControlScore\": int,\n        \"junglerKillsEarlyJungle\": int,\n        \"killsOnLanersEarlyJungleAsJungler\": int,\n        \"fasterSupportQuestCompletion\": int,\n        \"highestWardKills\": int,\n        \"soloTurretsLategame\": int,\n        \"thirdInhibitorDestroyedTime\": float,\n        \"HealFromMapSources\": float,\n        \"InfernalScalePickup\": int,\n        \"SWARM_DefeatAatrox\": int,\n        \"SWARM_DefeatBriar\": int,\n        \"SWARM_DefeatMiniBosses\": int,\n        \"SWARM_EvolveWeapon\": int,\n        \"SWARM_Have3Passives\": int,\n        \"SWARM_KillEnemy\": int,\n        \"SWARM_PickupGold\": int,\n        \"SWARM_ReachLevel50\": int,\n        \"SWARM_Survive15Min\": int,\n        \"SWARM_WinWith5EvolvedWeapons\": int,\n        \"fistBumpParticipation\": int,\n        \"legendaryItemUsed\": list[int],\n        \"voidMonsterKill\": int,\n    }, total=False)\n    LolMatchV5MatchInfoParticipantPerksStatPerks = TypedDict(\"LolMatchV5MatchInfoParticipantPerksStatPerks\", {\n        \"defense\": int,\n        \"flex\": int,\n        \"offense\": int\n    })\n    LolMatchV5MatchInfoParticipantPerksStyleSelection = TypedDict(\"LolMatchV5MatchInfoParticipantPerksStyleSelection\", {\n        \"perk\": int,\n        \"var1\": int,\n        \"var2\": int,\n        \"var3\": int\n    })\n    LolMatchV5MatchInfoParticipantPerksStyle = TypedDict(\"LolMatchV5MatchInfoParticipantPerksStyle\", {\n        \"description\": str,\n        \"selections\": list[LolMatchV5MatchInfoParticipantPerksStyleSelection],\n        \"style\": int\n    })\n    LolMatchV5MatchInfoParticipantPerks = TypedDict(\"LolMatchV5MatchInfoParticipantPerks\", {\n        \"statPerks\": LolMatchV5MatchInfoParticipantPerksStatPerks,\n        \"styles\": list[LolMatchV5MatchInfoParticipantPerksStyle]\n    })\n    LolMatchV5MatchInfoParticipantMissions = TypedDict(\"LolMatchV5MatchInfoParticipant\", {\n        \"playerScore0\": float,\n        \"playerScore1\": float,\n        \"playerScore10\": float,\n        \"playerScore11\": float,\n        \"playerScore2\": float,\n        \"playerScore3\": float,\n        \"playerScore4\": float,\n        \"playerScore5\": float,\n        \"playerScore6\": float,\n        \"playerScore7\": float,\n        \"playerScore8\": float,\n        \"playerScore9\": float,\n    })\n    LolMatchV5MatchInfoParticipant = TypedDict(\"LolMatchV5MatchInfoParticipant\", {\n        \"allInPings\": int,\n        \"assistMePings\": int,\n        \"assists\": int,\n        \"baitPings\": NotRequired[int],\n        \"baronKills\": int,\n        \"basicPings\": int,\n        \"bountyLevel\": NotRequired[int],\n        \"challenges\": NotRequired[LolMatchV5MatchInfoParticipantChallenges],\n        \"champExperience\": int,\n        \"champLevel\": int,\n        \"championId\": int,\n        \"championName\": str,\n        \"championTransform\": int,\n        \"commandPings\": int,\n        \"consumablesPurchased\": int,\n        \"damageDealtToBuildings\": int,\n        \"damageDealtToObjectives\": int,\n        \"damageDealtToTurrets\": int,\n        \"damageSelfMitigated\": int,\n        \"dangerPings\": int,\n        \"deaths\": int,\n        \"detectorWardsPlaced\": int,\n        \"doubleKills\": int,\n        \"dragonKills\": int,\n        \"eligibleForProgression\": bool,\n        \"enemyMissingPings\": int,\n        \"enemyVisionPings\": int,\n        \"firstBloodAssist\": bool,\n        \"firstBloodKill\": bool,\n        \"firstTowerAssist\": bool,\n        \"firstTowerKill\": bool,\n        \"gameEndedInEarlySurrender\": bool,\n        \"gameEndedInSurrender\": bool,\n        \"getBackPings\": int,\n        \"goldEarned\": int,\n        \"goldSpent\": int,\n        \"holdPings\": int,\n        \"individualPosition\": str,\n        \"inhibitorKills\": int,\n        \"inhibitorTakedowns\": int,\n        \"inhibitorsLost\": int,\n        \"item0\": int,\n        \"item1\": int,\n        \"item2\": int,\n        \"item3\": int,\n        \"item4\": int,\n        \"item5\": int,\n        \"item6\": int,\n        \"itemsPurchased\": int,\n        \"killingSprees\": int,\n        \"kills\": int,\n        \"lane\": str,\n        \"largestCriticalStrike\": int,\n        \"largestKillingSpree\": int,\n        \"largestMultiKill\": int,\n        \"longestTimeSpentLiving\": int,\n        \"magicDamageDealt\": int,\n        \"magicDamageDealtToChampions\": int,\n        \"magicDamageTaken\": int,\n        \"missions\": LolMatchV5MatchInfoParticipantMissions,\n        \"needVisionPings\": int,\n        \"neutralMinionsKilled\": int,\n        \"nexusKills\": int,\n        \"nexusLost\": int,\n        \"nexusTakedowns\": int,\n        \"objectivesStolen\": int,\n        \"objectivesStolenAssists\": int,\n        \"onMyWayPings\": int,\n        \"participantId\": int,\n        \"pentaKills\": int,\n        \"perks\": LolMatchV5MatchInfoParticipantPerks,\n        \"physicalDamageDealt\": int,\n        \"physicalDamageDealtToChampions\": int,\n        \"physicalDamageTaken\": int,\n        \"placement\": int,\n        \"playerAugment1\": int,\n        \"playerAugment2\": int,\n        \"playerAugment3\": int,\n        \"playerAugment4\": int,\n        \"playerAugment5\": int,\n        \"playerAugment6\": int,\n        \"playerSubteamId\": int,\n        \"PlayerScore0\": NotRequired[float],\n        \"PlayerScore1\": NotRequired[float],\n        \"PlayerScore10\": NotRequired[float],\n        \"PlayerScore11\": NotRequired[float],\n        \"PlayerScore2\": NotRequired[float],\n        \"PlayerScore3\": NotRequired[float],\n        \"PlayerScore4\": NotRequired[float],\n        \"PlayerScore5\": NotRequired[float],\n        \"PlayerScore6\": NotRequired[float],\n        \"PlayerScore7\": NotRequired[float],\n        \"PlayerScore8\": NotRequired[float],\n        \"PlayerScore9\": NotRequired[float],\n        \"profileIcon\": int,\n        \"pushPings\": int,\n        \"puuid\": str,\n        \"quadraKills\": int,\n        \"riotIdTagline\": str,\n        \"riotIdGameName\": str,\n        \"role\": str,\n        \"sightWardsBoughtInGame\": int,\n        \"spell1Casts\": int,\n        \"spell2Casts\": int,\n        \"spell3Casts\": int,\n        \"spell4Casts\": int,\n        \"subteamPlacement\": int,\n        \"summoner1Casts\": int,\n        \"summoner1Id\": int,\n        \"summoner2Casts\": int,\n        \"summoner2Id\": int,\n        \"summonerId\": str,\n        \"summonerLevel\": int,\n        \"summonerName\": NotRequired[str],\n        \"teamEarlySurrendered\": bool,\n        \"teamId\": int,\n        \"teamPosition\": str,\n        \"timeCCingOthers\": int,\n        \"timePlayed\": int,\n        \"totalAllyJungleMinionsKilled\": int,\n        \"totalDamageDealt\": int,\n        \"totalDamageDealtToChampions\": int,\n        \"totalDamageShieldedOnTeammates\": int,\n        \"totalDamageTaken\": int,\n        \"totalEnemyJungleMinionsKilled\": int,\n        \"totalHeal\": int,\n        \"totalHealsOnTeammates\": int,\n        \"totalMinionsKilled\": int,\n        \"totalTimeCCDealt\": int,\n        \"totalTimeSpentDead\": int,\n        \"totalUnitsHealed\": int,\n        \"tripleKills\": int,\n        \"trueDamageDealt\": int,\n        \"trueDamageDealtToChampions\": int,\n        \"trueDamageTaken\": int,\n        \"turretKills\": int,\n        \"turretTakedowns\": int,\n        \"turretsLost\": int,\n        \"unrealKills\": int,\n        \"visionClearedPings\": int,\n        \"visionScore\": int,\n        \"visionWardsBoughtInGame\": int,\n        \"wardsKilled\": int,\n        \"wardsPlaced\": int,\n        \"retreatPings\": NotRequired[int],\n        \"win\": bool\n    })\n    LolMatchV5MatchInfoTeamBan = TypedDict(\"LolMatchV5MatchInfoTeamBan\", {\n        \"championId\": int,\n        \"pickTurn\": int\n    })\n    LolMatchV5MatchInfoTeamObjectives = TypedDict(\"LolMatchV5MatchInfoTeamObjectives\", {\n        \"baron\": LolMatchV5MatchTeamObjective,\n        \"champion\": LolMatchV5MatchTeamObjective,\n        \"dragon\": LolMatchV5MatchTeamObjective,\n        \"atakhan\": NotRequired[LolMatchV5MatchTeamObjective],\n        \"horde\": LolMatchV5MatchTeamObjective,\n        \"inhibitor\": LolMatchV5MatchTeamObjective,\n        \"riftHerald\": LolMatchV5MatchTeamObjective,\n        \"tower\": LolMatchV5MatchTeamObjective\n    })\n    LolMatchV5MatchInfoTeamFeatState = TypedDict(\"LolMatchV5MatchInfoTeamFeatState\", {\n        \"featState\": int\n    })\n    LolMatchV5MatchInfoTeamFeats = TypedDict(\"LolMatchV5MatchInfoTeamFeats\", {\n        'EPIC_MONSTER_KILL': LolMatchV5MatchInfoTeamFeatState,\n        'FIRST_BLOOD': LolMatchV5MatchInfoTeamFeatState,\n        'FIRST_TURRET': LolMatchV5MatchInfoTeamFeatState,\n    })\n    LolMatchV5MatchInfoTeam = TypedDict(\"LolMatchV5MatchInfoTeam\", {\n        \"bans\": list[LolMatchV5MatchInfoTeamBan],\n        \"objectives\": LolMatchV5MatchInfoTeamObjectives,\n        \"teamId\": int,\n        \"win\": bool,\n        \"feats\": NotRequired[LolMatchV5MatchInfoTeamFeats]\n    })\n    LolMatchV5MatchInfo = TypedDict(\"LolMatchV5MatchInfo\", {\n        \"gameCreation\": int,\n        \"gameDuration\": int,\n        \"gameEndTimestamp\": int,\n        \"gameId\": int,\n        \"gameMode\": str,\n        \"gameName\": str,\n        \"gameStartTimestamp\": int,\n        \"gameType\": str,\n        \"gameVersion\": str,\n        \"mapId\": int,\n        \"participants\": list[LolMatchV5MatchInfoParticipant],\n        \"platformId\": str,\n        \"queueId\": int,\n        \"teams\": list[LolMatchV5MatchInfoTeam],\n        \"tournamentCode\": str,\n        \"endOfGameResult\": str\n    })\n    LolMatchV5Match = TypedDict(\"LolMatchV5Match\", {\n        \"metadata\": LolMatchV5MatchMetadata,\n        \"info\": LolMatchV5MatchInfo\n    })\n    LolMatchV5MatchTimelineParticipantFrameChampionStats = TypedDict(\"LolMatchV5MatchTimelineParticipantFrameChampionStats\", {\n        \"abilityHaste\": int,\n        \"abilityPower\": int,\n        \"armor\": int,\n        \"armorPen\": int,\n        \"armorPenPercent\": int,\n        \"attackDamage\": int,\n        \"attackSpeed\": int,\n        \"bonusArmorPenPercent\": int,\n        \"bonusMagicPenPercent\": int,\n        \"ccReduction\": int,\n        \"cooldownReduction\": int,\n        \"health\": int,\n        \"healthMax\": int,\n        \"healthRegen\": int,\n        \"lifesteal\": int,\n        \"magicPen\": int,\n        \"magicPenPercent\": int,\n        \"magicResist\": int,\n        \"movementSpeed\": int,\n        \"omnivamp\": int,\n        \"physicalVamp\": int,\n        \"power\": int,\n        \"powerMax\": int,\n        \"powerRegen\": int,\n        \"spellVamp\": int\n    })\n    LolMatchV5MatchTimelineParticipantFrameDamageStats = TypedDict(\"LolMatchV5MatchTimelineParticipantFrameDamageStats\", {\n        \"magicDamageDone\": int,\n        \"magicDamageDoneToChampions\": int,\n        \"magicDamageTaken\": int,\n        \"physicalDamageDone\": int,\n        \"physicalDamageDoneToChampions\": int,\n        \"physicalDamageTaken\": int,\n        \"totalDamageDone\": int,\n        \"totalDamageDoneToChampions\": int,\n        \"totalDamageTaken\": int,\n        \"trueDamageDone\": int,\n        \"trueDamageDoneToChampions\": int,\n        \"trueDamageTaken\": int\n    })\n    LolMatchV5MatchTimelinePosition = TypedDict(\"LolMatchV5MatchTimelinePosition\", {\n        \"x\": int,\n        \"y\": int\n    })\n    LolMatchV5MatchTimelineParticipantFrame = TypedDict(\"LolMatchV5MatchTimelineParticipantFrame\", {\n        \"championStats\": LolMatchV5MatchTimelineParticipantFrameChampionStats,\n        \"currentGold\": int,\n        \"damageStats\": LolMatchV5MatchTimelineParticipantFrameDamageStats,\n        \"goldPerSecond\": int,\n        \"jungleMinionsKilled\": int,\n        \"level\": int,\n        \"minionsKilled\": int,\n        \"participantId\": int,\n        \"position\": LolMatchV5MatchTimelinePosition,\n        \"timeEnemySpentControlled\": int,\n        \"totalGold\": int,\n        \"xp\": int\n    })\n    LolMatchV5MatchTimelineEventDamage = TypedDict(\"LolMatchV5MatchTimelineEventDamage\", {\n        \"basic\": bool,\n        \"magicDamage\": int,\n        \"name\": str,\n        \"participantId\": int,\n        \"physicalDamage\": int,\n        \"spellName\": str,\n        \"spellSlot\": int,\n        \"trueDamage\": int,\n        \"type\": str\n    })\n    LolMatchV5MatchTimelineMetadata = TypedDict(\"LolMatchV5MatchTimelineMetadata\", {\n        \"dataVersion\": str,\n        \"matchId\": str,\n        \"participants\": list[str]\n    })\n    LolMatchV5MatchTimelineInfoFrameEvent = TypedDict(\"LolMatchV5MatchTimelineInfoFrameEvent\", {\n        \"afterId\": NotRequired[int],\n        \"beforeId\": NotRequired[int],\n        \"goldGain\": NotRequired[int],\n        \"participantId\": NotRequired[int],\n        \"timestamp\": int,\n        \"type\": str,\n        \"creatorId\": NotRequired[int],\n        \"wardType\": NotRequired[str],\n        \"level\": NotRequired[int],\n        \"itemId\": NotRequired[int],\n        \"assistingParticipantIds\": NotRequired[list[int]],\n        \"bounty\": NotRequired[int],\n        \"killStreakLength\": NotRequired[int],\n        \"killerId\": NotRequired[int],\n        \"position\": NotRequired[LolMatchV5MatchTimelinePosition],\n        \"shutdownBounty\": NotRequired[int],\n        \"victimDamageDealt\": NotRequired[list[LolMatchV5MatchTimelineEventDamage]],\n        \"victimDamageReceived\": NotRequired[list[LolMatchV5MatchTimelineEventDamage]],\n        \"victimId\": NotRequired[int],\n        \"levelUpType\": NotRequired[str],\n        \"skillSlot\": NotRequired[int],\n        \"realTimestamp\": NotRequired[int],\n        \"monsterType\": NotRequired[str],\n        \"monsterSubType\": NotRequired[str],\n        \"killerTeamId\": NotRequired[int],\n        \"buildingType\": NotRequired[str],\n        \"laneType\": NotRequired[str],\n        \"teamId\": NotRequired[int],\n    })\n    LolMatchV5MatchTimelineInfoFrame = TypedDict(\"LolMatchV5MatchTimelineInfoFrame\", {\n        \"events\": list[LolMatchV5MatchTimelineInfoFrameEvent],\n        \"participantFrames\": dict[str, LolMatchV5MatchTimelineParticipantFrame],\n        \"timestamp\": int\n    })\n    LolMatchV5MatchTimelineInfoParticipants = TypedDict(\"LolMatchV5MatchTimelineInfoParticipants\", {\n        \"participantId\": int,\n        \"puuid\": str,\n    })\n    LolMatchV5MatchTimelineInfo = TypedDict(\"LolMatchV5MatchTimelineInfo\", {\n        \"frameInterval\": int,\n        \"frames\": list[LolMatchV5MatchTimelineInfoFrame],\n        \"gameId\": int,\n        \"participants\": list[LolMatchV5MatchTimelineInfoParticipants],\n        \"endOfGameResult\": str\n    })\n    LolMatchV5MatchTimeline = TypedDict(\"LolMatchV5MatchTimeline\", {\n        \"metadata\": LolMatchV5MatchTimelineMetadata,\n        \"info\": LolMatchV5MatchTimelineInfo\n    })\n    LolSpectatorV4GameParticipantPerks = TypedDict(\"LolSpectatorV4GameParticipantPerks\", {\n        \"perkIds\": list[int],\n        \"perkStyle\": int,\n        \"perkSubStyle\": int\n    })\n    LolSpectatorV4GameParticipant = TypedDict(\"LolSpectatorV4GameParticipant\", {\n        \"gameCustomizationObjects\": NotRequired[list[str]],\n        \"perks\": NotRequired[LolSpectatorV4GameParticipantPerks],\n        \"puuid\": str,\n        \"summonerId\": str,\n        \"teamId\": int,\n        \"spell1Id\": int,\n        \"spell2Id\": int,\n        \"championId\": int,\n        \"profileIconId\": int,\n        \"summonerName\": NotRequired[str],\n        \"bot\": bool\n    })\n    LolSpectatorV4GameObservers = TypedDict(\"LolSpectatorV4GameObservers\", {\n        \"encryptionKey\": str\n    })\n    LolSpectatorV4Game = TypedDict(\"LolSpectatorV4Game\", {\n        \"gameId\": int,\n        \"mapId\": int,\n        \"gameMode\": str,\n        \"gameType\": str,\n        \"gameQueueConfigId\": int,\n        \"participants\": list[LolSpectatorV4GameParticipant],\n        \"observers\": LolSpectatorV4GameObservers,\n        \"platformId\": str,\n        \"bannedChampions\": list[int],\n        \"gameStartTime\": int,\n        \"gameLength\": int\n    })\n    LolSpectatorV4GameList = TypedDict(\"LolSpectatorV4GameList\", {\n        \"gameList\": list[LolSpectatorV4Game],\n        \"clientRefreshInterval\": int\n    })\n    LolSpectatorV5GameParticipant = TypedDict(\"LolSpectatorV5GameParticipant\", {\n        \"gameCustomizationObjects\": NotRequired[list[str]],\n        \"perks\": NotRequired[LolSpectatorV4GameParticipantPerks],\n        \"puuid\": str,\n        \"summonerId\": str,\n        \"teamId\": int,\n        \"spell1Id\": int,\n        \"spell2Id\": int,\n        \"championId\": int,\n        \"profileIconId\": int,\n        \"riotId\": str,\n        \"bot\": bool,\n    })\n    LolSpectatorV5GameBannedChampion = TypedDict(\"LolSpectatorV4Game\", {\n        \"championId\": int,\n        \"pickTurn\": int,\n        \"teamId\": int,\n    })\n    LolSpectatorV5Game = TypedDict(\"LolSpectatorV5Game\", {\n        \"gameId\": int,\n        \"mapId\": int,\n        \"gameMode\": str,\n        \"gameType\": str,\n        \"gameQueueConfigId\": int,\n        \"participants\": list[LolSpectatorV5GameParticipant],\n        \"observers\": LolSpectatorV4GameObservers,\n        \"platformId\": str,\n        \"bannedChampions\": list[LolSpectatorV5GameBannedChampion],\n        \"gameStartTime\": NotRequired[int],\n        \"gameLength\": int\n    })\n    LolSpectatorV5GameList = TypedDict(\"LolSpectatorV5GameList\", {\n        \"gameList\": list[LolSpectatorV5Game],\n    })\n    LolSummonerV4Summoner = TypedDict(\"SummonerV4Summoner\", {\n        \"id\": str,\n        \"accountId\": str,\n        \"puuid\": str,\n        \"name\": NotRequired[str],\n        \"profileIconId\": int,\n        \"revisionDate\": int,\n        \"summonerLevel\": int\n    })\n\n    # Teamfight Tactics Types\n\n    TftLeagueV1LeagueEntry = TypedDict(\"TftLeagueV1LeagueEntry\", {\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"puuid\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n    })\n    TftLeagueV1LeagueFullEntry = TypedDict(\"TftLeagueV1LeagueFullEntry\", {\n        \"leagueId\": str,\n        \"puuid\": str,\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"queueType\": str,\n        \"tier\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n        \"miniSeries\": NotRequired[LolLeagueV4LeagueEntryMiniSeries],\n    })\n    TftLeagueV1League = TypedDict(\"TftLeagueV1League\", {\n        \"tier\": str,\n        \"leagueId\": str,\n        \"queue\": str,\n        \"name\": str,\n        \"entries\": list[TftLeagueV1LeagueEntry]\n    })\n    TftMatchV1MatchMetadata = TypedDict(\"TftMatchV1MatchMetadata\", {\n        \"data_version\": str,\n        \"match_id\": str,\n        \"participants\": list[str]\n    })\n    TftMatchV1MatchInfoParticipantCompanion = TypedDict(\"TftMatchV1MatchInfoParticipantCompanion\", {\n        \"content_ID\": str,\n        \"item_ID\": int,\n        \"skin_ID\": int,\n        \"species\": str\n    })\n    TftMatchV1MatchInfoParticipantTrait = TypedDict(\"TftMatchV1MatchInfoParticipantTrait\", {\n        \"name\": str,\n        \"num_units\": int,\n        \"style\": int,\n        \"tier_current\": int,\n        \"tier_total\": int\n    })\n    TftMatchV1MatchInfoParticipantUnit = TypedDict(\"TftMatchV1MatchInfoParticipantUnit\", {\n        \"character_id\": str,\n        \"itemNames\": list[str],\n        \"name\": str,\n        \"rarity\": int,\n        \"tier\": int\n    })\n    TftMatchV1MatchInfoParticipantMission = TypedDict(\"TftMatchV1MatchInfoParticipantMission\", {\n        \"Assists\": NotRequired[int],\n        \"DamageDealt\": NotRequired[int],\n        \"DamageDealtToObjectives\": NotRequired[int],\n        \"DamageDealtToTurrets\": NotRequired[int],\n        \"DamageTaken\": NotRequired[int],\n        \"Deaths\": NotRequired[int],\n        \"DoubleKills\": NotRequired[int],\n        \"GoldEarned\": NotRequired[int],\n        \"GoldSpent\": NotRequired[int],\n        \"InhibitorsDestroyed\": NotRequired[int],\n        \"KillingSprees\": NotRequired[int],\n        \"Kills\": NotRequired[int],\n        \"LargestKillingSpree\": NotRequired[int],\n        \"LargestMultiKill\": NotRequired[int],\n        \"MagicDamageDealt\": NotRequired[int],\n        \"MagicDamageDealtToChampions\": NotRequired[int],\n        \"MagicDamageTaken\": NotRequired[int],\n        \"NeutralMinionsKilledTeamJungle\": NotRequired[int],\n        \"PentaKills\": NotRequired[int],\n        \"PhysicalDamageDealt\": NotRequired[int],\n        \"PhysicalDamageDealtToChampions\": NotRequired[int],\n        \"PhysicalDamageTaken\": NotRequired[int],\n        \"PlayerScore0\": NotRequired[int],\n        \"PlayerScore1\": NotRequired[int],\n        \"PlayerScore10\": NotRequired[int],\n        \"PlayerScore11\": NotRequired[int],\n        \"PlayerScore2\": NotRequired[int],\n        \"PlayerScore3\": NotRequired[int],\n        \"PlayerScore4\": NotRequired[int],\n        \"PlayerScore5\": NotRequired[int],\n        \"PlayerScore6\": NotRequired[int],\n        \"PlayerScore9\": NotRequired[int],\n        \"QuadraKills\": NotRequired[int],\n        \"Spell1Casts\": NotRequired[int],\n        \"Spell2Casts\": NotRequired[int],\n        \"Spell3Casts\": NotRequired[int],\n        \"Spell4Casts\": NotRequired[int],\n        \"SummonerSpell1Casts\": NotRequired[int],\n        \"TimeCCOthers\": NotRequired[int],\n        \"TotalDamageDealtToChampions\": NotRequired[int],\n        \"TotalMinionsKilled\": NotRequired[int],\n        \"TripleKills\": NotRequired[int],\n        \"TrueDamageDealt\": NotRequired[int],\n        \"TrueDamageDealtToChampions\": NotRequired[int],\n        \"TrueDamageTaken\": NotRequired[int],\n        \"UnrealKills\": NotRequired[int],\n        \"VisionScore\": NotRequired[int],\n        \"WardsKilled\": NotRequired[int],\n    })\n    TftMatchV1MatchInfoParticipantSkillTree = TypedDict(\"TftMatchV1MatchInfoParticipantSkillTree\", {\n        \"EventSkill_DemotionProtection\": int,\n        \"EventSkill_PlacementDelta\": int,\n    })\n    TftMatchV1MatchInfoParticipant = TypedDict(\"TftMatchV1MatchInfoParticipant\", {\n        \"augments\": NotRequired[list[str]],\n        \"companion\": TftMatchV1MatchInfoParticipantCompanion,\n        \"gold_left\": int,\n        \"last_round\": int,\n        \"level\": int,\n        \"placement\": int,\n        \"players_eliminated\": int,\n        \"puuid\": str,\n        \"time_eliminated\": float,\n        \"total_damage_to_players\": int,\n        \"traits\": list[TftMatchV1MatchInfoParticipantTrait],\n        \"units\": list[TftMatchV1MatchInfoParticipantUnit],\n        \"missions\": TftMatchV1MatchInfoParticipantMission,\n        \"riotIdGameName\": str,\n        \"riotIdTagline\": str,\n        \"skill_tree\": NotRequired[TftMatchV1MatchInfoParticipantSkillTree],\n        \"partner_group_id\": NotRequired[int],\n        \"win\": bool,\n    })\n    TftMatchV1MatchInfo = TypedDict(\"TftMatchV1MatchInfo\", {\n        \"game_datetime\": int,\n        \"game_length\": float,\n        \"game_version\": str,\n        \"participants\": list[TftMatchV1MatchInfoParticipant],\n        \"queue_id\": int,\n        \"tft_game_type\": str,\n        \"tft_set_core_name\": str,\n        \"tft_set_number\": int,\n        \"endOfGameResult\": str,\n        \"gameCreation\": int,\n        \"gameId\": int,\n        \"mapId\": int,\n        \"queueId\": int,\n    })\n    TftMatchV1Match = TypedDict(\"TftMatchV1Match\", {\n        \"metadata\": TftMatchV1MatchMetadata,\n        \"info\": TftMatchV1MatchInfo\n    })\n    TftSummonerV1Summoner = LolSummonerV4Summoner\n\n    # Legends of Runeterra Types\n\n    LorRankedV1LeaderboardPlayer = TypedDict(\"LorRankedV1LeaderboardPlayer\", {\n        \"name\": str,\n        \"rank\": int,\n        \"lp\": float\n    })\n    LorRankedV1Leaderboard = TypedDict(\"LorRankedV1Leaderboard\", {\n        \"players\": list[LorRankedV1LeaderboardPlayer]\n    })\n    LorMatchV1MatchMetadata = TypedDict(\"LorMatchV1MatchMetadata\", {\n        \"data_version\": str,\n        \"match_id\": str,\n        \"participants\": list[str]\n    })\n    LorMatchV1MatchInfoPlayer = TypedDict(\"LorMatchV1MatchInfoPlayer\", {\n        \"puuid\": str,\n        \"deck_id\": str,\n        \"deck_code\": str,\n        \"factions\": list[str],\n        \"game_outcome\": str,\n        \"order_of_play\": int\n    })\n    LorMatchV1MatchInfo = TypedDict(\"LorMatchV1MatchInfo\", {\n        \"game_format\": str,\n        \"game_mode\": str,\n        \"game_type\": str,\n        \"game_start_time_utc\": str,\n        \"game_version\": str,\n        \"players\": list[LorMatchV1MatchInfoPlayer],\n        \"total_turn_count\": int\n    })\n    LorMatchV1Match = TypedDict(\"LorMatchV1Match\", {\n        \"metadata\": LorMatchV1MatchMetadata,\n        \"info\": LorMatchV1MatchInfo\n    })\n\n    # Valorant Types\n\n    ValContentV1ContentsAssetLocalizedNames = TypedDict(\"ValContentV1ContentsAssetLocalizedNames\", {\n        \"ar-AE\": str,\n        \"de-DE\": str,\n        \"en-US\": str,\n        \"es-ES\": str,\n        \"es-MX\": str,\n        \"fr-FR\": str,\n        \"id-ID\": str,\n        \"it-IT\": str,\n        \"ja-JP\": str,\n        \"ko-KR\": str,\n        \"pl-PL\": str,\n        \"pt-BR\": str,\n        \"ru-RU\": str,\n        \"th-TH\": str,\n        \"tr-TR\": str,\n        \"vi-VN\": str,\n        \"zh-CN\": str,\n        \"zh-TW\": str,\n    })\n    ValContentV1ContentsAsset = TypedDict(\"ValContentV1ContentsAsset\", {\n        \"name\": str,\n        \"id\": str,\n        \"localizedNames\": NotRequired[ValContentV1ContentsAssetLocalizedNames],\n        \"assetName\": str,\n        \"assetPath\": NotRequired[str]\n    })\n    ValContentV1ContentsAct = TypedDict(\"ValContentV1ContentsAct\", {\n        \"id\": str,\n        \"localizedNames\": NotRequired[ValContentV1ContentsAssetLocalizedNames],\n        \"parentId\": str,\n        \"type\": str,\n        \"name\": str,\n        \"isActive\": bool\n    })\n    ValContentV1Contents = TypedDict(\"ValContentV1Contents\", {\n        \"version\": str,\n        \"characters\": list[ValContentV1ContentsAsset],\n        \"maps\": list[ValContentV1ContentsAsset],\n        \"chromas\": list[ValContentV1ContentsAsset],\n        \"skins\": list[ValContentV1ContentsAsset],\n        \"skinLevels\": list[ValContentV1ContentsAsset],\n        \"equips\": list[ValContentV1ContentsAsset],\n        \"gameModes\": list[ValContentV1ContentsAsset],\n        \"totems\": list[ValContentV1ContentsAsset],\n        \"sprays\": list[ValContentV1ContentsAsset],\n        \"sprayLevels\": list[ValContentV1ContentsAsset],\n        \"charms\": list[ValContentV1ContentsAsset],\n        \"charmLevels\": list[ValContentV1ContentsAsset],\n        \"playerCards\": list[ValContentV1ContentsAsset],\n        \"playerTitles\": list[ValContentV1ContentsAsset],\n        \"acts\": list[ValContentV1ContentsAct],\n        \"ceremonies\": list[ValContentV1ContentsAsset]\n    })\n\n    ValRankedV1LeaderboardTierDetail = TypedDict(\"ValRankedV1LeaderboardTierDetail\", {\n        \"rankedRatingThreshold\": int,\n        \"startingPage\": int,\n        \"startingIndex\": int\n    })\n    ValRankedV1LeaderboardPlayer = TypedDict(\"ValRankedV1LeaderboardPlayer\", {\n        \"puuid\": str,\n        \"gameName\": str,\n        \"tagLine\": str,\n        \"leaderboardRank\": int,\n        \"rankedRating\": int,\n        \"numberOfWins\": int,\n        \"competitiveTier\": int\n    })\n    ValRankedV1LeaderboardTierDetails = TypedDict(\"ValRankedV1LeaderboardTierDetails\", {\n        \"24\": ValRankedV1LeaderboardTierDetail,\n        \"25\": ValRankedV1LeaderboardTierDetail,\n        \"26\": ValRankedV1LeaderboardTierDetail,\n        \"27\": ValRankedV1LeaderboardTierDetail\n    })\n    ValRankedV1Leaderboard = TypedDict(\"ValRankedV1Leaderboard\", {\n        \"actId\": str,\n        \"players\": list[ValRankedV1LeaderboardPlayer],\n        \"totalPlayers\": int,\n        \"immortalStartingPage\": int,\n        \"immortalStartingIndex\": int,\n        \"topTierRRThreshold\": int,\n        \"tierDetails\": ValRankedV1LeaderboardTierDetails,\n        \"startIndex\": int,\n        \"query\": str,\n        \"shard\": str\n    })\n    ValMatchV1MatchLocation = TypedDict(\"ValMatchV1MatchLocation\", {\n        \"x\": float,\n        \"y\": float\n    })\n    ValMatchV1MatchPlayerLocation = TypedDict(\"ValMatchV1MatchPlayerLocation\", {\n        \"puuid\": str,\n        \"viewRadians\": float,\n        \"location\": ValMatchV1MatchLocation\n    })\n    ValMatchV1MatchInfo = TypedDict(\"ValMatchV1MatchInfo\", {\n        \"matchId\": str,\n        \"mapId\": str,\n        \"gameVersion\": str,\n        \"gameLengthMillis\": int,\n        \"region\": str,\n        \"gameStartMillis\": int,\n        \"provisioningFlowId\": str,\n        \"isCompleted\": bool,\n        \"customGameName\": str,\n        \"queueId\": str,\n        \"gameMode\": str,\n        \"isRanked\": bool,\n        \"premierMatchInfo\": dict,\n        \"seasonId\": str\n    })\n    ValMatchV1MatchPlayerStatsAbilityCasts = TypedDict(\"ValMatchV1MatchPlayerStatsAbilityCasts\", {\n        \"grenadeCasts\": int,\n        \"ability1Casts\": int,\n        \"ability2Casts\": int,\n        \"ultimateCasts\": int\n    })\n    ValMatchV1MatchPlayerStats = TypedDict(\"ValMatchV1MatchPlayerStats\", {\n        \"score\": int,\n        \"roundsPlayed\": int,\n        \"kills\": int,\n        \"deaths\": int,\n        \"assists\": int,\n        \"playtimeMillis\": int,\n        \"abilityCasts\": ValMatchV1MatchPlayerStatsAbilityCasts | None\n    })\n    ValMatchV1MatchPlayer = TypedDict(\"ValMatchV1MatchPlayer\", {\n        \"puuid\": str,\n        \"gameName\": str,\n        \"tagLine\": str,\n        \"teamId\": str,\n        \"partyId\": str,\n        \"characterId\": str,\n        \"stats\": ValMatchV1MatchPlayerStats,\n        \"competitiveTier\": int,\n        \"isObserver\": bool,\n        \"playerCard\": str,\n        \"playerTitle\": str,\n        \"accountLevel\": int\n    })\n    ValMatchV1MatchTeam = TypedDict(\"ValMatchV1MatchTeam\", {\n        \"teamId\": str,\n        \"won\": bool,\n        \"roundsPlayed\": int,\n        \"roundsWon\": int,\n        \"numPoints\": int\n    })\n    ValMatchV1MatchRoundResultPlayerStatFinishingDamage = TypedDict(\"ValMatchV1MatchRoundResultPlayerStatFinishingDamage\", {\n        \"damageType\": str,\n        \"damageItem\": str,\n        \"isSecondaryFireMode\": bool\n    })\n    ValMatchV1MatchRoundResultPlayerStatKill = TypedDict(\"ValMatchV1MatchRoundResultPlayerStatKill\", {\n        \"timeSinceGameStartMillis\": int,\n        \"timeSinceRoundStartMillis\": int,\n        \"killer\": str,\n        \"victim\": str,\n        \"victimLocation\": ValMatchV1MatchLocation,\n        \"assistants\": list[str],\n        \"playerLocations\": list[ValMatchV1MatchPlayerLocation],\n        \"finishingDamage\": ValMatchV1MatchRoundResultPlayerStatFinishingDamage\n    })\n    ValMatchV1MatchRoundResultPlayerStatDamage = TypedDict(\"ValMatchV1MatchRoundResultPlayerStatDamage\", {\n        \"receiver\": str,\n        \"damage\": int,\n        \"legshots\": int,\n        \"bodyshots\": int,\n        \"headshots\": int\n    })\n    ValMatchV1MatchRoundResultPlayerStatEconomy = TypedDict(\"ValMatchV1MatchRoundResultPlayerStatEconomy\", {\n        \"loadoutValue\": int,\n        \"weapon\": str,\n        \"armor\": str,\n        \"remaining\": int,\n        \"spent\": int\n    })\n    ValMatchV1MatchRoundResultPlayerStatAbility = TypedDict(\"ValMatchV1MatchRoundResultPlayerStatAbility\", {\n        \"grenadeEffects\": str | None,\n        \"ability1Effects\": str | None,\n        \"ability2Effects\": str | None,\n        \"ultimateEffects\": str | None\n    })\n    ValMatchV1MatchRoundResultPlayerStat = TypedDict(\"ValMatchV1MatchRoundResultPlayerStat\", {\n        \"puuid\": str,\n        \"kills\": list[ValMatchV1MatchRoundResultPlayerStatKill],\n        \"damage\": list[ValMatchV1MatchRoundResultPlayerStatDamage],\n        \"score\": int,\n        \"economy\": ValMatchV1MatchRoundResultPlayerStatEconomy,\n        \"ability\": ValMatchV1MatchRoundResultPlayerStatAbility\n    })\n    ValMatchV1MatchRoundResult = TypedDict(\"ValMatchV1MatchRoundResult\", {\n        \"roundNum\": int,\n        \"roundResult\": str,\n        \"roundCeremony\": str,\n        \"winningTeam\": str,\n        \"winningTeamRole\": str,\n        \"bombPlanter\": str | None,\n        \"bombDefuser\": str | None,\n        \"plantRoundTime\": int,\n        \"plantPlayerLocations\": list[ValMatchV1MatchPlayerLocation] | None,\n        \"plantLocation\": ValMatchV1MatchLocation,\n        \"plantSite\": str,\n        \"defuseRoundTime\": int,\n        \"defusePlayerLocations\": list[ValMatchV1MatchPlayerLocation] | None,\n        \"defuseLocation\": ValMatchV1MatchLocation,\n        \"playerStats\": list[ValMatchV1MatchRoundResultPlayerStat],\n        \"roundResultCode\": str\n    })\n    ValMatchV1Match = TypedDict(\"ValMatchV1Match\", {\n        \"matchInfo\": ValMatchV1MatchInfo,\n        \"players\": list[ValMatchV1MatchPlayer],\n        \"coaches\": list[str],\n        \"teams\": list[ValMatchV1MatchTeam],\n        \"roundResults\": list[ValMatchV1MatchRoundResult]\n    })\n    ValMatchV1MatchlistHistory = TypedDict(\"ValMatchV1MatchlistHistory\", {\n        \"matchId\": str,\n        \"gameStartTimeMillis\": int,\n        \"queueId\": str\n    })\n    ValMatchV1Matchlist = TypedDict(\"ValMatchV1Matchlist\", {\n        \"puuid\": str,\n        \"history\": list[ValMatchV1MatchlistHistory]\n    })\n    ValMatchV1RecentMatches = TypedDict(\"ValMatchV1RecentMatches\", {\n        \"currentTime\": int,\n        \"matchIds\": list[str]\n    })\n\n    # Status Types\n\n    StatusV1PlatformDataLocaleContent = TypedDict(\"StatusV1PlatformDataLocaleContent\", {\n        \"locale\": str,\n        \"content\": str\n    })\n    StatusV1PlatformDataEntryUpdate = TypedDict(\"StatusV1PlatformDataEntryUpdate\", {\n        \"id\": int,\n        \"created_at\": str,\n        \"updated_at\": str,\n        \"publish\": bool,\n        \"author\": str,\n        \"translations\": list[StatusV1PlatformDataLocaleContent],\n        \"publish_locations\": list[str]\n    })\n    StatusV1PlatformDataEntry = TypedDict(\"StatusV1PlatformDataEntry\", {\n        \"id\": int,\n        \"created_at\": str,\n        \"updated_at\": str | None,\n        \"archive_at\": str | None,\n        \"titles\": list[StatusV1PlatformDataLocaleContent],\n        \"updates\": list[StatusV1PlatformDataEntryUpdate],\n        \"platforms\": list[str],\n        \"maintenance_status\": str | None,\n        \"incident_severity\": str | None\n    })\n    StatusV1PlatformData = TypedDict(\"StatusV4PlatformData\", {\n        \"id\": str,\n        \"name\": str,\n        \"locales\": list[str],\n        \"maintenances\": list[StatusV1PlatformDataEntry],\n        \"incidents\": list[StatusV1PlatformDataEntry]\n    })\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema-attributes","title":"Attributes","text":""},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.AccountV1Account","title":"AccountV1Account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AccountV1Account = TypedDict(\n    \"AccountV1Account\",\n    {\"puuid\": str, \"gameName\": str, \"tagLine\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.AccountV1ActiveShard","title":"AccountV1ActiveShard  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AccountV1ActiveShard = TypedDict(\n    \"AccountV1ActiveShard\",\n    {\"puuid\": str, \"game\": str, \"activeShard\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolChampionV3Rotation","title":"LolChampionV3Rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionV3Rotation = TypedDict(\n    \"LolChampionV3Rotation\",\n    {\n        \"freeChampionIds\": list[int],\n        \"freeChampionIdsForNewPlayers\": list[int],\n        \"maxNewPlayerLevel\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolChampionV4MasteryMilestoneRewardConfig","title":"LolChampionV4MasteryMilestoneRewardConfig  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionV4MasteryMilestoneRewardConfig = TypedDict(\n    \"LolChampionV4MasteryMilestoneRewardConfig\",\n    {\"maximumReward\": int, \"rewardType\": str, \"rewardValue\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolChampionV4MasteryMilestone","title":"LolChampionV4MasteryMilestone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionV4MasteryMilestone = TypedDict(\n    \"LolChampionV4MasteryMilestone\",\n    {\n        \"bonus\": bool,\n        \"requireGradeCounts\": dict[str, int],\n        \"rewardConfig\": NotRequired[\n            LolChampionV4MasteryMilestoneRewardConfig\n        ],\n        \"rewardMarks\": int,\n        \"totalGamesRequires\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolChampionV4Mastery","title":"LolChampionV4Mastery  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolChampionV4Mastery = TypedDict(\n    \"LolChampionV4Mastery\",\n    {\n        \"puuid\": str,\n        \"championId\": int,\n        \"championLevel\": int,\n        \"championPoints\": int,\n        \"lastPlayTime\": int,\n        \"championPointsSinceLastLevel\": int,\n        \"championPointsUntilNextLevel\": int,\n        \"championSeasonMilestone\": int,\n        \"markRequiredForNextLevel\": int,\n        \"milestoneGrades\": NotRequired[list[str]],\n        \"nextSeasonMilestone\": NotRequired[\n            LolChampionV4MasteryMilestone\n        ],\n        \"tokensEarned\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolClashV1Player","title":"LolClashV1Player  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolClashV1Player = TypedDict(\n    \"LolClashV1Player\",\n    {\"summonerId\": str, \"teamId\": str, \"position\": str, \"role\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolClashV1Team","title":"LolClashV1Team  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolClashV1Team = TypedDict(\n    \"LolClashV1Team\",\n    {\n        \"id\": str,\n        \"tournamentId\": int,\n        \"name\": str,\n        \"iconId\": int,\n        \"tier\": int,\n        \"captain\": str,\n        \"abbreviation\": str,\n        \"players\": list[LolClashV1Player],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolClashV1TournamentSchedule","title":"LolClashV1TournamentSchedule  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolClashV1TournamentSchedule = TypedDict(\n    \"LolClashV1TournamentSchedule\",\n    {\n        \"id\": int,\n        \"registrationTime\": int,\n        \"startTime\": int,\n        \"cancelled\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolClashV1Tournament","title":"LolClashV1Tournament  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolClashV1Tournament = TypedDict(\n    \"LolClashV1Tournament\",\n    {\n        \"id\": int,\n        \"themeId\": int,\n        \"nameKey\": str,\n        \"nameKeySecondary\": str,\n        \"schedule\": list[LolClashV1TournamentSchedule],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolLeagueV4LeagueEntryMiniSeries","title":"LolLeagueV4LeagueEntryMiniSeries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolLeagueV4LeagueEntryMiniSeries = TypedDict(\n    \"LolLeagueV4LeagueEntryMiniSeries\",\n    {\"losses\": int, \"progress\": str, \"target\": int, \"wins\": int},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolLeagueV4LeagueEntry","title":"LolLeagueV4LeagueEntry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolLeagueV4LeagueEntry = TypedDict(\n    \"LolLeagueV4LeagueEntry\",\n    {\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"puuid\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolLeagueV4LeagueFullEntry","title":"LolLeagueV4LeagueFullEntry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolLeagueV4LeagueFullEntry = TypedDict(\n    \"LolLeagueV4LeagueFullEntry\",\n    {\n        \"leagueId\": str,\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"puuid\": str,\n        \"queueType\": str,\n        \"tier\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n        \"miniSeries\": NotRequired[LolLeagueV4LeagueEntryMiniSeries],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolLeagueV4League","title":"LolLeagueV4League  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolLeagueV4League = TypedDict(\n    \"LolLeagueV4League\",\n    {\n        \"tier\": str,\n        \"leagueId\": str,\n        \"queue\": str,\n        \"name\": str,\n        \"entries\": list[LolLeagueV4LeagueEntry],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchMetadata","title":"LolMatchV5MatchMetadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchMetadata = TypedDict(\n    \"LolMatchV5MatchMetadata\",\n    {\"dataVersion\": str, \"matchId\": str, \"participants\": list[str]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTeamObjective","title":"LolMatchV5MatchTeamObjective  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTeamObjective = TypedDict(\n    \"LolMatchV5MatchTeamObjective\", {\"first\": bool, \"kills\": int}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipantChallenges","title":"LolMatchV5MatchInfoParticipantChallenges  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipantChallenges = TypedDict(\n    \"LolMatchV5MatchInfoParticipantChallenges\",\n    {\n        \"12AssistStreakCount\": int,\n        \"abilityUses\": int,\n        \"acesBefore15Minutes\": int,\n        \"alliedJungleMonsterKills\": int,\n        \"baronTakedowns\": int,\n        \"blastConeOppositeOpponentCount\": int,\n        \"bountyGold\": float,\n        \"buffsStolen\": int,\n        \"completeSupportQuestInTime\": int,\n        \"controlWardTimeCoverageInRiverOrEnemyHalf\": float,\n        \"controlWardsPlaced\": int,\n        \"damagePerMinute\": float,\n        \"damageTakenOnTeamPercentage\": float,\n        \"dancedWithRiftHerald\": int,\n        \"deathsByEnemyChamps\": int,\n        \"dodgeSkillShotsSmallWindow\": int,\n        \"doubleAces\": int,\n        \"dragonTakedowns\": int,\n        \"earliestBaron\": float,\n        \"earliestElderDragon\": float,\n        \"earlyLaningPhaseGoldExpAdvantage\": int,\n        \"effectiveHealAndShielding\": float,\n        \"elderDragonKillsWithOpposingSoul\": int,\n        \"elderDragonMultikills\": int,\n        \"enemyChampionImmobilizations\": int,\n        \"enemyJungleMonsterKills\": int,\n        \"epicMonsterKillsNearEnemyJungler\": int,\n        \"epicMonsterKillsWithin30SecondsOfSpawn\": int,\n        \"epicMonsterSteals\": int,\n        \"epicMonsterStolenWithoutSmite\": int,\n        \"firstTurretKilled\": int,\n        \"firstTurretKilledTime\": float,\n        \"flawlessAces\": int,\n        \"fullTeamTakedown\": int,\n        \"gameLength\": float,\n        \"getTakedownsInAllLanesEarlyJungleAsLaner\": int,\n        \"goldPerMinute\": float,\n        \"hadOpenNexus\": int,\n        \"immobilizeAndKillWithAlly\": int,\n        \"initialBuffCount\": int,\n        \"initialCrabCount\": int,\n        \"jungleCsBefore10Minutes\": float,\n        \"junglerTakedownsNearDamagedEpicMonster\": int,\n        \"kTurretsDestroyedBeforePlatesFall\": int,\n        \"kda\": float,\n        \"killAfterHiddenWithAlly\": int,\n        \"killParticipation\": float,\n        \"killedChampTookFullTeamDamageSurvived\": int,\n        \"killingSprees\": int,\n        \"killsNearEnemyTurret\": int,\n        \"killsOnOtherLanesEarlyJungleAsLaner\": int,\n        \"killsOnRecentlyHealedByAramPack\": int,\n        \"killsUnderOwnTurret\": int,\n        \"killsWithHelpFromEpicMonster\": int,\n        \"knockEnemyIntoTeamAndKill\": int,\n        \"landSkillShotsEarlyGame\": int,\n        \"laneMinionsFirst10Minutes\": int,\n        \"laningPhaseGoldExpAdvantage\": int,\n        \"legendaryCount\": int,\n        \"lostAnInhibitor\": int,\n        \"maxCsAdvantageOnLaneOpponent\": float,\n        \"maxKillDeficit\": int,\n        \"maxLevelLeadLaneOpponent\": int,\n        \"mejaisFullStackInTime\": int,\n        \"moreEnemyJungleThanOpponent\": float,\n        \"multiKillOneSpell\": int,\n        \"multiTurretRiftHeraldCount\": int,\n        \"multikills\": int,\n        \"multikillsAfterAggressiveFlash\": int,\n        \"mythicItemUsed\": int,\n        \"outerTurretExecutesBefore10Minutes\": int,\n        \"outnumberedKills\": int,\n        \"outnumberedNexusKill\": int,\n        \"perfectDragonSoulsTaken\": int,\n        \"perfectGame\": int,\n        \"pickKillWithAlly\": int,\n        \"playedChampSelectPosition\": int,\n        \"poroExplosions\": int,\n        \"quickCleanse\": int,\n        \"quickFirstTurret\": int,\n        \"quickSoloKills\": int,\n        \"riftHeraldTakedowns\": int,\n        \"saveAllyFromDeath\": int,\n        \"scuttleCrabKills\": int,\n        \"shortestTimeToAceFromFirstTakedown\": float,\n        \"skillshotsDodged\": int,\n        \"skillshotsHit\": int,\n        \"snowballsHit\": int,\n        \"soloBaronKills\": int,\n        \"soloKills\": int,\n        \"stealthWardsPlaced\": int,\n        \"survivedSingleDigitHpCount\": int,\n        \"survivedThreeImmobilizesInFight\": int,\n        \"takedownOnFirstTurret\": int,\n        \"takedowns\": int,\n        \"takedownsAfterGainingLevelAdvantage\": int,\n        \"takedownsBeforeJungleMinionSpawn\": int,\n        \"takedownsFirstXMinutes\": int,\n        \"takedownsInAlcove\": int,\n        \"takedownsInEnemyFountain\": int,\n        \"teamBaronKills\": int,\n        \"teamDamagePercentage\": float,\n        \"teamElderDragonKills\": int,\n        \"teamRiftHeraldKills\": int,\n        \"tookLargeDamageSurvived\": int,\n        \"turretPlatesTaken\": int,\n        \"turretTakedowns\": int,\n        \"turretsTakenWithRiftHerald\": int,\n        \"twentyMinionsIn3SecondsCount\": int,\n        \"twoWardsOneSweeperCount\": int,\n        \"unseenRecalls\": int,\n        \"visionScoreAdvantageLaneOpponent\": float,\n        \"visionScorePerMinute\": float,\n        \"wardTakedowns\": int,\n        \"wardTakedownsBefore20M\": int,\n        \"wardsGuarded\": int,\n        \"earliestDragonTakedown\": float,\n        \"baronBuffGoldAdvantageOverThreshold\": int,\n        \"teleportTakedowns\": int,\n        \"fastestLegendary\": float,\n        \"highestChampionDamage\": int,\n        \"highestCrowdControlScore\": int,\n        \"junglerKillsEarlyJungle\": int,\n        \"killsOnLanersEarlyJungleAsJungler\": int,\n        \"fasterSupportQuestCompletion\": int,\n        \"highestWardKills\": int,\n        \"soloTurretsLategame\": int,\n        \"thirdInhibitorDestroyedTime\": float,\n        \"HealFromMapSources\": float,\n        \"InfernalScalePickup\": int,\n        \"SWARM_DefeatAatrox\": int,\n        \"SWARM_DefeatBriar\": int,\n        \"SWARM_DefeatMiniBosses\": int,\n        \"SWARM_EvolveWeapon\": int,\n        \"SWARM_Have3Passives\": int,\n        \"SWARM_KillEnemy\": int,\n        \"SWARM_PickupGold\": int,\n        \"SWARM_ReachLevel50\": int,\n        \"SWARM_Survive15Min\": int,\n        \"SWARM_WinWith5EvolvedWeapons\": int,\n        \"fistBumpParticipation\": int,\n        \"legendaryItemUsed\": list[int],\n        \"voidMonsterKill\": int,\n    },\n    total=False,\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipantPerksStatPerks","title":"LolMatchV5MatchInfoParticipantPerksStatPerks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipantPerksStatPerks = TypedDict(\n    \"LolMatchV5MatchInfoParticipantPerksStatPerks\",\n    {\"defense\": int, \"flex\": int, \"offense\": int},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipantPerksStyleSelection","title":"LolMatchV5MatchInfoParticipantPerksStyleSelection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipantPerksStyleSelection = TypedDict(\n    \"LolMatchV5MatchInfoParticipantPerksStyleSelection\",\n    {\"perk\": int, \"var1\": int, \"var2\": int, \"var3\": int},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipantPerksStyle","title":"LolMatchV5MatchInfoParticipantPerksStyle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipantPerksStyle = TypedDict(\n    \"LolMatchV5MatchInfoParticipantPerksStyle\",\n    {\n        \"description\": str,\n        \"selections\": list[\n            LolMatchV5MatchInfoParticipantPerksStyleSelection\n        ],\n        \"style\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipantPerks","title":"LolMatchV5MatchInfoParticipantPerks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipantPerks = TypedDict(\n    \"LolMatchV5MatchInfoParticipantPerks\",\n    {\n        \"statPerks\": LolMatchV5MatchInfoParticipantPerksStatPerks,\n        \"styles\": list[LolMatchV5MatchInfoParticipantPerksStyle],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipantMissions","title":"LolMatchV5MatchInfoParticipantMissions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipantMissions = TypedDict(\n    \"LolMatchV5MatchInfoParticipant\",\n    {\n        \"playerScore0\": float,\n        \"playerScore1\": float,\n        \"playerScore10\": float,\n        \"playerScore11\": float,\n        \"playerScore2\": float,\n        \"playerScore3\": float,\n        \"playerScore4\": float,\n        \"playerScore5\": float,\n        \"playerScore6\": float,\n        \"playerScore7\": float,\n        \"playerScore8\": float,\n        \"playerScore9\": float,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoParticipant","title":"LolMatchV5MatchInfoParticipant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoParticipant = TypedDict(\n    \"LolMatchV5MatchInfoParticipant\",\n    {\n        \"allInPings\": int,\n        \"assistMePings\": int,\n        \"assists\": int,\n        \"baitPings\": NotRequired[int],\n        \"baronKills\": int,\n        \"basicPings\": int,\n        \"bountyLevel\": NotRequired[int],\n        \"challenges\": NotRequired[\n            LolMatchV5MatchInfoParticipantChallenges\n        ],\n        \"champExperience\": int,\n        \"champLevel\": int,\n        \"championId\": int,\n        \"championName\": str,\n        \"championTransform\": int,\n        \"commandPings\": int,\n        \"consumablesPurchased\": int,\n        \"damageDealtToBuildings\": int,\n        \"damageDealtToObjectives\": int,\n        \"damageDealtToTurrets\": int,\n        \"damageSelfMitigated\": int,\n        \"dangerPings\": int,\n        \"deaths\": int,\n        \"detectorWardsPlaced\": int,\n        \"doubleKills\": int,\n        \"dragonKills\": int,\n        \"eligibleForProgression\": bool,\n        \"enemyMissingPings\": int,\n        \"enemyVisionPings\": int,\n        \"firstBloodAssist\": bool,\n        \"firstBloodKill\": bool,\n        \"firstTowerAssist\": bool,\n        \"firstTowerKill\": bool,\n        \"gameEndedInEarlySurrender\": bool,\n        \"gameEndedInSurrender\": bool,\n        \"getBackPings\": int,\n        \"goldEarned\": int,\n        \"goldSpent\": int,\n        \"holdPings\": int,\n        \"individualPosition\": str,\n        \"inhibitorKills\": int,\n        \"inhibitorTakedowns\": int,\n        \"inhibitorsLost\": int,\n        \"item0\": int,\n        \"item1\": int,\n        \"item2\": int,\n        \"item3\": int,\n        \"item4\": int,\n        \"item5\": int,\n        \"item6\": int,\n        \"itemsPurchased\": int,\n        \"killingSprees\": int,\n        \"kills\": int,\n        \"lane\": str,\n        \"largestCriticalStrike\": int,\n        \"largestKillingSpree\": int,\n        \"largestMultiKill\": int,\n        \"longestTimeSpentLiving\": int,\n        \"magicDamageDealt\": int,\n        \"magicDamageDealtToChampions\": int,\n        \"magicDamageTaken\": int,\n        \"missions\": LolMatchV5MatchInfoParticipantMissions,\n        \"needVisionPings\": int,\n        \"neutralMinionsKilled\": int,\n        \"nexusKills\": int,\n        \"nexusLost\": int,\n        \"nexusTakedowns\": int,\n        \"objectivesStolen\": int,\n        \"objectivesStolenAssists\": int,\n        \"onMyWayPings\": int,\n        \"participantId\": int,\n        \"pentaKills\": int,\n        \"perks\": LolMatchV5MatchInfoParticipantPerks,\n        \"physicalDamageDealt\": int,\n        \"physicalDamageDealtToChampions\": int,\n        \"physicalDamageTaken\": int,\n        \"placement\": int,\n        \"playerAugment1\": int,\n        \"playerAugment2\": int,\n        \"playerAugment3\": int,\n        \"playerAugment4\": int,\n        \"playerAugment5\": int,\n        \"playerAugment6\": int,\n        \"playerSubteamId\": int,\n        \"PlayerScore0\": NotRequired[float],\n        \"PlayerScore1\": NotRequired[float],\n        \"PlayerScore10\": NotRequired[float],\n        \"PlayerScore11\": NotRequired[float],\n        \"PlayerScore2\": NotRequired[float],\n        \"PlayerScore3\": NotRequired[float],\n        \"PlayerScore4\": NotRequired[float],\n        \"PlayerScore5\": NotRequired[float],\n        \"PlayerScore6\": NotRequired[float],\n        \"PlayerScore7\": NotRequired[float],\n        \"PlayerScore8\": NotRequired[float],\n        \"PlayerScore9\": NotRequired[float],\n        \"profileIcon\": int,\n        \"pushPings\": int,\n        \"puuid\": str,\n        \"quadraKills\": int,\n        \"riotIdTagline\": str,\n        \"riotIdGameName\": str,\n        \"role\": str,\n        \"sightWardsBoughtInGame\": int,\n        \"spell1Casts\": int,\n        \"spell2Casts\": int,\n        \"spell3Casts\": int,\n        \"spell4Casts\": int,\n        \"subteamPlacement\": int,\n        \"summoner1Casts\": int,\n        \"summoner1Id\": int,\n        \"summoner2Casts\": int,\n        \"summoner2Id\": int,\n        \"summonerId\": str,\n        \"summonerLevel\": int,\n        \"summonerName\": NotRequired[str],\n        \"teamEarlySurrendered\": bool,\n        \"teamId\": int,\n        \"teamPosition\": str,\n        \"timeCCingOthers\": int,\n        \"timePlayed\": int,\n        \"totalAllyJungleMinionsKilled\": int,\n        \"totalDamageDealt\": int,\n        \"totalDamageDealtToChampions\": int,\n        \"totalDamageShieldedOnTeammates\": int,\n        \"totalDamageTaken\": int,\n        \"totalEnemyJungleMinionsKilled\": int,\n        \"totalHeal\": int,\n        \"totalHealsOnTeammates\": int,\n        \"totalMinionsKilled\": int,\n        \"totalTimeCCDealt\": int,\n        \"totalTimeSpentDead\": int,\n        \"totalUnitsHealed\": int,\n        \"tripleKills\": int,\n        \"trueDamageDealt\": int,\n        \"trueDamageDealtToChampions\": int,\n        \"trueDamageTaken\": int,\n        \"turretKills\": int,\n        \"turretTakedowns\": int,\n        \"turretsLost\": int,\n        \"unrealKills\": int,\n        \"visionClearedPings\": int,\n        \"visionScore\": int,\n        \"visionWardsBoughtInGame\": int,\n        \"wardsKilled\": int,\n        \"wardsPlaced\": int,\n        \"retreatPings\": NotRequired[int],\n        \"win\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoTeamBan","title":"LolMatchV5MatchInfoTeamBan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoTeamBan = TypedDict(\n    \"LolMatchV5MatchInfoTeamBan\", {\"championId\": int, \"pickTurn\": int}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoTeamObjectives","title":"LolMatchV5MatchInfoTeamObjectives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoTeamObjectives = TypedDict(\n    \"LolMatchV5MatchInfoTeamObjectives\",\n    {\n        \"baron\": LolMatchV5MatchTeamObjective,\n        \"champion\": LolMatchV5MatchTeamObjective,\n        \"dragon\": LolMatchV5MatchTeamObjective,\n        \"atakhan\": NotRequired[LolMatchV5MatchTeamObjective],\n        \"horde\": LolMatchV5MatchTeamObjective,\n        \"inhibitor\": LolMatchV5MatchTeamObjective,\n        \"riftHerald\": LolMatchV5MatchTeamObjective,\n        \"tower\": LolMatchV5MatchTeamObjective,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoTeamFeatState","title":"LolMatchV5MatchInfoTeamFeatState  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoTeamFeatState = TypedDict(\n    \"LolMatchV5MatchInfoTeamFeatState\", {\"featState\": int}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoTeamFeats","title":"LolMatchV5MatchInfoTeamFeats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoTeamFeats = TypedDict(\n    \"LolMatchV5MatchInfoTeamFeats\",\n    {\n        \"EPIC_MONSTER_KILL\": LolMatchV5MatchInfoTeamFeatState,\n        \"FIRST_BLOOD\": LolMatchV5MatchInfoTeamFeatState,\n        \"FIRST_TURRET\": LolMatchV5MatchInfoTeamFeatState,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfoTeam","title":"LolMatchV5MatchInfoTeam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfoTeam = TypedDict(\n    \"LolMatchV5MatchInfoTeam\",\n    {\n        \"bans\": list[LolMatchV5MatchInfoTeamBan],\n        \"objectives\": LolMatchV5MatchInfoTeamObjectives,\n        \"teamId\": int,\n        \"win\": bool,\n        \"feats\": NotRequired[LolMatchV5MatchInfoTeamFeats],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchInfo","title":"LolMatchV5MatchInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchInfo = TypedDict(\n    \"LolMatchV5MatchInfo\",\n    {\n        \"gameCreation\": int,\n        \"gameDuration\": int,\n        \"gameEndTimestamp\": int,\n        \"gameId\": int,\n        \"gameMode\": str,\n        \"gameName\": str,\n        \"gameStartTimestamp\": int,\n        \"gameType\": str,\n        \"gameVersion\": str,\n        \"mapId\": int,\n        \"participants\": list[LolMatchV5MatchInfoParticipant],\n        \"platformId\": str,\n        \"queueId\": int,\n        \"teams\": list[LolMatchV5MatchInfoTeam],\n        \"tournamentCode\": str,\n        \"endOfGameResult\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5Match","title":"LolMatchV5Match  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5Match = TypedDict(\n    \"LolMatchV5Match\",\n    {\n        \"metadata\": LolMatchV5MatchMetadata,\n        \"info\": LolMatchV5MatchInfo,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineParticipantFrameChampionStats","title":"LolMatchV5MatchTimelineParticipantFrameChampionStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineParticipantFrameChampionStats = TypedDict(\n    \"LolMatchV5MatchTimelineParticipantFrameChampionStats\",\n    {\n        \"abilityHaste\": int,\n        \"abilityPower\": int,\n        \"armor\": int,\n        \"armorPen\": int,\n        \"armorPenPercent\": int,\n        \"attackDamage\": int,\n        \"attackSpeed\": int,\n        \"bonusArmorPenPercent\": int,\n        \"bonusMagicPenPercent\": int,\n        \"ccReduction\": int,\n        \"cooldownReduction\": int,\n        \"health\": int,\n        \"healthMax\": int,\n        \"healthRegen\": int,\n        \"lifesteal\": int,\n        \"magicPen\": int,\n        \"magicPenPercent\": int,\n        \"magicResist\": int,\n        \"movementSpeed\": int,\n        \"omnivamp\": int,\n        \"physicalVamp\": int,\n        \"power\": int,\n        \"powerMax\": int,\n        \"powerRegen\": int,\n        \"spellVamp\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineParticipantFrameDamageStats","title":"LolMatchV5MatchTimelineParticipantFrameDamageStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineParticipantFrameDamageStats = TypedDict(\n    \"LolMatchV5MatchTimelineParticipantFrameDamageStats\",\n    {\n        \"magicDamageDone\": int,\n        \"magicDamageDoneToChampions\": int,\n        \"magicDamageTaken\": int,\n        \"physicalDamageDone\": int,\n        \"physicalDamageDoneToChampions\": int,\n        \"physicalDamageTaken\": int,\n        \"totalDamageDone\": int,\n        \"totalDamageDoneToChampions\": int,\n        \"totalDamageTaken\": int,\n        \"trueDamageDone\": int,\n        \"trueDamageDoneToChampions\": int,\n        \"trueDamageTaken\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelinePosition","title":"LolMatchV5MatchTimelinePosition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelinePosition = TypedDict(\n    \"LolMatchV5MatchTimelinePosition\", {\"x\": int, \"y\": int}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineParticipantFrame","title":"LolMatchV5MatchTimelineParticipantFrame  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineParticipantFrame = TypedDict(\n    \"LolMatchV5MatchTimelineParticipantFrame\",\n    {\n        \"championStats\": LolMatchV5MatchTimelineParticipantFrameChampionStats,\n        \"currentGold\": int,\n        \"damageStats\": LolMatchV5MatchTimelineParticipantFrameDamageStats,\n        \"goldPerSecond\": int,\n        \"jungleMinionsKilled\": int,\n        \"level\": int,\n        \"minionsKilled\": int,\n        \"participantId\": int,\n        \"position\": LolMatchV5MatchTimelinePosition,\n        \"timeEnemySpentControlled\": int,\n        \"totalGold\": int,\n        \"xp\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineEventDamage","title":"LolMatchV5MatchTimelineEventDamage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineEventDamage = TypedDict(\n    \"LolMatchV5MatchTimelineEventDamage\",\n    {\n        \"basic\": bool,\n        \"magicDamage\": int,\n        \"name\": str,\n        \"participantId\": int,\n        \"physicalDamage\": int,\n        \"spellName\": str,\n        \"spellSlot\": int,\n        \"trueDamage\": int,\n        \"type\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineMetadata","title":"LolMatchV5MatchTimelineMetadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineMetadata = TypedDict(\n    \"LolMatchV5MatchTimelineMetadata\",\n    {\"dataVersion\": str, \"matchId\": str, \"participants\": list[str]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineInfoFrameEvent","title":"LolMatchV5MatchTimelineInfoFrameEvent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineInfoFrameEvent = TypedDict(\n    \"LolMatchV5MatchTimelineInfoFrameEvent\",\n    {\n        \"afterId\": NotRequired[int],\n        \"beforeId\": NotRequired[int],\n        \"goldGain\": NotRequired[int],\n        \"participantId\": NotRequired[int],\n        \"timestamp\": int,\n        \"type\": str,\n        \"creatorId\": NotRequired[int],\n        \"wardType\": NotRequired[str],\n        \"level\": NotRequired[int],\n        \"itemId\": NotRequired[int],\n        \"assistingParticipantIds\": NotRequired[list[int]],\n        \"bounty\": NotRequired[int],\n        \"killStreakLength\": NotRequired[int],\n        \"killerId\": NotRequired[int],\n        \"position\": NotRequired[LolMatchV5MatchTimelinePosition],\n        \"shutdownBounty\": NotRequired[int],\n        \"victimDamageDealt\": NotRequired[\n            list[LolMatchV5MatchTimelineEventDamage]\n        ],\n        \"victimDamageReceived\": NotRequired[\n            list[LolMatchV5MatchTimelineEventDamage]\n        ],\n        \"victimId\": NotRequired[int],\n        \"levelUpType\": NotRequired[str],\n        \"skillSlot\": NotRequired[int],\n        \"realTimestamp\": NotRequired[int],\n        \"monsterType\": NotRequired[str],\n        \"monsterSubType\": NotRequired[str],\n        \"killerTeamId\": NotRequired[int],\n        \"buildingType\": NotRequired[str],\n        \"laneType\": NotRequired[str],\n        \"teamId\": NotRequired[int],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineInfoFrame","title":"LolMatchV5MatchTimelineInfoFrame  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineInfoFrame = TypedDict(\n    \"LolMatchV5MatchTimelineInfoFrame\",\n    {\n        \"events\": list[LolMatchV5MatchTimelineInfoFrameEvent],\n        \"participantFrames\": dict[\n            str, LolMatchV5MatchTimelineParticipantFrame\n        ],\n        \"timestamp\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineInfoParticipants","title":"LolMatchV5MatchTimelineInfoParticipants  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineInfoParticipants = TypedDict(\n    \"LolMatchV5MatchTimelineInfoParticipants\",\n    {\"participantId\": int, \"puuid\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimelineInfo","title":"LolMatchV5MatchTimelineInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimelineInfo = TypedDict(\n    \"LolMatchV5MatchTimelineInfo\",\n    {\n        \"frameInterval\": int,\n        \"frames\": list[LolMatchV5MatchTimelineInfoFrame],\n        \"gameId\": int,\n        \"participants\": list[LolMatchV5MatchTimelineInfoParticipants],\n        \"endOfGameResult\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolMatchV5MatchTimeline","title":"LolMatchV5MatchTimeline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolMatchV5MatchTimeline = TypedDict(\n    \"LolMatchV5MatchTimeline\",\n    {\n        \"metadata\": LolMatchV5MatchTimelineMetadata,\n        \"info\": LolMatchV5MatchTimelineInfo,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV4GameParticipantPerks","title":"LolSpectatorV4GameParticipantPerks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV4GameParticipantPerks = TypedDict(\n    \"LolSpectatorV4GameParticipantPerks\",\n    {\"perkIds\": list[int], \"perkStyle\": int, \"perkSubStyle\": int},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV4GameParticipant","title":"LolSpectatorV4GameParticipant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV4GameParticipant = TypedDict(\n    \"LolSpectatorV4GameParticipant\",\n    {\n        \"gameCustomizationObjects\": NotRequired[list[str]],\n        \"perks\": NotRequired[LolSpectatorV4GameParticipantPerks],\n        \"puuid\": str,\n        \"summonerId\": str,\n        \"teamId\": int,\n        \"spell1Id\": int,\n        \"spell2Id\": int,\n        \"championId\": int,\n        \"profileIconId\": int,\n        \"summonerName\": NotRequired[str],\n        \"bot\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV4GameObservers","title":"LolSpectatorV4GameObservers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV4GameObservers = TypedDict(\n    \"LolSpectatorV4GameObservers\", {\"encryptionKey\": str}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV4Game","title":"LolSpectatorV4Game  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV4Game = TypedDict(\n    \"LolSpectatorV4Game\",\n    {\n        \"gameId\": int,\n        \"mapId\": int,\n        \"gameMode\": str,\n        \"gameType\": str,\n        \"gameQueueConfigId\": int,\n        \"participants\": list[LolSpectatorV4GameParticipant],\n        \"observers\": LolSpectatorV4GameObservers,\n        \"platformId\": str,\n        \"bannedChampions\": list[int],\n        \"gameStartTime\": int,\n        \"gameLength\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV4GameList","title":"LolSpectatorV4GameList  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV4GameList = TypedDict(\n    \"LolSpectatorV4GameList\",\n    {\n        \"gameList\": list[LolSpectatorV4Game],\n        \"clientRefreshInterval\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV5GameParticipant","title":"LolSpectatorV5GameParticipant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV5GameParticipant = TypedDict(\n    \"LolSpectatorV5GameParticipant\",\n    {\n        \"gameCustomizationObjects\": NotRequired[list[str]],\n        \"perks\": NotRequired[LolSpectatorV4GameParticipantPerks],\n        \"puuid\": str,\n        \"summonerId\": str,\n        \"teamId\": int,\n        \"spell1Id\": int,\n        \"spell2Id\": int,\n        \"championId\": int,\n        \"profileIconId\": int,\n        \"riotId\": str,\n        \"bot\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV5GameBannedChampion","title":"LolSpectatorV5GameBannedChampion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV5GameBannedChampion = TypedDict(\n    \"LolSpectatorV4Game\",\n    {\"championId\": int, \"pickTurn\": int, \"teamId\": int},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV5Game","title":"LolSpectatorV5Game  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV5Game = TypedDict(\n    \"LolSpectatorV5Game\",\n    {\n        \"gameId\": int,\n        \"mapId\": int,\n        \"gameMode\": str,\n        \"gameType\": str,\n        \"gameQueueConfigId\": int,\n        \"participants\": list[LolSpectatorV5GameParticipant],\n        \"observers\": LolSpectatorV4GameObservers,\n        \"platformId\": str,\n        \"bannedChampions\": list[LolSpectatorV5GameBannedChampion],\n        \"gameStartTime\": NotRequired[int],\n        \"gameLength\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSpectatorV5GameList","title":"LolSpectatorV5GameList  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSpectatorV5GameList = TypedDict(\n    \"LolSpectatorV5GameList\", {\"gameList\": list[LolSpectatorV5Game]}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LolSummonerV4Summoner","title":"LolSummonerV4Summoner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LolSummonerV4Summoner = TypedDict(\n    \"SummonerV4Summoner\",\n    {\n        \"id\": str,\n        \"accountId\": str,\n        \"puuid\": str,\n        \"name\": NotRequired[str],\n        \"profileIconId\": int,\n        \"revisionDate\": int,\n        \"summonerLevel\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftLeagueV1LeagueEntry","title":"TftLeagueV1LeagueEntry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftLeagueV1LeagueEntry = TypedDict(\n    \"TftLeagueV1LeagueEntry\",\n    {\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"puuid\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftLeagueV1LeagueFullEntry","title":"TftLeagueV1LeagueFullEntry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftLeagueV1LeagueFullEntry = TypedDict(\n    \"TftLeagueV1LeagueFullEntry\",\n    {\n        \"leagueId\": str,\n        \"puuid\": str,\n        \"summonerId\": str,\n        \"summonerName\": NotRequired[str],\n        \"queueType\": str,\n        \"tier\": str,\n        \"rank\": str,\n        \"leaguePoints\": int,\n        \"wins\": int,\n        \"losses\": int,\n        \"hotStreak\": bool,\n        \"veteran\": bool,\n        \"freshBlood\": bool,\n        \"inactive\": bool,\n        \"miniSeries\": NotRequired[LolLeagueV4LeagueEntryMiniSeries],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftLeagueV1League","title":"TftLeagueV1League  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftLeagueV1League = TypedDict(\n    \"TftLeagueV1League\",\n    {\n        \"tier\": str,\n        \"leagueId\": str,\n        \"queue\": str,\n        \"name\": str,\n        \"entries\": list[TftLeagueV1LeagueEntry],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchMetadata","title":"TftMatchV1MatchMetadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchMetadata = TypedDict(\n    \"TftMatchV1MatchMetadata\",\n    {\"data_version\": str, \"match_id\": str, \"participants\": list[str]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfoParticipantCompanion","title":"TftMatchV1MatchInfoParticipantCompanion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfoParticipantCompanion = TypedDict(\n    \"TftMatchV1MatchInfoParticipantCompanion\",\n    {\n        \"content_ID\": str,\n        \"item_ID\": int,\n        \"skin_ID\": int,\n        \"species\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfoParticipantTrait","title":"TftMatchV1MatchInfoParticipantTrait  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfoParticipantTrait = TypedDict(\n    \"TftMatchV1MatchInfoParticipantTrait\",\n    {\n        \"name\": str,\n        \"num_units\": int,\n        \"style\": int,\n        \"tier_current\": int,\n        \"tier_total\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfoParticipantUnit","title":"TftMatchV1MatchInfoParticipantUnit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfoParticipantUnit = TypedDict(\n    \"TftMatchV1MatchInfoParticipantUnit\",\n    {\n        \"character_id\": str,\n        \"itemNames\": list[str],\n        \"name\": str,\n        \"rarity\": int,\n        \"tier\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfoParticipantMission","title":"TftMatchV1MatchInfoParticipantMission  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfoParticipantMission = TypedDict(\n    \"TftMatchV1MatchInfoParticipantMission\",\n    {\n        \"Assists\": NotRequired[int],\n        \"DamageDealt\": NotRequired[int],\n        \"DamageDealtToObjectives\": NotRequired[int],\n        \"DamageDealtToTurrets\": NotRequired[int],\n        \"DamageTaken\": NotRequired[int],\n        \"Deaths\": NotRequired[int],\n        \"DoubleKills\": NotRequired[int],\n        \"GoldEarned\": NotRequired[int],\n        \"GoldSpent\": NotRequired[int],\n        \"InhibitorsDestroyed\": NotRequired[int],\n        \"KillingSprees\": NotRequired[int],\n        \"Kills\": NotRequired[int],\n        \"LargestKillingSpree\": NotRequired[int],\n        \"LargestMultiKill\": NotRequired[int],\n        \"MagicDamageDealt\": NotRequired[int],\n        \"MagicDamageDealtToChampions\": NotRequired[int],\n        \"MagicDamageTaken\": NotRequired[int],\n        \"NeutralMinionsKilledTeamJungle\": NotRequired[int],\n        \"PentaKills\": NotRequired[int],\n        \"PhysicalDamageDealt\": NotRequired[int],\n        \"PhysicalDamageDealtToChampions\": NotRequired[int],\n        \"PhysicalDamageTaken\": NotRequired[int],\n        \"PlayerScore0\": NotRequired[int],\n        \"PlayerScore1\": NotRequired[int],\n        \"PlayerScore10\": NotRequired[int],\n        \"PlayerScore11\": NotRequired[int],\n        \"PlayerScore2\": NotRequired[int],\n        \"PlayerScore3\": NotRequired[int],\n        \"PlayerScore4\": NotRequired[int],\n        \"PlayerScore5\": NotRequired[int],\n        \"PlayerScore6\": NotRequired[int],\n        \"PlayerScore9\": NotRequired[int],\n        \"QuadraKills\": NotRequired[int],\n        \"Spell1Casts\": NotRequired[int],\n        \"Spell2Casts\": NotRequired[int],\n        \"Spell3Casts\": NotRequired[int],\n        \"Spell4Casts\": NotRequired[int],\n        \"SummonerSpell1Casts\": NotRequired[int],\n        \"TimeCCOthers\": NotRequired[int],\n        \"TotalDamageDealtToChampions\": NotRequired[int],\n        \"TotalMinionsKilled\": NotRequired[int],\n        \"TripleKills\": NotRequired[int],\n        \"TrueDamageDealt\": NotRequired[int],\n        \"TrueDamageDealtToChampions\": NotRequired[int],\n        \"TrueDamageTaken\": NotRequired[int],\n        \"UnrealKills\": NotRequired[int],\n        \"VisionScore\": NotRequired[int],\n        \"WardsKilled\": NotRequired[int],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfoParticipantSkillTree","title":"TftMatchV1MatchInfoParticipantSkillTree  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfoParticipantSkillTree = TypedDict(\n    \"TftMatchV1MatchInfoParticipantSkillTree\",\n    {\n        \"EventSkill_DemotionProtection\": int,\n        \"EventSkill_PlacementDelta\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfoParticipant","title":"TftMatchV1MatchInfoParticipant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfoParticipant = TypedDict(\n    \"TftMatchV1MatchInfoParticipant\",\n    {\n        \"augments\": NotRequired[list[str]],\n        \"companion\": TftMatchV1MatchInfoParticipantCompanion,\n        \"gold_left\": int,\n        \"last_round\": int,\n        \"level\": int,\n        \"placement\": int,\n        \"players_eliminated\": int,\n        \"puuid\": str,\n        \"time_eliminated\": float,\n        \"total_damage_to_players\": int,\n        \"traits\": list[TftMatchV1MatchInfoParticipantTrait],\n        \"units\": list[TftMatchV1MatchInfoParticipantUnit],\n        \"missions\": TftMatchV1MatchInfoParticipantMission,\n        \"riotIdGameName\": str,\n        \"riotIdTagline\": str,\n        \"skill_tree\": NotRequired[\n            TftMatchV1MatchInfoParticipantSkillTree\n        ],\n        \"partner_group_id\": NotRequired[int],\n        \"win\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1MatchInfo","title":"TftMatchV1MatchInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1MatchInfo = TypedDict(\n    \"TftMatchV1MatchInfo\",\n    {\n        \"game_datetime\": int,\n        \"game_length\": float,\n        \"game_version\": str,\n        \"participants\": list[TftMatchV1MatchInfoParticipant],\n        \"queue_id\": int,\n        \"tft_game_type\": str,\n        \"tft_set_core_name\": str,\n        \"tft_set_number\": int,\n        \"endOfGameResult\": str,\n        \"gameCreation\": int,\n        \"gameId\": int,\n        \"mapId\": int,\n        \"queueId\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftMatchV1Match","title":"TftMatchV1Match  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftMatchV1Match = TypedDict(\n    \"TftMatchV1Match\",\n    {\n        \"metadata\": TftMatchV1MatchMetadata,\n        \"info\": TftMatchV1MatchInfo,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.TftSummonerV1Summoner","title":"TftSummonerV1Summoner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TftSummonerV1Summoner = LolSummonerV4Summoner\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LorRankedV1LeaderboardPlayer","title":"LorRankedV1LeaderboardPlayer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorRankedV1LeaderboardPlayer = TypedDict(\n    \"LorRankedV1LeaderboardPlayer\",\n    {\"name\": str, \"rank\": int, \"lp\": float},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LorRankedV1Leaderboard","title":"LorRankedV1Leaderboard  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorRankedV1Leaderboard = TypedDict(\n    \"LorRankedV1Leaderboard\",\n    {\"players\": list[LorRankedV1LeaderboardPlayer]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LorMatchV1MatchMetadata","title":"LorMatchV1MatchMetadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorMatchV1MatchMetadata = TypedDict(\n    \"LorMatchV1MatchMetadata\",\n    {\"data_version\": str, \"match_id\": str, \"participants\": list[str]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LorMatchV1MatchInfoPlayer","title":"LorMatchV1MatchInfoPlayer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorMatchV1MatchInfoPlayer = TypedDict(\n    \"LorMatchV1MatchInfoPlayer\",\n    {\n        \"puuid\": str,\n        \"deck_id\": str,\n        \"deck_code\": str,\n        \"factions\": list[str],\n        \"game_outcome\": str,\n        \"order_of_play\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LorMatchV1MatchInfo","title":"LorMatchV1MatchInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorMatchV1MatchInfo = TypedDict(\n    \"LorMatchV1MatchInfo\",\n    {\n        \"game_format\": str,\n        \"game_mode\": str,\n        \"game_type\": str,\n        \"game_start_time_utc\": str,\n        \"game_version\": str,\n        \"players\": list[LorMatchV1MatchInfoPlayer],\n        \"total_turn_count\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.LorMatchV1Match","title":"LorMatchV1Match  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LorMatchV1Match = TypedDict(\n    \"LorMatchV1Match\",\n    {\n        \"metadata\": LorMatchV1MatchMetadata,\n        \"info\": LorMatchV1MatchInfo,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValContentV1ContentsAssetLocalizedNames","title":"ValContentV1ContentsAssetLocalizedNames  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValContentV1ContentsAssetLocalizedNames = TypedDict(\n    \"ValContentV1ContentsAssetLocalizedNames\",\n    {\n        \"ar-AE\": str,\n        \"de-DE\": str,\n        \"en-US\": str,\n        \"es-ES\": str,\n        \"es-MX\": str,\n        \"fr-FR\": str,\n        \"id-ID\": str,\n        \"it-IT\": str,\n        \"ja-JP\": str,\n        \"ko-KR\": str,\n        \"pl-PL\": str,\n        \"pt-BR\": str,\n        \"ru-RU\": str,\n        \"th-TH\": str,\n        \"tr-TR\": str,\n        \"vi-VN\": str,\n        \"zh-CN\": str,\n        \"zh-TW\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValContentV1ContentsAsset","title":"ValContentV1ContentsAsset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValContentV1ContentsAsset = TypedDict(\n    \"ValContentV1ContentsAsset\",\n    {\n        \"name\": str,\n        \"id\": str,\n        \"localizedNames\": NotRequired[\n            ValContentV1ContentsAssetLocalizedNames\n        ],\n        \"assetName\": str,\n        \"assetPath\": NotRequired[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValContentV1ContentsAct","title":"ValContentV1ContentsAct  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValContentV1ContentsAct = TypedDict(\n    \"ValContentV1ContentsAct\",\n    {\n        \"id\": str,\n        \"localizedNames\": NotRequired[\n            ValContentV1ContentsAssetLocalizedNames\n        ],\n        \"parentId\": str,\n        \"type\": str,\n        \"name\": str,\n        \"isActive\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValContentV1Contents","title":"ValContentV1Contents  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValContentV1Contents = TypedDict(\n    \"ValContentV1Contents\",\n    {\n        \"version\": str,\n        \"characters\": list[ValContentV1ContentsAsset],\n        \"maps\": list[ValContentV1ContentsAsset],\n        \"chromas\": list[ValContentV1ContentsAsset],\n        \"skins\": list[ValContentV1ContentsAsset],\n        \"skinLevels\": list[ValContentV1ContentsAsset],\n        \"equips\": list[ValContentV1ContentsAsset],\n        \"gameModes\": list[ValContentV1ContentsAsset],\n        \"totems\": list[ValContentV1ContentsAsset],\n        \"sprays\": list[ValContentV1ContentsAsset],\n        \"sprayLevels\": list[ValContentV1ContentsAsset],\n        \"charms\": list[ValContentV1ContentsAsset],\n        \"charmLevels\": list[ValContentV1ContentsAsset],\n        \"playerCards\": list[ValContentV1ContentsAsset],\n        \"playerTitles\": list[ValContentV1ContentsAsset],\n        \"acts\": list[ValContentV1ContentsAct],\n        \"ceremonies\": list[ValContentV1ContentsAsset],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValRankedV1LeaderboardTierDetail","title":"ValRankedV1LeaderboardTierDetail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValRankedV1LeaderboardTierDetail = TypedDict(\n    \"ValRankedV1LeaderboardTierDetail\",\n    {\n        \"rankedRatingThreshold\": int,\n        \"startingPage\": int,\n        \"startingIndex\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValRankedV1LeaderboardPlayer","title":"ValRankedV1LeaderboardPlayer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValRankedV1LeaderboardPlayer = TypedDict(\n    \"ValRankedV1LeaderboardPlayer\",\n    {\n        \"puuid\": str,\n        \"gameName\": str,\n        \"tagLine\": str,\n        \"leaderboardRank\": int,\n        \"rankedRating\": int,\n        \"numberOfWins\": int,\n        \"competitiveTier\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValRankedV1LeaderboardTierDetails","title":"ValRankedV1LeaderboardTierDetails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValRankedV1LeaderboardTierDetails = TypedDict(\n    \"ValRankedV1LeaderboardTierDetails\",\n    {\n        \"24\": ValRankedV1LeaderboardTierDetail,\n        \"25\": ValRankedV1LeaderboardTierDetail,\n        \"26\": ValRankedV1LeaderboardTierDetail,\n        \"27\": ValRankedV1LeaderboardTierDetail,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValRankedV1Leaderboard","title":"ValRankedV1Leaderboard  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValRankedV1Leaderboard = TypedDict(\n    \"ValRankedV1Leaderboard\",\n    {\n        \"actId\": str,\n        \"players\": list[ValRankedV1LeaderboardPlayer],\n        \"totalPlayers\": int,\n        \"immortalStartingPage\": int,\n        \"immortalStartingIndex\": int,\n        \"topTierRRThreshold\": int,\n        \"tierDetails\": ValRankedV1LeaderboardTierDetails,\n        \"startIndex\": int,\n        \"query\": str,\n        \"shard\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchLocation","title":"ValMatchV1MatchLocation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchLocation = TypedDict(\n    \"ValMatchV1MatchLocation\", {\"x\": float, \"y\": float}\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchPlayerLocation","title":"ValMatchV1MatchPlayerLocation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchPlayerLocation = TypedDict(\n    \"ValMatchV1MatchPlayerLocation\",\n    {\n        \"puuid\": str,\n        \"viewRadians\": float,\n        \"location\": ValMatchV1MatchLocation,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchInfo","title":"ValMatchV1MatchInfo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchInfo = TypedDict(\n    \"ValMatchV1MatchInfo\",\n    {\n        \"matchId\": str,\n        \"mapId\": str,\n        \"gameVersion\": str,\n        \"gameLengthMillis\": int,\n        \"region\": str,\n        \"gameStartMillis\": int,\n        \"provisioningFlowId\": str,\n        \"isCompleted\": bool,\n        \"customGameName\": str,\n        \"queueId\": str,\n        \"gameMode\": str,\n        \"isRanked\": bool,\n        \"premierMatchInfo\": dict,\n        \"seasonId\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchPlayerStatsAbilityCasts","title":"ValMatchV1MatchPlayerStatsAbilityCasts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchPlayerStatsAbilityCasts = TypedDict(\n    \"ValMatchV1MatchPlayerStatsAbilityCasts\",\n    {\n        \"grenadeCasts\": int,\n        \"ability1Casts\": int,\n        \"ability2Casts\": int,\n        \"ultimateCasts\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchPlayerStats","title":"ValMatchV1MatchPlayerStats  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchPlayerStats = TypedDict(\n    \"ValMatchV1MatchPlayerStats\",\n    {\n        \"score\": int,\n        \"roundsPlayed\": int,\n        \"kills\": int,\n        \"deaths\": int,\n        \"assists\": int,\n        \"playtimeMillis\": int,\n        \"abilityCasts\": ValMatchV1MatchPlayerStatsAbilityCasts | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchPlayer","title":"ValMatchV1MatchPlayer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchPlayer = TypedDict(\n    \"ValMatchV1MatchPlayer\",\n    {\n        \"puuid\": str,\n        \"gameName\": str,\n        \"tagLine\": str,\n        \"teamId\": str,\n        \"partyId\": str,\n        \"characterId\": str,\n        \"stats\": ValMatchV1MatchPlayerStats,\n        \"competitiveTier\": int,\n        \"isObserver\": bool,\n        \"playerCard\": str,\n        \"playerTitle\": str,\n        \"accountLevel\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchTeam","title":"ValMatchV1MatchTeam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchTeam = TypedDict(\n    \"ValMatchV1MatchTeam\",\n    {\n        \"teamId\": str,\n        \"won\": bool,\n        \"roundsPlayed\": int,\n        \"roundsWon\": int,\n        \"numPoints\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResultPlayerStatFinishingDamage","title":"ValMatchV1MatchRoundResultPlayerStatFinishingDamage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResultPlayerStatFinishingDamage = TypedDict(\n    \"ValMatchV1MatchRoundResultPlayerStatFinishingDamage\",\n    {\n        \"damageType\": str,\n        \"damageItem\": str,\n        \"isSecondaryFireMode\": bool,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResultPlayerStatKill","title":"ValMatchV1MatchRoundResultPlayerStatKill  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResultPlayerStatKill = TypedDict(\n    \"ValMatchV1MatchRoundResultPlayerStatKill\",\n    {\n        \"timeSinceGameStartMillis\": int,\n        \"timeSinceRoundStartMillis\": int,\n        \"killer\": str,\n        \"victim\": str,\n        \"victimLocation\": ValMatchV1MatchLocation,\n        \"assistants\": list[str],\n        \"playerLocations\": list[ValMatchV1MatchPlayerLocation],\n        \"finishingDamage\": ValMatchV1MatchRoundResultPlayerStatFinishingDamage,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResultPlayerStatDamage","title":"ValMatchV1MatchRoundResultPlayerStatDamage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResultPlayerStatDamage = TypedDict(\n    \"ValMatchV1MatchRoundResultPlayerStatDamage\",\n    {\n        \"receiver\": str,\n        \"damage\": int,\n        \"legshots\": int,\n        \"bodyshots\": int,\n        \"headshots\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResultPlayerStatEconomy","title":"ValMatchV1MatchRoundResultPlayerStatEconomy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResultPlayerStatEconomy = TypedDict(\n    \"ValMatchV1MatchRoundResultPlayerStatEconomy\",\n    {\n        \"loadoutValue\": int,\n        \"weapon\": str,\n        \"armor\": str,\n        \"remaining\": int,\n        \"spent\": int,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResultPlayerStatAbility","title":"ValMatchV1MatchRoundResultPlayerStatAbility  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResultPlayerStatAbility = TypedDict(\n    \"ValMatchV1MatchRoundResultPlayerStatAbility\",\n    {\n        \"grenadeEffects\": str | None,\n        \"ability1Effects\": str | None,\n        \"ability2Effects\": str | None,\n        \"ultimateEffects\": str | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResultPlayerStat","title":"ValMatchV1MatchRoundResultPlayerStat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResultPlayerStat = TypedDict(\n    \"ValMatchV1MatchRoundResultPlayerStat\",\n    {\n        \"puuid\": str,\n        \"kills\": list[ValMatchV1MatchRoundResultPlayerStatKill],\n        \"damage\": list[ValMatchV1MatchRoundResultPlayerStatDamage],\n        \"score\": int,\n        \"economy\": ValMatchV1MatchRoundResultPlayerStatEconomy,\n        \"ability\": ValMatchV1MatchRoundResultPlayerStatAbility,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchRoundResult","title":"ValMatchV1MatchRoundResult  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchRoundResult = TypedDict(\n    \"ValMatchV1MatchRoundResult\",\n    {\n        \"roundNum\": int,\n        \"roundResult\": str,\n        \"roundCeremony\": str,\n        \"winningTeam\": str,\n        \"winningTeamRole\": str,\n        \"bombPlanter\": str | None,\n        \"bombDefuser\": str | None,\n        \"plantRoundTime\": int,\n        \"plantPlayerLocations\": list[ValMatchV1MatchPlayerLocation]\n        | None,\n        \"plantLocation\": ValMatchV1MatchLocation,\n        \"plantSite\": str,\n        \"defuseRoundTime\": int,\n        \"defusePlayerLocations\": list[ValMatchV1MatchPlayerLocation]\n        | None,\n        \"defuseLocation\": ValMatchV1MatchLocation,\n        \"playerStats\": list[ValMatchV1MatchRoundResultPlayerStat],\n        \"roundResultCode\": str,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1Match","title":"ValMatchV1Match  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1Match = TypedDict(\n    \"ValMatchV1Match\",\n    {\n        \"matchInfo\": ValMatchV1MatchInfo,\n        \"players\": list[ValMatchV1MatchPlayer],\n        \"coaches\": list[str],\n        \"teams\": list[ValMatchV1MatchTeam],\n        \"roundResults\": list[ValMatchV1MatchRoundResult],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1MatchlistHistory","title":"ValMatchV1MatchlistHistory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1MatchlistHistory = TypedDict(\n    \"ValMatchV1MatchlistHistory\",\n    {\"matchId\": str, \"gameStartTimeMillis\": int, \"queueId\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1Matchlist","title":"ValMatchV1Matchlist  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1Matchlist = TypedDict(\n    \"ValMatchV1Matchlist\",\n    {\"puuid\": str, \"history\": list[ValMatchV1MatchlistHistory]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.ValMatchV1RecentMatches","title":"ValMatchV1RecentMatches  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ValMatchV1RecentMatches = TypedDict(\n    \"ValMatchV1RecentMatches\",\n    {\"currentTime\": int, \"matchIds\": list[str]},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.StatusV1PlatformDataLocaleContent","title":"StatusV1PlatformDataLocaleContent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StatusV1PlatformDataLocaleContent = TypedDict(\n    \"StatusV1PlatformDataLocaleContent\",\n    {\"locale\": str, \"content\": str},\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.StatusV1PlatformDataEntryUpdate","title":"StatusV1PlatformDataEntryUpdate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StatusV1PlatformDataEntryUpdate = TypedDict(\n    \"StatusV1PlatformDataEntryUpdate\",\n    {\n        \"id\": int,\n        \"created_at\": str,\n        \"updated_at\": str,\n        \"publish\": bool,\n        \"author\": str,\n        \"translations\": list[StatusV1PlatformDataLocaleContent],\n        \"publish_locations\": list[str],\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.StatusV1PlatformDataEntry","title":"StatusV1PlatformDataEntry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StatusV1PlatformDataEntry = TypedDict(\n    \"StatusV1PlatformDataEntry\",\n    {\n        \"id\": int,\n        \"created_at\": str,\n        \"updated_at\": str | None,\n        \"archive_at\": str | None,\n        \"titles\": list[StatusV1PlatformDataLocaleContent],\n        \"updates\": list[StatusV1PlatformDataEntryUpdate],\n        \"platforms\": list[str],\n        \"maintenance_status\": str | None,\n        \"incident_severity\": str | None,\n    },\n)\n</code></pre>"},{"location":"reference/schemas/riot-api-schema/#pulsefire.schemas.RiotAPISchema.StatusV1PlatformData","title":"StatusV1PlatformData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StatusV1PlatformData = TypedDict(\n    \"StatusV4PlatformData\",\n    {\n        \"id\": str,\n        \"name\": str,\n        \"locales\": list[str],\n        \"maintenances\": list[StatusV1PlatformDataEntry],\n        \"incidents\": list[StatusV1PlatformDataEntry],\n    },\n)\n</code></pre>"},{"location":"reference/utilities/async_to_sync/","title":"async_to_sync","text":"<pre><code>from pulsefire.functools import async_to_sync\n</code></pre> <p>Convert a coroutine function to run synchronously. Use as decorator <code>@async_to_sync()</code>.</p> <p>Example: <pre><code>@async_to_sync()\nasync def sample_func(number: int):\n    ...\n\nsample_func(0)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>runner</code> <code>Callable[[Awaitable[Any]], Any]</code> <p>A callable that runs the awaitable synchronously.</p> <code>run</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>When <code>func</code> is not a coroutine function.</p> Source code in <code>pulsefire/functools.py</code> <pre><code>def async_to_sync(runner: Callable[[Awaitable[Any]], Any] = asyncio.run):\n    \"\"\"Convert a coroutine function to run synchronously. Use as decorator `@async_to_sync()`.\n\n    Example:\n    ```python\n    @async_to_sync()\n    async def sample_func(number: int):\n        ...\n\n    sample_func(0)\n    ```\n\n    Parameters:\n        runner: A callable that runs the awaitable synchronously.\n\n    Raises:\n        TypeError: When `func` is not a coroutine function.\n    \"\"\"\n\n    def decorator[**P, R](func: Callable[P, Awaitable[R]]) -&gt; Callable[P, R]:\n        if not inspect.iscoroutinefunction(func):\n            raise TypeError(f\"{func} is not a coroutine function\")\n\n        @functools.wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n            return runner(func(*args, **kwargs))\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"reference/utilities/sync_to_async/","title":"sync_to_async","text":"<pre><code>from pulsefire.functools import sync_to_async\n</code></pre> <p>Convert a function to run asynchronously. Use as decorator <code>@sync_to_async()</code>.</p> <p>Example: <pre><code>@sync_to_async()\ndef sample_func(number: int):\n    ...\n\nasync def main():\n    await sample_func(0)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>executor</code> <code>Executor | None</code> <p>Executor to be passed to <code>loop.run_in_executor</code>.</p> <code>None</code> Source code in <code>pulsefire/functools.py</code> <pre><code>def sync_to_async(executor: Executor | None = None):\n    \"\"\"Convert a function to run asynchronously. Use as decorator `@sync_to_async()`.\n\n    Example:\n    ```python\n    @sync_to_async()\n    def sample_func(number: int):\n        ...\n\n    async def main():\n        await sample_func(0)\n    ```\n\n    Parameters:\n        executor: Executor to be passed to `loop.run_in_executor`.\n    \"\"\"\n\n    def decorator[**P, R](func: Callable[P, R]) -&gt; Callable[P, Awaitable[R]]:\n\n        @functools.wraps(func)\n        async def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n            new_func = functools.partial(func, *args, **kwargs)\n            return await asyncio.get_event_loop().run_in_executor(executor, new_func)\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"reference/utilities/task-group/","title":"TaskGroup","text":"<pre><code>from pulsefire.taskgroups import TaskGroup\n</code></pre> <p>               Bases: <code>TaskGroup</code></p> <p>Asynchronous context manager for managing groups of tasks. See python asyncio task groups documentation.</p> <p>Adapted for pulsefire, key differences from <code>asyncio.TaskGroup</code>:</p> <ul> <li>Accepts a semaphore to restrict the amount of concurrent running coroutines.</li> <li>Due to semaphore support, the <code>create_task</code> method is now async.</li> <li>Allows internal collection of results and exceptions, similar to <code>asyncio.Task</code>.</li> <li>If exception collection is on (default), the task group will not abort on task exceptions.</li> </ul> <p>Example: <pre><code>async with TaskGroup(asyncio.Semaphore(100)) as tg:\n    await tg.create_task(coro_func(...))\nresults = tg.results()\n</code></pre></p> Source code in <code>pulsefire/taskgroups.py</code> <pre><code>class TaskGroup(asyncio.TaskGroup):\n    \"\"\"Asynchronous context manager for managing groups of tasks.\n    See [python asyncio task groups documentation](https://docs.python.org/3/library/asyncio-task.html#task-groups).\n\n    Adapted for pulsefire, key differences from `asyncio.TaskGroup`:\n\n    - Accepts a semaphore to restrict the amount of concurrent running coroutines.\n    - Due to semaphore support, the `create_task` method is now async.\n    - Allows internal collection of results and exceptions, similar to `asyncio.Task`.\n    - If exception collection is on (default), the task group will not abort on task exceptions.\n\n    Example:\n    ```python\n    async with TaskGroup(asyncio.Semaphore(100)) as tg:\n        await tg.create_task(coro_func(...))\n    results = tg.results()\n    ```\n    \"\"\"\n\n    semaphore: asyncio.Semaphore | None = None\n    \"\"\"Semaphore for restricting concurrent running coroutines.\"\"\"\n    collect_results: bool = True\n    \"\"\"Flag for collecting task results.\"\"\"\n    collect_exceptions: bool = True\n    \"\"\"Flag for collecting task exceptions, disables abort.\"\"\"\n\n    def __init__(\n        self,\n        semaphore: asyncio.Semaphore | None = None,\n        *,\n        collect_results: bool = True,\n        collect_exceptions: bool = True,\n    ) -&gt; None:\n        super().__init__()\n        self.semaphore = semaphore\n        self.collect_results = collect_results\n        self.collect_exceptions = collect_exceptions\n        self._exceptions: list[BaseException] = []\n        self._results = []\n\n    async def __aenter__(self):\n        self._exceptions = []\n        self._results = []\n        return await super().__aenter__()\n\n    def results[T](self) -&gt; list[T]:\n        \"\"\"Return the collected results returned from created tasks.\"\"\"\n        if not self.collect_results:\n            raise RuntimeError(f\"TaskGroup {self!r} has `collect_results` off\")\n        return self._results\n\n    def exceptions(self) -&gt; list[BaseException]:\n        \"\"\"Return the collected exceptions raised from created tasks.\"\"\"\n        if not self.collect_exceptions:\n            raise RuntimeError(f\"TaskGroup {self!r} has `collect_exceptions` off\")\n        return self._exceptions\n\n    @override\n    async def create_task[T](self, coro: Awaitable[T], *, name: str | None = None, context: Context | None = None) -&gt; asyncio.Task[T]:\n        \"\"\"Create a new task in this group and return it.\n\n        If this group has a semaphore, wrap this semaphore on the coroutine.\n        \"\"\"\n        _coro = coro\n        if self.semaphore:\n            await self.semaphore.acquire()\n            async def semaphored():\n                try:\n                    return await _coro\n                finally:\n                    self.semaphore.release()\n            coro = semaphored()\n        return super().create_task(coro, name=name, context=context)\n\n    def _on_task_done(self, task) -&gt; None:\n        if task.cancelled():\n            return super()._on_task_done(task)\n        if exc := task.exception():\n            if self.collect_exceptions:\n                LOGGER.warning(\n                    \"TaskGroup: unhandled exception\\n\" +\n                    \"\".join(traceback.format_exception(type(exc), exc, exc.__traceback__))\n                )\n                self._exceptions.append(exc)\n                self._tasks.discard(task)\n                if self._on_completed_fut is not None and not self._tasks:\n                    if not self._on_completed_fut.done():\n                        self._on_completed_fut.set_result(True)\n                return\n        elif self.collect_results:\n            self._results.append(task.result())\n        return super()._on_task_done(task)\n</code></pre>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup-attributes","title":"Attributes","text":""},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.semaphore","title":"semaphore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>semaphore: Semaphore | None = semaphore\n</code></pre> <p>Semaphore for restricting concurrent running coroutines.</p>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.collect_results","title":"collect_results  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>collect_results: bool = collect_results\n</code></pre> <p>Flag for collecting task results.</p>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.collect_exceptions","title":"collect_exceptions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>collect_exceptions: bool = collect_exceptions\n</code></pre> <p>Flag for collecting task exceptions, disables abort.</p>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup-functions","title":"Functions","text":""},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.__init__","title":"__init__","text":"<pre><code>__init__(\n    semaphore: Semaphore | None = None,\n    *,\n    collect_results: bool = True,\n    collect_exceptions: bool = True\n) -&gt; None\n</code></pre> Source code in <code>pulsefire/taskgroups.py</code> <pre><code>def __init__(\n    self,\n    semaphore: asyncio.Semaphore | None = None,\n    *,\n    collect_results: bool = True,\n    collect_exceptions: bool = True,\n) -&gt; None:\n    super().__init__()\n    self.semaphore = semaphore\n    self.collect_results = collect_results\n    self.collect_exceptions = collect_exceptions\n    self._exceptions: list[BaseException] = []\n    self._results = []\n</code></pre>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__()\n</code></pre> Source code in <code>pulsefire/taskgroups.py</code> <pre><code>async def __aenter__(self):\n    self._exceptions = []\n    self._results = []\n    return await super().__aenter__()\n</code></pre>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.results","title":"results","text":"<pre><code>results() -&gt; list[T]\n</code></pre> <p>Return the collected results returned from created tasks.</p> Source code in <code>pulsefire/taskgroups.py</code> <pre><code>def results[T](self) -&gt; list[T]:\n    \"\"\"Return the collected results returned from created tasks.\"\"\"\n    if not self.collect_results:\n        raise RuntimeError(f\"TaskGroup {self!r} has `collect_results` off\")\n    return self._results\n</code></pre>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.exceptions","title":"exceptions","text":"<pre><code>exceptions() -&gt; list[BaseException]\n</code></pre> <p>Return the collected exceptions raised from created tasks.</p> Source code in <code>pulsefire/taskgroups.py</code> <pre><code>def exceptions(self) -&gt; list[BaseException]:\n    \"\"\"Return the collected exceptions raised from created tasks.\"\"\"\n    if not self.collect_exceptions:\n        raise RuntimeError(f\"TaskGroup {self!r} has `collect_exceptions` off\")\n    return self._exceptions\n</code></pre>"},{"location":"reference/utilities/task-group/#pulsefire.taskgroups.TaskGroup.create_task","title":"create_task  <code>async</code>","text":"<pre><code>create_task(\n    coro: Awaitable[T],\n    *,\n    name: str | None = None,\n    context: Context | None = None\n) -&gt; asyncio.Task[T]\n</code></pre> <p>Create a new task in this group and return it.</p> <p>If this group has a semaphore, wrap this semaphore on the coroutine.</p> Source code in <code>pulsefire/taskgroups.py</code> <pre><code>@override\nasync def create_task[T](self, coro: Awaitable[T], *, name: str | None = None, context: Context | None = None) -&gt; asyncio.Task[T]:\n    \"\"\"Create a new task in this group and return it.\n\n    If this group has a semaphore, wrap this semaphore on the coroutine.\n    \"\"\"\n    _coro = coro\n    if self.semaphore:\n        await self.semaphore.acquire()\n        async def semaphored():\n            try:\n                return await _coro\n            finally:\n                self.semaphore.release()\n        coro = semaphored()\n    return super().create_task(coro, name=name, context=context)\n</code></pre>"},{"location":"usage/advanced/concurrent-requests/","title":"Concurrent Requests","text":"<p>Asyncio provides multiple ways to run tasks concurrently:</p> <ul> <li><code>asyncio.gather</code></li> <li><code>asyncio.TaskGroup</code> (Python 3.11+)</li> </ul> <p>These are convenient ways to get the job done for general use-cases, however, they may not be the best fit for Pulsefire use-cases, as such, a modified <code>TaskGroup</code> is provided out of the box for this purpose.</p>"},{"location":"usage/advanced/concurrent-requests/#example-usage","title":"Example Usage","text":"<p>Request first 20 matches of a LoL summoner.</p> pulsefire.taskgroups.TaskGroupasyncio.TaskGroupasyncio.gather <pre><code>from pulsefire.clients import RiotAPIClient\nfrom pulsefire.schemas import RiotAPISchema\nfrom pulsefire.taskgroups import TaskGroup\n</code></pre> <pre><code>async with RiotAPIClient(default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;}) as client:\n    account = await client.get_account_v1_by_riot_id(region=\"americas\", game_name=\"200\", tag_line=\"16384\")\n    summoner = await client.get_lol_summoner_v4_by_puuid(region=\"na1\", puuid=account[\"puuid\"])\n    match_ids = await client.get_lol_match_v5_match_ids_by_puuid(region=\"americas\", puuid=summoner[\"puuid\"])\n\n    async with TaskGroup(asyncio.Semaphore(100)) as tg: #(1)!\n        for match_id in match_ids[:20]:\n            await tg.create_task(client.get_lol_match_v5_match(region=\"americas\", id=match_id)) #(2)!\n    matches: list[RiotAPISchema.LolMatchV5Match] = tg.results() #(3)!\n\n    for match in matches:\n        assert match[\"metadata\"][\"matchId\"] in match_ids\n</code></pre> <ol> <li>Semaphore is optional, provide a semaphore to limit the amount of concurrency.</li> <li>Unlike <code>asyncio.TaskGroup</code>, the <code>create_task</code> method is async.</li> <li>Internal collection of task results and exceptions.</li> </ol> <p>Key differences from <code>asyncio.TaskGroup</code></p> <ul> <li>Accepts a semaphore to restrict the amount of concurrent running coroutines.</li> <li>Due to semaphore support, the <code>create_task</code> method is now async.</li> <li>Allows internal collection of results and exceptions, similar to <code>asyncio.Task</code>.</li> <li>If exception collection is on (default), the task group will not abort on task exceptions.</li> </ul> <pre><code>from pulsefire.clients import RiotAPIClient\nfrom pulsefire.schemas import RiotAPISchema\n</code></pre> <pre><code>async with RiotAPIClient(default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;}) as client:\n    account = await client.get_account_v1_by_riot_id(region=\"americas\", game_name=\"200\", tag_line=\"16384\")\n    summoner = await client.get_lol_summoner_v4_by_puuid(region=\"na1\", puuid=account[\"puuid\"])\n    match_ids = await client.get_lol_match_v5_match_ids_by_puuid(region=\"americas\", puuid=summoner[\"puuid\"])\n\n    tasks: list[asyncio.Task] = []\n    async with asyncio.TaskGroup() as tg:\n        for match_id in match_ids[:20]:\n            tasks.append(tg.create_task(client.get_lol_match_v5_match(region=\"americas\", id=match_id)))\n    matches: list[RiotAPISchema.LolMatchV5Match] = [task.result() for task in tasks]\n\n    for match in matches:\n        assert match[\"metadata\"][\"matchId\"] in match_ids\n</code></pre> <p>About <code>asyncio.TaskGroup</code></p> <ul> <li>The first time any of the tasks belonging to the group fails with an exception other than <code>asyncio.CancelledError</code>, the remaining tasks in the group are cancelled, and exceptions are raised to the scope.</li> <li>Tasks may start to crowd up on memory if task creation is faster than task execution.</li> </ul> <pre><code>from pulsefire.clients import RiotAPIClient\nfrom pulsefire.schemas import RiotAPISchema\n</code></pre> <pre><code>async with RiotAPIClient(default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;}) as client:\n    account = await client.get_account_v1_by_riot_id(region=\"americas\", game_name=\"200\", tag_line=\"16384\")\n    summoner = await client.get_lol_summoner_v4_by_puuid(region=\"na1\", puuid=account[\"puuid\"])\n    match_ids = await client.get_lol_match_v5_match_ids_by_puuid(region=\"americas\", puuid=summoner[\"puuid\"])\n\n    matches: list[RiotAPISchema.LolMatchV5Match] = await asyncio.gather(*[\n        client.get_lol_match_v5_match(region=\"americas\", id=match_id)\n        for match_id in match_ids[:20]\n    ])\n\n    for match in matches:\n        assert match[\"metadata\"][\"matchId\"] in match_ids\n</code></pre> <p>About <code>asyncio.gather</code></p> <ul> <li>Requires scheduling all coroutines at once, may cause memory issues if not properly controlled or semaphored.</li> </ul>"},{"location":"usage/advanced/dont-repeat-clients/","title":"Don't Repeat Clients","text":"<p>It is generally advised to not repeat yourself; however, pulsefire clients instantiations can be repetitive in contexts such as:</p> <ul> <li>Event driven tasks.</li> <li>Web server endpoints.</li> <li>Non-aligned concurrency.</li> </ul> <p>There are two recommended options to solve this:</p> <ul> <li> <p>Using lifespan, startup, and shutdown events. Event-based and web frameworks typically provide these hooks for resource management, these hooks will only be executed once, before the application starts; and once, after the application is ready to shutdown. </p> Using lifespan eventsUsing startup and shutdown events <p>Info</p> <p>The following example is based on a FastAPI project.</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\nfrom pulsefire.clients import RiotAPIClient\n\n\nclient = RiotAPIClient(default_headers={\"X-Riot-Token\": os.environ[\"RIOT_API_KEY\"]})\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    async with client:\n        yield\n\napp = FastAPI(lifespan=lifespan)\n\n@app.get(\"/foo\")\ndef read_foo():\n    ... #(1)!\n\n@app.post(\"/bar\")\ndef create_bar():\n    ...\n</code></pre> <ol> <li>Already in client context due to lifespan.</li> </ol> <p>Info</p> <p>The following example is based on a FastAPI project.</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\nfrom pulsefire.clients import RiotAPIClient\n\n\napp = FastAPI()\nclient = RiotAPIClient(default_headers={\"X-Riot-Token\": os.environ[\"RIOT_API_KEY\"]})\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    await client.__aenter__()\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    await client.__aexit__()\n\n@app.get(\"/foo\")\ndef read_foo():\n    ... #(1)!\n\n@app.post(\"/bar\")\ndef create_bar():\n    ...\n</code></pre> <ol> <li>Already in client context due to startup.</li> </ol> </li> <li> <p>Simplifying the client instantiation code. Client instantiation is fast (if middleware instantiation is fast too), so it is completely fine to instantiate a client for each time it is invoked.</p> Using kwargsUsing partials <p>Info</p> <p>The following example is based on a FastAPI project.</p> <pre><code>from fastapi import FastAPI\nfrom pulsefire.clients import RiotAPIClient\n\n\napp = FastAPI()\nclient_kwargs = dict(\n    default_headers={\"X-Riot-Token\": os.environ[\"RIOT_API_KEY\"]}\n)\n\n@app.get(\"/foo\")\ndef read_foo():\n    async with RiotAPIClient(**client_kwargs) as client:\n        ...\n\n@app.post(\"/bar\")\ndef create_bar():\n    async with RiotAPIClient(**client_kwargs) as client:\n        ...\n</code></pre> <p>Info</p> <p>The following example is based on a FastAPI project.</p> <pre><code>import functools\n\nfrom fastapi import FastAPI\nfrom pulsefire.clients import RiotAPIClient\n\n\napp = FastAPI()\nclient_partial = functools.partial(\n    RiotAPIClient,\n    default_headers={\"X-Riot-Token\": os.environ[\"RIOT_API_KEY\"]}\n)\n\n@app.get(\"/foo\")\ndef read_foo():\n    async with client_partial() as client:\n        ...\n\n@app.post(\"/bar\")\ndef create_bar():\n    async with client_partial() as client:\n        ...\n</code></pre> </li> </ul>"},{"location":"usage/advanced/extending-clients/","title":"Extending Clients","text":"<p>You may extend pulsefire clients if doing so is required. For example:</p> <ul> <li>A data source is not implemented.</li> <li>An endpoint is not implemented.</li> <li>An endpoint has an outdated or incorrect signature.</li> </ul> <p>See reference for base client class.</p> <pre><code>from pulsefire.clients import BaseClient\n</code></pre> <pre><code>class AnotherClient(BaseClient):\n\n    def __init__(\n        self,\n        *,\n        base_url: str = &lt;BASE_URL&gt;, #(1)!\n        default_params: dict[str, Any] = {},\n        default_headers: dict[str, str] = {},\n        default_queries: dict[str, str] = {},\n        middlewares: list[Middleware] = [\n            json_response_middleware(),\n            http_error_middleware(),\n        ],\n    ) -&gt; None:\n        super().__init__(\n            base_url=base_url,\n            default_params=default_params,\n            default_headers=default_headers,\n            default_queries=default_queries,\n            middlewares=middlewares\n        )\n\n    async def get_sample_resource_by_param_1(self, *, param_1: str = ...) -&gt; &lt;ReturnType&gt;: #(2)!\n        return await self.invoke(\"GET\", &lt;PATH_OR_URL&gt;) #(3)!\n</code></pre> <ol> <li>Base URL of the data source, may be blank.</li> <li>Defines an endpoint, may provide parameters or a return type (schema). Special parameters that are passed directly to HTTP requests and not considered as path parameters: <code>queries</code>, <code>headers</code>, <code>json</code>, <code>data</code>. If the value of the parameter is Ellipsis (<code>...</code>), it will be ignored and considered empty.</li> <li>Calls <code>invoke</code> to build an invocation and send through the middlewares. Requires the HTTP method and the path or url of the endpoint, bracket formatting (<code>{param_1}</code>) is allowed. All local variables (e.g. <code>param_1</code>) in this scope are implicitly grabbed.</li> </ol> <p>Contributing</p> <p>Please consider creating a pull request if you consider your changes to be in scope and useful for most users.</p>"},{"location":"usage/advanced/modifying-schemas/","title":"Modifying Schemas","text":"<p>You may modify pulsefire schemas if doing so is required. For example:</p> <ul> <li>An schema is outdated, incorrect, or incomplete.</li> <li>Due to middlewares, the return value is no longer compatible with the schema.</li> </ul> <p>Contributing</p> <p>Please consider creating a bugfix pull request if an schema is outdated, incorrect, or incomplete.</p> <p>Currently the only way to modify schemas is by monkey-patching, do not import any pulsefire module other than <code>pulsefire.schemas</code> before the monkey-patching.</p> <pre><code>from typing import TypedDict\n\nfrom pulsefire.schemas import RiotAPISchema\n\nRiotAPISchema.LolClashV1Team = TypedDict(\"LolClashV1Team\", {\n    \"key1\": str,\n    \"key2\": int,\n})\n\nfrom pulsefire.clients import RiotAPIClient #(1)!\n</code></pre> <ol> <li>Import only after monkey-patching for it take effect.</li> </ol>"},{"location":"usage/advanced/proxy-rate-limiting/","title":"Proxy Rate Limiting","text":"<p>Proxy rate limiting allows rate limiting tasks to be performed at a centralized location. In typical rate limiting, each runtime has its own rate limiter and in-memory index, which can lead to inconsistent results when multiple runtimes are accessing a shared resource. Proxy rate limiting is useful for scenarios that require more than one runtime, such as:</p> <ul> <li>Serverless computing.</li> <li>Multi-processing.</li> <li>Sharding and replication.</li> </ul> Proxied flowchartNon-Proxied flowchart <p>The following flowchart is based on a project that contains:</p> <ul> <li>Application APIs on serverless computing.</li> <li>Cronjobs on compute instances.</li> </ul> <pre><code>flowchart TB\n    subgraph \"Compute\"\n        A{\"RateLimiter\"}\n    end\n    B[\"DataSource\"]\n    C[\"AppAPI:1\"] --&gt; A\n    D[\"AppAPI:2\"] --&gt; A\n    subgraph \"Serverless\"\n        C; D\n    end\n    E[CronJob] --&gt; A\n    subgraph \"Compute\"\n        E\n    end\n    A --&gt; B</code></pre> <p>Info</p> <p>The centralized rate limiter is hosted on a compute instance.</p> <p>The following flowchart is based on a project that contains:</p> <ul> <li>Application APIs on serverless computing.</li> <li>Cronjobs on compute instances.</li> </ul> <pre><code>flowchart TB\n    B[\"DataSource\"]\n    subgraph \"Serverless\"\n        P{\"RateLimiter:1\"}\n        Q{\"RateLimiter:2\"}\n        C[\"AppAPI:1\"] --&gt; P\n        D[\"AppAPI:2\"] --&gt; Q\n    end\n    subgraph \"Compute\"\n        R{\"RateLimiter:3\"}\n        E[CronJob] --&gt; R\n    end\n    P --&gt; B\n    Q --&gt; B\n    R --&gt; B</code></pre> <p>Warning</p> <p>Each runtime has its own rate limiter, and is not aware of other runtimes.</p>"},{"location":"usage/advanced/proxy-rate-limiting/#configuration","title":"Configuration","text":"<p>The following instructions shows how to configure a centralized <code>RiotAPIRateLimiter</code>.</p> <p>On your hardware that will host the centralized rate limiter:</p> <ol> <li> <p>Setup python and install pulsefire.</p> </li> <li> <p>Create a python file <code>ratelimiter.py</code> with the following code:</p> Local defaultLocal custom portPublic unprotectedPublic protected <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter().serve() # Served at 127.0.0.1:12227\n</code></pre> <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter().serve(port=&lt;PORT&gt;) # Served at 127.0.0.1:&lt;PORT&gt;\n</code></pre> <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter().serve(\"0.0.0.0\", 12227) # Served at 0.0.0.0:12227 (public)\n</code></pre> <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter().serve(\"0.0.0.0\", 12227, secret=&lt;SECRET&gt;) # Add authentication\n</code></pre> <p>About secret</p> <p>Ensure that the secret is hard to bruteforce, otherwise defeats the purpose.</p> </li> <li> <p>Manage the execution with a service manager such as systemd.</p> <pre><code>[Unit]\nDescription=Rate Limiter\nAfter=multi-user.target\n\n[Service]\nType=simple\nRestart=always\nExecStart=&lt;PYTHON_EXECUTABLE&gt; &lt;FILE_DIR&gt;/ratelimiter.py\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>(Public only) A reverse proxy (e.g. nginx) may be set up if HTTPS is needed.</p> </li> <li> <p>(Public only) Ensure that the firewall is configured correctly to allow incoming traffic.</p> </li> </ol> <p>On each of your runtimes:</p> <ol> <li> <p>Provide proxy target to the rate limiter:</p> Local defaultLocal custom portPublic unprotectedPublic protected <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter(proxy=\"http://127.0.0.1:12227\")\n</code></pre> <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter(proxy=\"http://127.0.0.1:&lt;PORT&gt;\")\n</code></pre> <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter(proxy=\"&lt;SCHEME&gt;://&lt;HOST&gt;:&lt;PORT&gt;\")\n</code></pre> <pre><code>from pulsefire.ratelimiters import RiotAPIRateLimiter\n\nRiotAPIRateLimiter(proxy=\"&lt;SCHEME&gt;://&lt;HOST&gt;:&lt;PORT&gt;\", proxy_secret=&lt;SECRET&gt;)\n</code></pre> </li> <li> <p>Run a test invocation to ensure the proxy is reachable.</p> <pre><code>async with RiotAPIClient(\n    default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;},\n    middlewares=[\n        json_response_middleware(),\n        http_error_middleware(),\n        rate_limiter_middleware(RiotAPIRateLimiter(\n            proxy=\"&lt;PROXY_TARGET&gt;\"\n        )),\n    ]\n) as client:\n    await client.get_lol_champion_v3_rotation(region=\"na1\")\n</code></pre> </li> </ol>"},{"location":"usage/advanced/using-middlewares/","title":"Using Middlewares","text":"<p>Middlewares are components that acts as a bridge between the client and the data source, responsible for doing specific tasks with the request and response of an invocation. For instance, some of the tasks involved are error handling, rate limiting, deserialization, caching, etc. Additionally, see reference of built-in middlewares with source codes.</p> Generalized SyntaxSequence Diagram <p>Middleware Syntax:</p> <pre><code>def middleware_1(): #(1)!\n    #(2)!\n    def constructor(next: MiddlewareCallable): #(3)!\n        #(4)!\n        async def middleware(invocation: Invocation): #(5)!\n            ... #(6)!\n            response = await next(invocation) #(7)!\n            ... #(8)!\n            return response #(9)!\n\n        return middleware\n\n    return constructor\n\ndef middleware_2(): ...\ndef middleware_3(): ...\n</code></pre> <ol> <li>Middleware configuration. May accept configuration parameters.</li> <li>Middleware setup during configuration (runs only once).</li> <li>Middleware constructor. Called during client <code>__init__</code> with <code>next</code> being the next middleware.</li> <li>Middleware setup during instantiation (runs once for each client).</li> <li>Middleware function. Called for each invocation.</li> <li>Tasks to be done with the invocation.</li> <li>Calls the next middleware with the invocation, this may happen more than once (e.g. in an error handling middleware).</li> <li>Tasks to be done with the invocation and response.</li> <li>Returns a value to the previous middleware, this may happen prematurely (e.g. in a cache middleware).</li> </ol> <p>Client Syntax:</p> <pre><code>Client(\n    middlewares=[\n        middleware_1(),\n        middleware_2(),\n        middleware_3(),\n    ]\n)\n</code></pre> <pre><code>sequenceDiagram\n    autonumber\n    Client-&gt;&gt;middleware_1: invocation\n    par middleware_1\n        middleware_1-&gt;&gt;middleware_2: invocation\n        par middleware_2\n            middleware_2-&gt;&gt;middleware_3: invocation\n            par middleware_3\n                middleware_3-&gt;&gt;Data Source: invocation\n                Data Source-&gt;&gt;middleware_3: response\n            end\n            middleware_3-&gt;&gt;middleware_2: response\n        end\n        middleware_2-&gt;&gt;middleware_1: response\n    end\n    middleware_1-&gt;&gt;Client: response</code></pre>"},{"location":"usage/advanced/using-middlewares/#custom-middlewares","title":"Custom Middlewares","text":"<p>You may write custom middlewares following the syntax above for your own use-cases. </p> <p>Clients comes with a default list of middlewares, to change them, provide a new list of middlewares to the <code>middlewares</code> parameter during instantiation as a replacement. The following example adds a cache middleware with an in-memory cache to the CDragonClient. </p> <pre><code>from pulsefire.caches import MemoryCache\nfrom pulsefire.clients import CDragonClient\nfrom pulsefire.middlewares import (\n    cache_middleware,\n    http_error_middleware,\n    json_response_middleware,\n)\n</code></pre> <pre><code>cache = MemoryCache()\n\nasync with CDragonClient(\n    default_params={\"patch\": \"latest\", \"locale\": \"default\"},\n    middlewares=[\n        cache_middleware(cache, [\n            (lambda inv: inv.invoker.__name__ == \"get_lol_v1_champion\", 3600), #(1)!\n        ]),\n        json_response_middleware(),\n        http_error_middleware(),\n    ]\n) as client:\n    champion = await client.get_lol_v1_champion(id=777) #(2)!\n    assert champion[\"name\"] == \"Yone\"\n    champion = await client.get_lol_v1_champion(id=777) #(3)!\n    assert champion[\"name\"] == \"Yone\"\n</code></pre> <ol> <li>Cache middleware defining a TTL of 1 hour and applies to all requests. See reference for detailed usage.</li> <li>This request misses the cache, proceeds to next middleware, then cache the response.</li> <li>This request hits the cache, returns the cached response immediately.</li> </ol> <p>Contributing</p> <p>Please consider creating a pull request if you consider your custom middlewares to be in scope and useful for most users.</p>"},{"location":"usage/basic/installation/","title":"Installation","text":"<p>Info</p> <p>Pulsefire requires Python 3.12 or higher.</p> with pip (recommended)with git (latest) <p>Pulsefire is published on PyPI and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install Pulsefire with:</p> <pre><code>pip install pulsefire -U\n</code></pre> <p>Pulsefire can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/iann838/pulsefire.git\n</code></pre> <p>Next, install its dependencies with:</p> <pre><code>pip install -e pulsefire\n</code></pre>"},{"location":"usage/basic/installation/#typing-packages","title":"Typing packages","text":"<p>Info</p> <p>These packages are not required if you have pulsefire installed, the full package comes with built-in typing support. They are available for developers who want to use pulsefire for typing purposes only without installing the full package.</p> with pip (python)with yarn (typescript) <p>The python types package is published on PyPI and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install Pulsefire with:</p> <pre><code>pip install pulsefire-types -U\n</code></pre> <p>Available subset of modules:</p> <pre><code>from pulsefire.schemas import ...\n</code></pre> <p>The typescript package is a transpiled version of <code>pulsefire-types</code>, it is published on NPM and can be installed with <code>yarn</code>. Open up a terminal and install Pulsefire with:</p> <pre><code>yarn add pulsefire-types -D\n</code></pre> <p>Available subset of modules:</p> <pre><code>import type { ... } from \"pulsefire-types/schemas\"\n</code></pre>"},{"location":"usage/basic/quick-start/","title":"Quick Start","text":"<p>Request basic info of a LoL summoner. </p> <pre><code>from pulsefire.clients import RiotAPIClient\n</code></pre> <pre><code>async with RiotAPIClient(default_headers={\"X-Riot-Token\": &lt;API_KEY&gt;}) as client: #(1)!\n    account = await client.get_account_v1_by_riot_id(region=\"americas\", game_name=\"200\", tag_line=\"16384\")\n    summoner = await client.get_lol_summoner_v4_by_puuid(region=\"na1\", puuid=account[\"puuid\"])\n    assert summoner[\"summonerLevel\"] &gt; 200\n</code></pre> <ol> <li>It's not recommended to hardcode your API keys or secrets, store them in environment variables and grab them using <code>os.environ</code>.</li> </ol>"},{"location":"usage/basic/type-hints/","title":"Type hints","text":"<p>Pulsefire objects and client responses are typed, types can be viewed on Reference -&gt; Schemas. Here is a preview on Visual Studio Code with Pylance:</p> <p> </p> <p>Linter support</p> <p>Ensure that your linter is up to date to support Python 3.12 type hint syntaxes.</p>"}]}